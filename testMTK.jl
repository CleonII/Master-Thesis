# Number of parameters: 1759
# Number of species: 286

### Define independent and dependent variables
@variables t s_0176 s_0557 s_0467 s_0089 s_0581 s_1207 s_0657 s_0979 s_0725 s_0709 s_0061 s_1426 s_0403 s_0082 s_1576 s_0680 s_1182 s_0039 s_0232 s_0969 s_0980 s_1578 s_1487 s_0259 s_0475 s_1520 s_1010 s_1161 s_0656 s_1212 s_0373 s_0551 s_0118 s_1537 s_0056 s_1275 s_0764 s_0662 s_0362 s_1255 s_1447 s_0302 s_0297 s_0262 s_0951 s_0322 s_0349 s_0427 s_1364 s_0973 s_0499 s_1543 s_0364 s_0299 s_1454 s_0978 s_0754 s_0615 s_0654 s_0567 s_1233 s_1271 s_0028 s_0002 s_1056 s_0577 s_1012 s_0645 s_0529 s_1524 s_0313 s_0613 s_1324 s_0304 s_1176 s_1399 s_1565 s_0563 s_0327 s_1029 s_0037 s_0009 s_0386 s_1038 s_0629 s_0260 s_1366 s_0390 s_0231 s_1045 s_1048 s_0836 s_0918 s_1408 s_0015 s_1073 s_1234 s_1351 s_0018 s_1065 s_1429 s_1413 s_0782 s_0325 s_0298 s_0526 s_1151 s_0165 s_0291 s_0953 s_0419 s_1107 s_0300 s_1238 s_0550 s_0008 s_0340 s_1153 s_1343 s_0991 s_0739 s_1101 s_0033 s_0565 s_0025 s_0178 s_1025 s_0493 s_0943 s_0016 s_0204 s_0010 s_0999 s_0423 s_0959 s_0076 s_0584 s_0644 s_0066 s_1014 s_0481 s_0218 s_0063 s_0295 s_1006 s_0019 s_0766 s_0940 s_0582 s_0595 s_0306 s_1059 s_1559 s_0625 s_0126 s_1346 s_1616 s_0454 s_1051 s_0835 s_1191 s_1386 s_1545 s_0710 s_0201 s_0145 s_0190 s_1302 s_0539 s_0681 s_0664 s_0394 s_0767 s_1286 s_0146 s_0420 s_1016 s_1187 s_0785 s_1342 s_0471 s_1035 s_1039 s_0207 s_0515 s_0743 s_0209 s_1084 s_1577 s_1269 s_0359 s_0555 s_0568 s_1194 s_0409 s_1377 s_1195 s_1020 s_0455 s_0142 s_1445 s_1266 s_1277 s_0750 s_0324 s_0516 s_1011 s_1360 s_1270 s_0522 s_0573 s_0722 s_1521 s_0326 s_1449 s_0211 s_0062 s_1427 s_0141 s_0773 s_0981 s_0955 s_1003 s_0587 s_0393 s_1538 s_0162 s_0180 s_0574 s_0745 s_0335 s_0328 s_0367 s_0765 s_1416 s_1468 s_1198 s_1620 s_0586 s_0258 s_0261 s_0380 s_0210 s_0120 s_0965 s_0122 s_0602 s_0849 s_0589 s_1331 s_0841 s_0445 s_1365 s_0666 s_0077 s_1192 s_0312 s_1203 s_1337 s_0837 s_1579 s_1469 s_0458 s_0075 s_0633 s_0434 s_0296 s_0619 s_0188 s_1535 s_0649 s_0078 s_1405 s_1376 s_0301 s_0700 s_0314 s_1032 s_1021 s_1467 s_0086 s_0158 s_0672 s_0456 s_1569 s_1322

### Define parameters
@parameters Keq_0148 Km0456_0432 Km0456_0387 Km0529_0386 Vmax_0300 Km0940_0658 Km1203_0012 Vmax_0901 Km0456_0016 ep1405_2111 Km1468_1266 Vmax_0732 Km0259_0917 Keq_0361 Km0722_0038 Keq_0153 Km0302_0079 Km0210_0040 Vmax_0877 Km1207_0238 Keq_0976 Km0991_0203 Km1212_0889 Vmax_0800 Vmax_0014 Keq_0079 Km0141_0015 Vmax_0242 Keq_0902 Keq_0041 Km0515_0203 Km0201_0154 Keq_0004 Km0529_0435 ep0434_2111 Km1351_0877 Km0327_0914 Km1616_1038 Km0367_0559 Km0180_0216 Vmax_0563 ep1048_2111 Vmax_0757 Km0999_0203 Km1203_0491 Km1198_0545 Km0633_1012 Keq_0257 Km1207_0547 Keq_0724 Km1203_0165 Km1275_0259 Km0991_0699 Km1207_0344 Km1322_1026 Keq_0732 Km0455_0250 Km0231_0041 Keq_0997 Keq_0491 Km0959_0989 Keq_0007 Km0991_0012 Km1207_0219 Km0722_0445 Km0322_0727 Km0076_0913 Km0577_0038 Km0394_0908 Km1447_1012 Vmax_0307 Keq_0855 ep0973_2111 Keq_0060 Km0456_1664 Km1413_0144 Vmax_0851 Km0419_0471 Vmax_0366 Keq_0434 Km1198_0770 Vmax_0495 Km1270_0821 Km0456_0911 Km0180_0918 Km0373_0549 Keq_1704 Keq_0698 Vmax_0267 ep0969_2111 Keq_0311 Km0481_0267 Km0529_0398 Km1212_0242 Km1469_0883 Km0359_0173 Km0725_0152 Km0969_0211 Km0349_0040 Vmax_0731 Km1416_0901 ep1021_2111 Km0991_0538 Vmax_0486 Km1207_0759 Km1203_0486 Km0456_0235 ep0672_2111 Keq_0688 Vmax_0208 Km0061_0339 Vmax_0984 Km0782_0528 Keq_0352 Km0434_0208 Km0373_0559 Keq_0916 Km0568_0466 Km0394_0914 Km1322_0759 Km0568_0534 Km1207_0096 Keq_0450 Vmax_1010 Km0434_0407 Keq_0215 Km1003_0502 Km0066_0713 Vmax_0362 Keq_0759 Km1620_0974 Km0633_0514 Keq_1049 Km0386_0142 Vmax_0988 Km0529_0389 Vmax_0762 Vmax_1038 Km1073_0433 Km0573_0902 Km0973_0153 Vmax_0203 Km0394_0892 Km0710_0004 Km1286_0391 ep0782_2111 Km1399_0001 Km1469_1027 Km1351_0858 Km0394_0079 Km1012_0309 Km1212_0317 Km1386_0916 Km0420_1115 Km0973_0214 ep0584_2111 Keq_0892 ic0981_2111 Km1212_0481 Vmax_1055 Km0529_0543 Km1207_0231 Km1010_0537 Km0394_0887 Keq_0207 Km0619_0337 Km1275_0238 Keq_0910 Km1620_0550 Keq_0502 Km0335_0091 ic0991_2111 Km0314_0967 Vmax_0012 Km1187_0202 Vmax_0142 Km0455_0214 Km0581_0984 ic0969_2111 Keq_0893 Km0180_0674 Km0434_0886 Vmax_0658 Km0434_1704 Keq_0901 Km1212_0732 Vmax_0986 ic1051_2111 Km0577_0982 Km0529_0387 Vmax_0386 Km0118_0957 Vmax_1026 Vmax_0996 Km0394_0528 Keq_0889 Keq_0014 Vmax_0018 Km0991_0216 Km1454_0435 Km0951_0938 Km0522_0300 Km0209_0235 Km1207_0558 Km1212_0432 Km1616_0550 Km0394_0148 Km0359_0165 Km0767_0491 Keq_0432 Vmax_1011 Km0434_0211 ep0657_2111 Keq_1729 Vmax_0911 ep0955_2111 Vmax_0438 Km0633_0355 Keq_0312 Keq_0891 Km0176_0545 Km0629_0491 Keq_0108 ic1045_2111 Km0299_0908 Km1399_0097 Km0568_0758 ep1051_2111 Km0078_0909 Km0633_0407 Km0158_0967 Km1207_0688 Km0427_0203 Km1207_0387 Km1360_0962 ep1029_2111 Km0849_0570 Km0180_0988 Km0595_1052 Km1565_0565 Km1376_0355 Km0999_0250 Km0326_0910 Km1346_0900 Keq_0888 Km0178_0016 Vmax_0910 Km1447_1010 Km0991_0211 Km1487_0502 Km0456_0959 Km0394_0226 Km0991_0563 Km1275_0694 Km0434_0958 Km1399_0962 Km1364_0908 Km0456_0097 Vmax_0970 Vmax_0216 Keq_0040 Km1203_0545 Km0126_0758 Keq_0974 ep0773_2111 Vmax_0096 Vmax_0231 Km1487_0912 Km1198_0445 Km1538_0005 Vmax_0491 Vmax_0806 Km1376_0667 Km1203_0658 Km1266_0818 Km1212_0240 Vmax_0564 Keq_0758 Vmax_0887 Km0662_0233 Keq_0466 Km0978_0547 Km1271_0300 Km0089_0874 Vmax_0007 Km1039_1055 Km0010_0029 Km0529_0111 Keq_0310 Km0456_0658 Km0232_1087 Km1275_0339 Km0529_0399 Km0180_0658 Km0999_0079 Km0434_0904 Km1331_0337 ic1006_2111 Km0394_0886 Km0033_0697 Km0145_0118 Km0061_0349 Km1322_0967 ep1056_2111 Km1212_0996 Km0434_0446 Keq_0792 Vmax_0439 Km1203_0061 Keq_0481 Vmax_0024 Keq_0967 Km0009_0060 Km0764_1054 Km0078_0910 Keq_0061 Km1386_0915 Km0633_0211 Vmax_1051 Km0577_0889 Vmax_0699 Keq_0570 Km1487_0499 Vmax_0538 Km0445_1664 Keq_0486 Km1101_0393 Km1207_0435 Keq_0818 Vmax_0874 Km0312_0007 Km0471_0880 Km0304_0724 Km0951_0851 Keq_1063 Keq_0984 Km1012_0144 Km0767_0489 Keq_0911 Vmax_0023 Km0393_0152 Km1275_1979 Km0340_0889 Km1207_1012 Vmax_0939 Km0625_1045 ic1059_2111 Vmax_0909 Vmax_0713 Km0456_0393 Km0773_0510 Km0633_0257 Vmax_0041 Km1014_0548 ic1021_2111 Vmax_0243 Km1212_0435 Keq_0970 Km1543_0195 Km1449_0407 Km1101_0433 Km0991_0470 Km1569_0237 Km1255_0397 Km1025_0988 Km1032_0851 Vmax_0886 Km1559_0811 Keq_0694 Km0373_0992 Km0335_0466 Km1161_0389 Km0619_0336 Km0555_0450 Vmax_0091 Km1012_0813 Km0089_0594 Km1207_0233 Km0427_0670 Km0394_0811 Km1101_0435 ic0965_2111 ic1524_2111 Km0423_0208 Km0056_0353 Km0991_0250 Keq_0471 ep1035_2111 Keq_0739 Km1212_0922 Km0481_0259 Km1198_0235 Km1207_0432 Km0743_0722 Vmax_0353 ic0434_2111 Km0434_0115 Keq_0909 Keq_0317 Km0999_0211 Km1238_0548 Vmax_0922 Km0394_0958 Keq_0024 Km1084_0393 ic1545_2111 Vmax_0029 Keq_0536 Vmax_0467 Km0454_0542 Vmax_0250 ic0999_2111 Km1365_0570 Km0423_0399 Km1101_0432 Vmax_0309 ic0649_2111 Keq_0307 Vmax_0688 Km1212_0398 Km0190_1012 Km0991_0915 Km1386_0225 Km0539_0257 Keq_0096 Vmax_0391 Km1454_0407 Keq_0027 Km1426_0887 Vmax_0239 Km0386_0144 Km0662_0244 Km0582_0974 Vmax_0548 Keq_0918 Km0326_0225 Keq_0731 Km0551_0990 Km0633_0910 Km1543_1084 ep1016_2111 Km1207_0259 Km1322_0040 Km0672_1014 Vmax_0697 Km1322_0911 Km0393_0153 Km0434_0997 Km1207_0239 Km0180_0699 Vmax_1041 Km0529_0008 Keq_0912 Keq_0669 Vmax_0678 Vmax_1729 Km1212_0241 Keq_0877 Km1207_0241 Km1322_0757 Km1331_0008 Km1212_0434 ep1337_2111 Vmax_0339 Km0615_0330 Keq_0697 Km1207_0237 Km1212_0269 ic1025_2111 Km1207_0397 Km0207_0564 Km0434_0250 Km0146_0097 Km0434_0726 Km0991_1087 Km0953_0678 Km0587_0976 Km0016_0096 Km0434_0215 ep1003_2111 Keq_1010 Km1212_0015 Km1520_2079 Vmax_0398 Km0304_0732 Km0394_0115 Km0015_0207 Km1322_1051 Km0456_1697 ep0965_2111 Vmax_0154 Km0394_0108 Km0529_0549 Km0943_0462 Km0991_1063 Keq_0514 Km0529_0993 Vmax_0280 Keq_0259 Km1322_0307 Km0471_0874 Keq_0900 Keq_0887 Vmax_0040 Km0434_0476 Vmax_0008 Km0589_1704 Km0434_0811 ep1569_2111 ep1107_2111 Keq_0231 Km1322_1936 Km0764_1055 Km0582_1729 Keq_0913 Km1101_0389 Vmax_0080 Keq_0214 Km0493_0267 Vmax_0553 Km1559_0307 ep1039_2111 Km0445_0958 Keq_0018 Km0423_0142 Km0259_0918 Km1207_1027 Km1449_0391 Keq_0202 Vmax_0900 Keq_0005 Keq_0144 Km0750_0553 Vmax_0153 Vmax_0811 Km0434_0970 Vmax_0565 Vmax_1054 Keq_1936 Vmax_2030 Km0991_0818 Km1322_0792 Km1408_1049 ep0662_2111 ep0700_2111 Km1322_0917 ep1346_2111 Vmax_0257 Keq_0012 Km0403_0563 Keq_0020 Keq_0235 Km1107_0362 Km0959_0678 Vmax_0566 Keq_1087 Keq_0203 Keq_0240 Km1212_0389 Keq_0806 Km0434_0855 Km0018_0739 Keq_0103 Km0180_0543 Km0207_0538 Km0423_0407 Km0739_0529 Keq_0269 Km0394_0800 Vmax_1027 Km0999_0915 Km1322_0726 Km1234_0312 Km1212_0433 Keq_0820 Km1212_1038 Km1207_0398 Km1207_0267 Vmax_0241 Keq_0510 Km0037_1011 Km0394_0250 ic0595_2111 Keq_1041 Km0785_0153 Vmax_0483 Km1212_1012 Keq_0670 Km1182_0118 Km1271_0958 Km0018_0904 Km0529_0024 Vmax_0061 Km1322_1244 Vmax_0152 Km0739_0153 ep0122_2111 Km0394_0154 Keq_0663 ic0584_2111 Km0529_0432 Km0409_0195 Km1207_0391 Km1302_0435 Km0362_1106 Keq_0495 Km0306_0732 ep0615_2111 ic0782_2111 Km1427_1049 Km0709_0001 Keq_0115 ep1524_2111 Km1198_0012 Km1151_0688 Km0586_0970 Km0595_0386 Km0529_0336 Km0589_0326 Km0529_0961 Km1416_0726 Vmax_0065 Vmax_0968 Keq_0438 Km0419_0476 Vmax_0974 Km0434_0908 ic1048_2111 Vmax_0915 Km0456_0938 Keq_0800 Km0419_0470 Km1039_0502 Keq_0811 Vmax_0165 Vmax_0269 Keq_0151 Vmax_0594 Km1212_0466 Km0008_0669 Km0991_0476 Keq_0534 Km0529_0558 Km0373_0398 Vmax_0302 ic1346_2111 Km1537_0439 Km0454_0027 Km0739_0978 Vmax_0990 Km0764_0486 Km0211_0039 Km1195_0694 Km0258_0891 Km1212_0080 Km0380_0336 Vmax_0499 Vmax_0919 ep0589_2111 Km0025_0001 Km0434_0399 Km1207_0989 Km0999_0514 Km0973_0211 Km0991_0514 Km0710_0438 Vmax_0674 Km1151_1936 Km1429_0996 Km0557_1050 Km0037_1010 Km0062_0696 Km0981_0312 Km1207_0471 Keq_0915 Vmax_0118 Keq_0553 Keq_0989 Km1203_0961 Km1579_0237 Km1331_0257 Km0260_0892 Km0980_0309 Km1212_1027 Km1065_0386 Km0362_0813 Km0745_0355 Vmax_0736 Km0394_0904 Km1059_0698 Km0837_0483 ep0981_2111 Km0529_0434 Keq_0216 Km0300_0855 Keq_0722 Km0722_0446 Km1207_0939 Km0471_0257 Km1207_0236 Km1413_0901 Km0367_0103 Km0645_0361 Keq_0241 Km0619_1052 Keq_0364 ic0918_2111 ic0526_2111 Km0529_0495 Km1187_0913 Km1447_1011 Km0008_0353 Vmax_0236 Km0082_0008 Km1012_0727 Km0529_0103 Km0633_0525 Km0349_0020 Km0394_0997 ic1520_2111 Km1207_0393 Vmax_0195 Km0298_1026 Km1212_0391 Km0434_0800 Keq_0208 ic1569_2111 Keq_0219 Keq_0445 Km1207_0481 Km0141_0525 Km0526_0792 Km0633_0462 Km0419_0014 Km0557_0467 Km1620_1038 Km1322_0214 Km1579_0234 Km0515_0278 Km1020_0762 Keq_0674 ep0423_2111 Vmax_0235 Km1487_0727 Km1203_0696 Km0555_0886 Km1620_0978 Keq_0242 Km1577_0239 Vmax_0543 Keq_0239 Vmax_0568 Keq_0065 Km0075_0892 Km0028_0736 Km1322_0489 Vmax_0821 Keq_0362 Km1233_0813 Vmax_0234 Km0434_1072 Km1270_0820 Km1212_0957 Km1535_0770 Km0633_0225 Vmax_1166 Km0481_0919 Vmax_0570 Vmax_0667 Km1003_0914 Km0725_0207 Km1194_0349 Km1449_0393 Km0529_0391 Km0980_0310 Km0056_0663 ic1107_2111 Km1616_0978 Km1322_0226 Vmax_0207 Km0526_0880 Km0300_0911 Km0629_1054 Km0434_0887 Keq_0962 Vmax_1084 Vmax_0027 Km0981_0310 Vmax_0451 Keq_0439 Km0710_0439 Km1416_0858 Vmax_1762 Km1212_0244 Vmax_0962 ep1520_2111 Km1212_0041 Km0312_0563 Km0551_1050 Km0394_0446 Km1029_0726 ic1029_2111 Km1342_0901 Keq_0990 Km1342_0900 Km0302_0855 Keq_1052 Keq_0237 Km1538_1072 V0_2111 Keq_0874 Km0231_0993 Km1207_0433 Km1275_0240 Vmax_1049 Keq_0563 Km0082_0495 Km1192_0818 Km1207_0434 Km0037_0698 ep1545_2111 Km1545_0821 Km0836_0545 Keq_0015 Km0680_1762 Km1176_0434 Km0633_0722 Km0145_0759 Vmax_0202 Km0475_0259 Km0750_0697 Km0295_0219 Vmax_0233 Vmax_0336 Keq_1072 Km1322_0568 Km0086_1055 Km0991_0018 Km0973_0908 Km1399_0674 Km1445_0041 Km0434_0108 Km1343_0858 Vmax_0545 Keq_1012 Km0750_0481 Km0539_0806 ep0649_2111 Km1212_0759 Km1324_1244 Km0764_1050 Km1322_0153 Km0493_0269 Vmax_0528 Km1212_0096 Km1275_1010 Keq_1011 ep0666_2111 Km1275_0233 Keq_0483 Vmax_0883 Vmax_0466 Km1011_0538 Km1212_0688 Vmax_1087 Km1322_0020 Km0394_0476 Keq_0880 Km0456_0389 Km0765_1172 Km0434_0916 Km1212_0234 ep1351_2111 Km0602_0397 Km1212_0939 Km0499_0269 Km1286_0389 Vmax_0510 Km0180_1087 Km0991_0989 Km0261_0065 Km1207_0173 Km1538_0811 Km1207_1038 Km1322_0032 Km1212_0267 Km0581_1049 Keq_0142 Keq_0467 Keq_0470 Km0456_0445 Km0373_0300 Vmax_0005 Km0380_0495 Keq_0713 Km1198_0696 Km1039_0880 Km1212_0669 Keq_0957 Km1207_0234 Km1322_0486 Km0362_0311 Km0340_0091 Keq_0565 Km0373_0024 Km0419_0310 Km0725_0151 Km1365_0912 ic0615_2111 Vmax_0559 Km0039_0669 Km0584_1729 Vmax_0310 Km0656_0973 Km0981_0311 Vmax_0888 Km0120_0912 Km0190_0462 Keq_0173 Vmax_0471 Km1275_0242 Km0211_0996 Km0180_0663 Km1010_0536 Km0475_0340 Vmax_0462 Km0629_0450 Vmax_1072 Vmax_0173 Km0991_0118 Km1578_0240 Vmax_0976 Vmax_0481 Km0455_0816 Vmax_0880 Km0499_0594 Km1386_0202 Km1212_0386 Vmax_0225 Km1207_0240 Vmax_0244 Km0394_0974 Vmax_0015 ic0700_2111 Vmax_0978 Vmax_0534 Km1198_0165 Vmax_0904 Km0645_0362 Km1413_0986 Keq_0278 Vmax_0770 Vmax_1664 Km0557_0723 Km1207_0242 Keq_0337 Km0180_1063 Km0835_0027 Km1207_0466 Km1322_0476 Vmax_1704 Vmax_0558 Km0015_0208 Vmax_0908 Keq_0858 Km0657_0243 Km0918_0594 Km1233_0549 Km0218_0558 Km1207_0732 Km0456_0391 Km0456_0029 Vmax_0917 Km1207_0996 Vmax_0278 Vmax_0214 Km1275_0269 Km1151_0697 Km1413_0900 Km0456_0939 Keq_0336 Keq_0451 Vmax_0997 Km1467_1026 Keq_0988 Vmax_1014 Km0785_0800 Km0313_0014 Km0306_1045 Km1212_0233 Vmax_0397 Km0456_0739 Km0943_0355 Km1322_0806 Keq_0821 Km0529_0393 Km1322_0816 Km1212_1011 Keq_0226 Vmax_0435 Vmax_0818 Km0700_0986 Vmax_0389 Keq_0550 Keq_0566 Km0180_0661 Km1038_0989 Km0644_0361 Km0122_0241 Km0649_1045 Km0373_0111 Keq_0813 ic1405_2111 Keq_0658 Keq_0195 Vmax_0434 Km1203_0731 Km1198_0713 Km1467_1266 Km1360_0020 Vmax_0079 Km0394_0215 Vmax_0525 Vmax_1936 Km0180_0018 Km1212_0237 Km1538_0510 ic0423_2111 Km0434_0739 Km0849_0565 Km0613_0330 Km1161_0387 Vmax_0103 Vmax_0489 Km0953_0018 Km1212_0219 Km1487_0344 Keq_0699 Km1271_0713 Keq_0968 Keq_0344 Vmax_0111 Km0456_0993 ep1045_2111 Km0324_0065 Km0837_0550 Km1399_0203 Km0434_0911 Km0165_0060 Km0062_0688 Vmax_0739 ic0672_2111 Keq_0549 Km0965_0207 Km1203_0235 Keq_0234 Km0434_0892 Km1616_0970 Km0142_0014 Vmax_1050 Km1198_0891 Km0362_0111 Km0296_0238 Vmax_0470 Km1207_0244 Km0445_0250 Km0394_1729 Vmax_0237 Km0295_0215 Keq_0558 Vmax_0916 Km0526_0874 Vmax_0913 Km0633_1084 Vmax_0312 Km1616_0974 Vmax_0722 Vmax_0004 Km1620_0970 Km0260_0891 ep1059_2111 Keq_0548 Km0304_0731 Km0075_0486 Km0394_1026 ep1006_2111 Km1153_0874 Vmax_0038 Km0973_0208 Keq_0499 Km1616_0976 Keq_0435 Km1269_0820 Km0325_0914 Km0188_0893 Vmax_0982 Km0664_0233 Keq_1026 Km1059_0317 Vmax_0450 Km1364_0911 Km0188_0366 Km1101_0386 Keq_0959 Km1569_0986 Keq_0340 Km0232_0352 Keq_0091 Km0633_0568 Km1016_0663 Km0467_0806 Vmax_0387 Km0390_0032 Km0218_0559 Keq_0851 Km0467_0976 Km0434_0142 ic1467_2111 Km0999_0476 Km0028_0558 Keq_0080 Km0142_0015 Km1487_0446 Km0782_0514 Km0306_0080 Km0991_0918 Km1559_0973 Keq_1664 Vmax_0892 Km0066_0451 Keq_1050 ic0666_2111 Keq_0397 Km0301_0499 Km0841_0312 Keq_0279 Km0943_0667 Km0434_0534 Km0178_0310 Km0299_0151 Km0654_0364 ic0662_2111 Km1195_0762 Vmax_0993 Km1073_0432 Km1207_1011 Keq_0339 Km0039_0016 Keq_0236 Km0991_0851 Keq_0489 Km0557_0886 Km0456_0397 Vmax_0726 Keq_0525 Km1101_0434 Km0118_0012 Km1408_0916 ep0526_2111 Km0709_0438 Km0456_0961 Km1176_0433 Keq_0757 Km0394_0911 Km0529_0407 Km1021_0699 Km1416_0900 Km0419_0326 Vmax_0989 Keq_0736 Km0409_1051 Vmax_1012 Km0633_0399 Km1212_0259 Km1045_1041 Km0076_0566 Vmax_0550 Keq_0039 Km1565_0514 Km0260_0893 Keq_1045 Km0063_0696 Keq_0727 Km0666_0244 Keq_0537 Km1212_0547 Km0613_0978 Km1051_1063 Vmax_0669 Vmax_1115 Vmax_0361 Km1014_0547 Km0423_0916 Km1322_0279 Km0943_0739 Km0835_0543 Km0841_1027 Km1212_0238 Vmax_0547 Km0710_0001 Vmax_0240 Km0586_0529 Km0122_0231 Km0456_0386 Vmax_0542 Keq_0545 Km1207_0317 Km1207_0678 Km0722_0317 Km0322_0080 Km1337_0877 Km1337_0880 Km0010_0061 Km0456_0877 Km0016_0352 Km0550_0563 Km0516_0302 Vmax_0317 Km0002_0005 Km1212_0471 Vmax_0813 Km1039_0993 Km0574_0902 Km0434_0548 Km0063_0004 Km0394_0142 Km0324_0279 Vmax_2079 Vmax_0144 Km0456_0434 Keq_0016 Km0725_0451 Km0722_0762 Km0754_0483 Km0086_0566 ic1003_2111 Km1198_0491 Km0602_0432 Km0297_0241 Km0325_0499 Vmax_0151 Km0434_0225 Km0419_0307 Km1233_0311 Km0955_0674 Keq_0904 Km0434_0914 Km1212_0236 Km0204_0939 Vmax_0060 ic1032_2111 Keq_0349 Vmax_0723 Vmax_0891 Km1198_0565 Vmax_0858 Km1275_0438 Keq_0165 Keq_0211 Km0978_0219 Km1322_0065 Km0359_0959 Keq_0816 Km1360_0065 Km0633_0364 Km0754_0481 Vmax_0670 Km0434_0528 Vmax_0889 Km0595_1014 Vmax_1106 ic1039_2111 Keq_1038 ic0773_2111 Km1360_0366 Keq_0568 Km0955_0670 Km1322_0914 Km1524_1052 Keq_0267 ic0002_2111 Km1275_0922 Km0782_0529 Km0629_1936 Km1269_0339 Vmax_0364 Km1302_0434 Km0551_0020 Km0033_0553 Keq_0883 Km1020_0670 Keq_0038 Km0765_0489 Km0979_0208 Km0201_0883 Keq_1084 Km0434_0962 Km0739_0361 Km1153_0757 Km1065_0387 Vmax_0020 Keq_0309 Keq_0678 Keq_0996 Km0025_0553 Km0680_0165 Km0700_0243 Km1207_0386 Km0176_0018 Km1006_0536 Vmax_0698 Km0394_1072 Km0403_0912 Vmax_0311 Vmax_0663 Keq_0029 Km0565_1166 Vmax_0432 Keq_0353 Km0515_0279 Keq_0023 Km0625_0344 Km1014_0549 Km0180_0851 Vmax_0016 ep0089_2111 Vmax_0407 Km1038_0988 Km0314_2030 ic1056_2111 Vmax_0914 Km0539_0307 ic0973_2111 Km1322_0079 Vmax_0259 Km0654_0326 Vmax_0393 Keq_0152 Km0434_0154 Km0456_0435 Km0841_0813 Km0390_0883 Vmax_0938 Km0550_0564 Keq_0770 Km1198_0658 Vmax_1063 Vmax_0032 Km0373_0108 Km0456_0433 Keq_0366 Km1445_0922 Km0180_0470 Keq_0399 Km0529_0433 Km0423_0148 ic1035_2111 Km1322_0908 Km1543_0005 Km1343_0901 Vmax_0330 Km0327_0915 Km0739_0800 Km0434_1729 Km0180_0118 Km0991_0663 Km0180_0538 Km1271_0216 Km0567_0888 Km0563_1166 Km0456_0234 Km1203_0445 Km0567_1084 Km0456_0661 Km1399_0961 Vmax_0108 Vmax_0961 Keq_0233 ep0595_2111 Keq_0939 Km0743_0361 Km1198_1010 Km1275_0317 Km0306_0502 Km0262_0231 Km1386_0820 Vmax_0549 Km0633_0915 Km1207_0041 Keq_0726 Vmax_0694 Km1399_0959 Km0232_0024 Km0980_0311 Km1322_0958 Keq_0762 ep0991_2111 Km0739_0528 Keq_0973 Keq_0391 Km0785_0525 Km0434_0148 Km0394_0534 Vmax_0097 Keq_0244 Km1322_1041 Km0146_0096 Keq_0225 Keq_0543 Km0162_0023 Km1207_0889 Km1377_0939 Km0162_0024 Vmax_0759 Km0423_0211 Km1207_0269 Km1322_2030 Km0328_0967 Km1277_1979 Keq_0559 Km1101_0108 ic1337_2111 Km0291_0699 Km0456_0821 Km0456_0398 Km0633_0208 Km0362_0312 Km0633_0726 Km0419_1115 Km0262_0317 Km0077_0909 Vmax_0992 Km1427_0887 ep1467_2111 Km1408_0982 Vmax_1052 Km0434_0514 Keq_0398 Km1212_0173 Km1275_0267 Keq_0978 Km0423_0514 Keq_0914 Km0581_1050 Km0529_0397 Km0644_0362 Km0297_0235 Keq_0529 Km0709_0004 ic1351_2111 ep1032_2111 Km0456_0889 Keq_0961 ep1025_2111 Km1616_0973 Vmax_0001 Keq_0993 Km1322_0219 Km0979_0816 Km1198_0486 Vmax_0476 Vmax_0445 Keq_0919 Km0394_0548 Vmax_0446 Km0126_0757 Keq_0886 ic0122_2111 Km0633_0202 Km1366_0919 Km1198_0536 Km1207_0669 Keq_0111 Km0210_0039 Keq_0538 Km1377_0938 Km1039_0309 Keq_0001 Keq_0917 Keq_0326 Km1212_0397 Km1322_0337 Vmax_0958 Km1056_1087 Km0529_0300 Km1198_0731 Km1234_0992 Km0434_0307 Km1543_0510 Km0764_1049 Vmax_0148 Km1545_1072 Km1207_0389 Km1048_0694 Vmax_0696 Vmax_0959 Keq_0280 Km0656_0364 Km0568_0888 Km1620_0883 Km1429_0997 Km1212_0661 Km0009_0061 Km1302_0993 ic1016_2111 Km0394_1704 Km0973_0215 Km0764_0450 Km0767_0495 Keq_0097 Km0298_0154 Km0380_0008 Keq_1051 ic0589_2111 Km1101_0387 Km0529_0559 Vmax_0399 Km0362_0173 Km1084_0340 Km1275_1011 Km0666_1014 Km1238_1041 Keq_0723 Km1576_0239 Keq_0908 Km1405_0968 Vmax_1172 Vmax_0502 Km1577_0240 Km1322_0250 Km0394_0739 Km1399_0958 Vmax_1697 Km0664_0242 Keq_0958 Km0403_0151 Km0629_0990 Keq_0355 Km1266_0816 Keq_0696 Km1029_0727 Km0019_0736 Km1039_0992 Km1212_0239 Vmax_0724 Km0991_0674 Km0522_0302 Keq_0938 Km0394_0962 Km0568_0467 Km0577_0984 Keq_0386 Vmax_0115 Km1377_0278 Keq_0243 Km0940_0280 Km1101_0391 Keq_0302 Keq_0528 Km1198_0988 Km1399_0004 Km0296_0236 Km1203_0988 Km1426_0990 Km0539_0736 Km1538_0195 Vmax_0349 Km0434_0226 Km0204_1063 Km0657_0242 Vmax_0337 Km1520_1051 Km0999_0563 Km0529_0992 Km0973_0216 Vmax_0355 Km1524_0336 Keq_0330 Km0019_0904 Km0165_0023 Km1191_0115 Km1194_0214 Km1203_0770 Km1203_0713 Keq_0154 Km1191_0759 Km0328_0968 Km1039_0917 Km0313_2030 Km1535_0439 Km0180_0471 Km0582_0529 Km0120_0446 Keq_0389 Keq_0982 Vmax_0238 Km1275_0241 Km1620_0976 Km0709_0439 Km1192_0115 Keq_0250 Vmax_0226 Keq_0594 Keq_1027 Km0077_0007 Km0434_0079 Km1620_0973 Vmax_0912 Km0991_0079 Km0445_0108 Vmax_0211 Km1198_0470 Keq_0542 Km1203_0536 Km0837_0339 Keq_2030 Km1212_0231 Vmax_0727 Km0306_0731 Vmax_1266 Km0595_0399 Km0456_0545 Km0633_0820 Km0940_0661 Vmax_0219 Km1255_0398 Vmax_0792 Km0722_0525 Keq_0661 Vmax_0820 Km1537_0770 Km0456_0566 Vmax_0758 Km1084_0919 Km1616_0883 Km0423_0152 Km0373_0543 Vmax_0537 Km0258_0918 Km0394_0855 Vmax_0816 Keq_0564 Km0291_0029 Keq_0462 Vmax_0855 Keq_1055 Km0587_1704 Vmax_0344 Km1322_0537 Km1576_0238 Keq_0446 Vmax_0918 Km0434_0330 ic0089_2111 Km1322_0855 Vmax_0433 Vmax_1979 Km1212_0393 Km1275_0239 Km1207_0015 Vmax_0039 Km0836_0542 Km1198_0961 Km1212_0344 Km0261_0997 Km1207_0957 ic0955_2111 Vmax_0973 Km0394_0330 Km1322_0446 Km1203_0470 Km0314_0968 Km1203_1010 Vmax_0340 Keq_0433 Vmax_0902 Vmax_0326 Km1416_0986 Vmax_0536 Km0619_0594 Km1413_0858 Km0158_0038 Km1366_0922 Keq_0992 Km1445_0340 Km1198_0061 ic0657_2111 Km0745_0462 Keq_1014 Keq_0476 Km1322_0739 Km1399_0016 Keq_0407 ep0002_2111 Km0373_0961 Km0394_0307 Km1035_0957 Vmax_1045 Keq_0667 Km0467_0792 Vmax_0661 Km0568_0195 Vmax_0352 Km1101_0397 Vmax_0279 Vmax_0514 Km1212_0558 Vmax_0957 Km1212_0387 Km1011_0537 Keq_0547 Km0120_0499 Keq_0008 Km0301_0079 Vmax_0215 Km0467_0736 Km1578_0234 Km0423_0032 Km0563_0534 Keq_0238 Km1559_1084 Vmax_0529 Km0991_0471 Vmax_0967 ep0918_2111 Km0574_0723 Km0785_0722 Km0516_0280 Keq_0300 Km1207_0661 Km1182_0818 Km0427_0202 Km1203_0565 Km0573_0722 Km1212_0678 Vmax_1244 Keq_0118 Vmax_0893 Km0654_1045 Km0849_0153 ep0999_2111 Km1207_0080 Km0373_0103 Km1322_0108 Keq_0387 Keq_0986 Km0209_0236 Km1101_0398 Keq_0032 Keq_1054 Keq_0393 Km1212_0989 Km0750_0483 Km1048_1055 Km0602_0399 Keq_0922 Km0120_0724 Km1203_0891 Km1207_0922

### Define constants
@parameters extracellular cell

### Define an operator for the differentiation w.r.t. time
D = Differential(t)

### Events ###

### Function definitions ###
max(x, y) = (x + y + abs(x - y)) / 2
@register max(x, y)

### Derivatives ###
eqs = [
D(s_0176) ~ -1.0 * (cell * Vmax_0018 * (s_0176 * s_0991 - s_0180 * s_0953 / Keq_0018) / (Km0176_0018 * Km0991_0018) / ((1 + s_0176 / Km0176_0018) * (1 + s_0991 / Km0991_0018) + (1 + s_0180 / Km0180_0018) * (1 + s_0953 / Km0953_0018) - 1))+1.0 * (cell * Vmax_0545 * (s_0836 * s_1198 - s_0176 * s_1203 * s_0456 / Keq_0545) / (Km0836_0545 * Km1198_0545) / ((1 + s_0836 / Km0836_0545) * (1 + s_1198 / Km1198_0545) + (1 + s_0176 / Km0176_0545) * (1 + s_1203 / Km1203_0545) * (1 + s_0456 / Km0456_0545) - 1)),
D(s_0557) ~ +1.0 * (cell * Vmax_0467 * (s_0568 - s_0557 / Keq_0467) / Km0568_0467 / (1 + s_0568 / Km0568_0467 + 1 + s_0557 / Km0557_0467 - 1))-1.0 * (cell * Vmax_0723 * (s_0557 - s_0574 / Keq_0723) / Km0557_0723 / (1 + s_0557 / Km0557_0723 + 1 + s_0574 / Km0574_0723 - 1))-1.0 * (cell * Vmax_0886 * (s_0434 * s_0557 - s_0394 * s_0555 / Keq_0886) / (Km0434_0886 * Km0557_0886) / ((1 + s_0434 / Km0434_0886) * (1 + s_0557 / Km0557_0886) + (1 + s_0394 / Km0394_0886) * (1 + s_0555 / Km0555_0886) - 1))+1.0 * (cell * Vmax_1050 * (s_0551 * s_0581 - s_0557 * s_0764 / Keq_1050) / (Km0551_1050 * Km0581_1050) / ((1 + s_0551 / Km0551_1050) * (1 + s_0581 / Km0581_1050) + (1 + s_0557 / Km0557_1050) * (1 + s_0764 / Km0764_1050) - 1)),
D(s_0467) ~ +1.0 * (cell * Vmax_0736 * (s_0028 * s_0539 - s_0019 * s_0467 / Keq_0736) / (Km0028_0736 * Km0539_0736) / ((1 + s_0028 / Km0028_0736) * (1 + s_0539 / Km0539_0736) + (1 + s_0019 / Km0019_0736) * (1 + s_0467 / Km0467_0736) - 1))-1.0 * (cell * Vmax_0792 * (s_0467 - s_0526 * s_1322 / Keq_0792) / Km0467_0792 / (1 + s_0467 / Km0467_0792 + (1 + s_0526 / Km0526_0792) * (1 + s_1322 / Km1322_0792) - 1))+1.0 * (cell * Vmax_0806 * (s_0539 - s_0467 * s_1322 / Keq_0806) / Km0539_0806 / (1 + s_0539 / Km0539_0806 + (1 + s_0467 / Km0467_0806) * (1 + s_1322 / Km1322_0806) - 1))-1.0 * (cell * Vmax_0976 * (s_0467 * s_1616 - s_0587 * s_1620 / Keq_0976) / (Km0467_0976 * Km1616_0976) / ((1 + s_0467 / Km0467_0976) * (1 + s_1616 / Km1616_0976) + (1 + s_0587 / Km0587_0976) * (1 + s_1620 / Km1620_0976) - 1)),
D(s_0089) ~ -1.0 * (cell * Vmax_0594 * (s_0089 * s_0499 - s_0619 * s_0918 / Keq_0594) / (Km0089_0594 * Km0499_0594) / ((1 + s_0089 / Km0089_0594) * (1 + s_0499 / Km0499_0594) + (1 + s_0619 / Km0619_0594) * (1 + s_0918 / Km0918_0594) - 1))+1.0 * (cell * Vmax_0874 * (s_0471 * s_1153 - s_0089 * s_0526 / Keq_0874) / (Km0471_0874 * Km1153_0874) / ((1 + s_0471 / Km0471_0874) * (1 + s_1153 / Km1153_0874) + (1 + s_0089 / Km0089_0874) * (1 + s_0526 / Km0526_0874) - 1))-0.00153 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_0581) ~ +1.0 * (cell * Vmax_0984 * (s_0577 - s_0581 / Keq_0984) / Km0577_0984 / (1 + s_0577 / Km0577_0984 + 1 + s_0581 / Km0581_0984 - 1))-1.0 * (cell * Vmax_1049 * (s_0581 * s_1408 - s_0764 * s_1427 / Keq_1049) / (Km0581_1049 * Km1408_1049) / ((1 + s_0581 / Km0581_1049) * (1 + s_1408 / Km1408_1049) + (1 + s_0764 / Km0764_1049) * (1 + s_1427 / Km1427_1049) - 1))-1.0 * (cell * Vmax_1050 * (s_0551 * s_0581 - s_0557 * s_0764 / Keq_1050) / (Km0551_1050 * Km0581_1050) / ((1 + s_0551 / Km0551_1050) * (1 + s_0581 / Km0581_1050) + (1 + s_0557 / Km0557_1050) * (1 + s_0764 / Km0764_1050) - 1)),
D(s_1207) ~ +1.0 * (cell * Vmax_0015 * (s_0141 * s_1212 - s_0142 * s_1207 / Keq_0015) / (Km0141_0015 * Km1212_0015) / ((1 + s_0141 / Km0141_0015) * (1 + s_1212 / Km1212_0015) + (1 + s_0142 / Km0142_0015) * (1 + s_1207 / Km1207_0015) - 1))+1.0 * (cell * Vmax_0041 * (s_0231 * s_1212 - s_1207 * s_1445 / Keq_0041) / (Km0231_0041 * Km1212_0041) / ((1 + s_0231 / Km0231_0041) * (1 + s_1212 / Km1212_0041) + (1 + s_1207 / Km1207_0041) * (1 + s_1445 / Km1445_0041) - 1))+1.0 * (cell * Vmax_0080 * (s_0306 * s_1212 - s_0322 * s_1207 / Keq_0080) / (Km0306_0080 * Km1212_0080) / ((1 + s_0306 / Km0306_0080) * (1 + s_1212 / Km1212_0080) + (1 + s_0322 / Km0322_0080) * (1 + s_1207 / Km1207_0080) - 1))+1.0 * (cell * Vmax_0096 * (s_0146 * s_1212 - s_0016 * s_1207 / Keq_0096) / (Km0146_0096 * Km1212_0096) / ((1 + s_0146 / Km0146_0096) * (1 + s_1212 / Km1212_0096) + (1 + s_0016 / Km0016_0096) * (1 + s_1207 / Km1207_0096) - 1))-1.0 * (cell * Vmax_0173 * (s_0359 * s_1207 - s_0362 * s_1212 / Keq_0173) / (Km0359_0173 * Km1207_0173) / ((1 + s_0359 / Km0359_0173) * (1 + s_1207 / Km1207_0173) + (1 + s_0362 / Km0362_0173) * (1 + s_1212 / Km1212_0173) - 1))+1.0 * (cell * Vmax_0219 * (s_0295 * s_1212 - s_0978 * s_1207 * s_1322 / Keq_0219) / (Km0295_0219 * Km1212_0219) / ((1 + s_0295 / Km0295_0219) * (1 + s_1212 / Km1212_0219) + (1 + s_0978 / Km0978_0219) * (1 + s_1207 / Km1207_0219) * (1 + s_1322 / Km1322_0219) - 1))+1.0 * (cell * Vmax_0231 * (s_0262 * s_1212 - s_0122 * s_1207 / Keq_0231) / (Km0262_0231 * Km1212_0231) / ((1 + s_0262 / Km0262_0231) * (1 + s_1212 / Km1212_0231) + (1 + s_0122 / Km0122_0231) * (1 + s_1207 / Km1207_0231) - 1))+1.0 * (cell * Vmax_0233 * (s_0664 * s_1212 * s_1275 - s_0662 * s_1207 / Keq_0233) / (Km0664_0233 * Km1212_0233 * Km1275_0233) / ((1 + s_0664 / Km0664_0233) * (1 + s_1212 / Km1212_0233) * (1 + s_1275 / Km1275_0233) + (1 + s_0662 / Km0662_0233) * (1 + s_1207 / Km1207_0233) - 1))-1.0 * (cell * Vmax_0234 * (s_1207 * s_1578 - s_0456 * s_1212 * s_1579 / Keq_0234) / (Km1207_0234 * Km1578_0234) / ((1 + s_1207 / Km1207_0234) * (1 + s_1578 / Km1578_0234) + (1 + s_0456 / Km0456_0234) * (1 + s_1212 / Km1212_0234) * (1 + s_1579 / Km1579_0234) - 1))+1.0 * (cell * Vmax_0236 * (s_0209 * s_1212 - s_0296 * s_1207 / Keq_0236) / (Km0209_0236 * Km1212_0236) / ((1 + s_0209 / Km0209_0236) * (1 + s_1212 / Km1212_0236) + (1 + s_0296 / Km0296_0236) * (1 + s_1207 / Km1207_0236) - 1))+1.0 * (cell * Vmax_0237 * (s_1212 * s_1579 - s_1207 * s_1569 / Keq_0237) / (Km1212_0237 * Km1579_0237) / ((1 + s_1212 / Km1212_0237) * (1 + s_1579 / Km1579_0237) + (1 + s_1207 / Km1207_0237) * (1 + s_1569 / Km1569_0237) - 1))+1.0 * (cell * Vmax_0238 * (s_0296 * s_1212 * s_1275 - s_1207 * s_1576 / Keq_0238) / (Km0296_0238 * Km1212_0238 * Km1275_0238) / ((1 + s_0296 / Km0296_0238) * (1 + s_1212 / Km1212_0238) * (1 + s_1275 / Km1275_0238) + (1 + s_1207 / Km1207_0238) * (1 + s_1576 / Km1576_0238) - 1))+1.0 * (cell * Vmax_0239 * (s_1212 * s_1275 * s_1576 - s_1207 * s_1577 / Keq_0239) / (Km1212_0239 * Km1275_0239 * Km1576_0239) / ((1 + s_1212 / Km1212_0239) * (1 + s_1275 / Km1275_0239) * (1 + s_1576 / Km1576_0239) + (1 + s_1207 / Km1207_0239) * (1 + s_1577 / Km1577_0239) - 1))+1.0 * (cell * Vmax_0240 * (s_1212 * s_1275 * s_1577 - s_1207 * s_1578 / Keq_0240) / (Km1212_0240 * Km1275_0240 * Km1577_0240) / ((1 + s_1212 / Km1212_0240) * (1 + s_1275 / Km1275_0240) * (1 + s_1577 / Km1577_0240) + (1 + s_1207 / Km1207_0240) * (1 + s_1578 / Km1578_0240) - 1))+3.0 * (cell * Vmax_0241 * (s_0122 * (s_1212)^(3) * (s_1275)^(3) - s_0297 * (s_1207)^(3) / Keq_0241) / (Km0122_0241 * (Km1212_0241)^(3) * (Km1275_0241)^(3)) / ((1 + s_0122 / Km0122_0241) * (1 + s_1212 / Km1212_0241)^(3) * (1 + s_1275 / Km1275_0241)^(3) + (1 + s_0297 / Km0297_0241) * (1 + s_1207 / Km1207_0241)^(3) - 1))+1.0 * (cell * Vmax_0242 * (s_0657 * s_1212 * s_1275 - s_0664 * s_1207 / Keq_0242) / (Km0657_0242 * Km1212_0242 * Km1275_0242) / ((1 + s_0657 / Km0657_0242) * (1 + s_1212 / Km1212_0242) * (1 + s_1275 / Km1275_0242) + (1 + s_0664 / Km0664_0242) * (1 + s_1207 / Km1207_0242) - 1))+1.0 * (cell * Vmax_0244 * (s_0662 * s_1212 - s_0666 * s_1207 / Keq_0244) / (Km0662_0244 * Km1212_0244) / ((1 + s_0662 / Km0662_0244) * (1 + s_1212 / Km1212_0244) + (1 + s_0666 / Km0666_0244) * (1 + s_1207 / Km1207_0244) - 1))+1.0 * (cell * Vmax_0259 * (s_0475 * s_1212 * s_1275 - s_0481 * s_1207 / Keq_0259) / (Km0475_0259 * Km1212_0259 * Km1275_0259) / ((1 + s_0475 / Km0475_0259) * (1 + s_1212 / Km1212_0259) * (1 + s_1275 / Km1275_0259) + (1 + s_0481 / Km0481_0259) * (1 + s_1207 / Km1207_0259) - 1))+1.0 * (cell * Vmax_0267 * (s_0481 * s_1212 * s_1275 - s_0493 * s_1207 / Keq_0267) / (Km0481_0267 * Km1212_0267 * Km1275_0267) / ((1 + s_0481 / Km0481_0267) * (1 + s_1212 / Km1212_0267) * (1 + s_1275 / Km1275_0267) + (1 + s_0493 / Km0493_0267) * (1 + s_1207 / Km1207_0267) - 1))+1.0 * (cell * Vmax_0269 * (s_0493 * s_1212 * s_1275 - s_0499 * s_1207 / Keq_0269) / (Km0493_0269 * Km1212_0269 * Km1275_0269) / ((1 + s_0493 / Km0493_0269) * (1 + s_1212 / Km1212_0269) * (1 + s_1275 / Km1275_0269) + (1 + s_0499 / Km0499_0269) * (1 + s_1207 / Km1207_0269) - 1))+3.0 * (cell * Vmax_0317 * (s_1059 * (s_1212)^(3) * (s_1275)^(3) - s_0262 * s_0722 * (s_1207)^(3) / Keq_0317) / (Km1059_0317 * (Km1212_0317)^(3) * (Km1275_0317)^(3)) / ((1 + s_1059 / Km1059_0317) * (1 + s_1212 / Km1212_0317)^(3) * (1 + s_1275 / Km1275_0317)^(3) + (1 + s_0262 / Km0262_0317) * (1 + s_0722 / Km0722_0317) * (1 + s_1207 / Km1207_0317)^(3) - 1))+1.0 * (cell * Vmax_0344 * (s_0625 * s_1212 - s_1207 * s_1487 / Keq_0344) / (Km0625_0344 * Km1212_0344) / ((1 + s_0625 / Km0625_0344) * (1 + s_1212 / Km1212_0344) + (1 + s_1207 / Km1207_0344) * (1 + s_1487 / Km1487_0344) - 1))+2.0 * (cell * Vmax_0386 * (s_0595 * s_1101 * (s_1212)^(2) - s_0456 * s_0529 * s_1065 * (s_1207)^(2) / Keq_0386) / (Km0595_0386 * Km1101_0386 * (Km1212_0386)^(2)) / ((1 + s_0595 / Km0595_0386) * (1 + s_1101 / Km1101_0386) * (1 + s_1212 / Km1212_0386)^(2) + (1 + s_0456 / Km0456_0386) * (1 + s_0529 / Km0529_0386) * (1 + s_1065 / Km1065_0386) * (1 + s_1207 / Km1207_0386)^(2) - 1))+2.0 * (cell * Vmax_0387 * (s_1065 * s_1101 * (s_1212)^(2) - s_0456 * s_0529 * s_1161 * (s_1207)^(2) / Keq_0387) / (Km1065_0387 * Km1101_0387 * (Km1212_0387)^(2)) / ((1 + s_1065 / Km1065_0387) * (1 + s_1101 / Km1101_0387) * (1 + s_1212 / Km1212_0387)^(2) + (1 + s_0456 / Km0456_0387) * (1 + s_0529 / Km0529_0387) * (1 + s_1161 / Km1161_0387) * (1 + s_1207 / Km1207_0387)^(2) - 1))+2.0 * (cell * Vmax_0389 * (s_1101 * s_1161 * (s_1212)^(2) - s_0456 * s_0529 * (s_1207)^(2) * s_1286 / Keq_0389) / (Km1101_0389 * Km1161_0389 * (Km1212_0389)^(2)) / ((1 + s_1101 / Km1101_0389) * (1 + s_1161 / Km1161_0389) * (1 + s_1212 / Km1212_0389)^(2) + (1 + s_0456 / Km0456_0389) * (1 + s_0529 / Km0529_0389) * (1 + s_1207 / Km1207_0389)^(2) * (1 + s_1286 / Km1286_0389) - 1))+2.0 * (cell * Vmax_0391 * (s_1101 * (s_1212)^(2) * s_1286 - s_0456 * s_0529 * (s_1207)^(2) * s_1449 / Keq_0391) / (Km1101_0391 * (Km1212_0391)^(2) * Km1286_0391) / ((1 + s_1101 / Km1101_0391) * (1 + s_1212 / Km1212_0391)^(2) * (1 + s_1286 / Km1286_0391) + (1 + s_0456 / Km0456_0391) * (1 + s_0529 / Km0529_0391) * (1 + s_1207 / Km1207_0391)^(2) * (1 + s_1449 / Km1449_0391) - 1))+6.0 * (cell * Vmax_0393 * ((s_1101)^(3) * (s_1212)^(6) * s_1449 - (s_0456)^(3) * (s_0529)^(3) * s_1084 * (s_1207)^(6) / Keq_0393) / ((Km1101_0393)^(3) * (Km1212_0393)^(6) * Km1449_0393) / ((1 + s_1101 / Km1101_0393)^(3) * (1 + s_1212 / Km1212_0393)^(6) * (1 + s_1449 / Km1449_0393) + (1 + s_0456 / Km0456_0393)^(3) * (1 + s_0529 / Km0529_0393)^(3) * (1 + s_1084 / Km1084_0393) * (1 + s_1207 / Km1207_0393)^(6) - 1))+2.0 * (cell * Vmax_0397 * (s_1101 * (s_1212)^(2) * s_1255 - s_0456 * s_0529 * s_0602 * (s_1207)^(2) / Keq_0397) / (Km1101_0397 * (Km1212_0397)^(2) * Km1255_0397) / ((1 + s_1101 / Km1101_0397) * (1 + s_1212 / Km1212_0397)^(2) * (1 + s_1255 / Km1255_0397) + (1 + s_0456 / Km0456_0397) * (1 + s_0529 / Km0529_0397) * (1 + s_0602 / Km0602_0397) * (1 + s_1207 / Km1207_0397)^(2) - 1))+6.0 * (cell * Vmax_0398 * (s_0373 * (s_1101)^(3) * (s_1212)^(6) - (s_0456)^(3) * (s_0529)^(3) * (s_1207)^(6) * s_1255 / Keq_0398) / (Km0373_0398 * (Km1101_0398)^(3) * (Km1212_0398)^(6)) / ((1 + s_0373 / Km0373_0398) * (1 + s_1101 / Km1101_0398)^(3) * (1 + s_1212 / Km1212_0398)^(6) + (1 + s_0456 / Km0456_0398)^(3) * (1 + s_0529 / Km0529_0398)^(3) * (1 + s_1207 / Km1207_0398)^(6) * (1 + s_1255 / Km1255_0398) - 1))+2.0 * (cell * Vmax_0432 * (s_0602 * s_1101 * (s_1212)^(2) - s_0456 * s_0529 * s_1073 * (s_1207)^(2) / Keq_0432) / (Km0602_0432 * Km1101_0432 * (Km1212_0432)^(2)) / ((1 + s_0602 / Km0602_0432) * (1 + s_1101 / Km1101_0432) * (1 + s_1212 / Km1212_0432)^(2) + (1 + s_0456 / Km0456_0432) * (1 + s_0529 / Km0529_0432) * (1 + s_1073 / Km1073_0432) * (1 + s_1207 / Km1207_0432)^(2) - 1))+2.0 * (cell * Vmax_0433 * (s_1073 * s_1101 * (s_1212)^(2) - s_0456 * s_0529 * s_1176 * (s_1207)^(2) / Keq_0433) / (Km1073_0433 * Km1101_0433 * (Km1212_0433)^(2)) / ((1 + s_1073 / Km1073_0433) * (1 + s_1101 / Km1101_0433) * (1 + s_1212 / Km1212_0433)^(2) + (1 + s_0456 / Km0456_0433) * (1 + s_0529 / Km0529_0433) * (1 + s_1176 / Km1176_0433) * (1 + s_1207 / Km1207_0433)^(2) - 1))+2.0 * (cell * Vmax_0434 * (s_1101 * s_1176 * (s_1212)^(2) - s_0456 * s_0529 * (s_1207)^(2) * s_1302 / Keq_0434) / (Km1101_0434 * Km1176_0434 * (Km1212_0434)^(2)) / ((1 + s_1101 / Km1101_0434) * (1 + s_1176 / Km1176_0434) * (1 + s_1212 / Km1212_0434)^(2) + (1 + s_0456 / Km0456_0434) * (1 + s_0529 / Km0529_0434) * (1 + s_1207 / Km1207_0434)^(2) * (1 + s_1302 / Km1302_0434) - 1))+2.0 * (cell * Vmax_0435 * (s_1101 * (s_1212)^(2) * s_1302 - s_0456 * s_0529 * (s_1207)^(2) * s_1454 / Keq_0435) / (Km1101_0435 * (Km1212_0435)^(2) * Km1302_0435) / ((1 + s_1101 / Km1101_0435) * (1 + s_1212 / Km1212_0435)^(2) * (1 + s_1302 / Km1302_0435) + (1 + s_0456 / Km0456_0435) * (1 + s_0529 / Km0529_0435) * (1 + s_1207 / Km1207_0435)^(2) * (1 + s_1454 / Km1454_0435) - 1))-1.0 * (cell * Vmax_0466 * (s_0568 * s_1207 - s_0335 * s_1212 / Keq_0466) / (Km0568_0466 * Km1207_0466) / ((1 + s_0568 / Km0568_0466) * (1 + s_1207 / Km1207_0466) + (1 + s_0335 / Km0335_0466) * (1 + s_1212 / Km1212_0466) - 1))+1.0 * (cell * Vmax_0471 * (s_0180 * s_0419 * s_1212 - s_0991 * s_1207 / Keq_0471) / (Km0180_0471 * Km0419_0471 * Km1212_0471) / ((1 + s_0180 / Km0180_0471) * (1 + s_0419 / Km0419_0471) * (1 + s_1212 / Km1212_0471) + (1 + s_0991 / Km0991_0471) * (1 + s_1207 / Km1207_0471) - 1))+1.0 * (cell * Vmax_0481 * (s_0754 * s_1212 - (s_0750)^(2) * s_1207 / Keq_0481) / (Km0754_0481 * Km1212_0481) / ((1 + s_0754 / Km0754_0481) * (1 + s_1212 / Km1212_0481) + (1 + s_0750 / Km0750_0481)^(2) * (1 + s_1207 / Km1207_0481) - 1))+1.0 * (cell * Vmax_0547 * (s_0978 * s_1212 - s_1014 * s_1207 / Keq_0547) / (Km0978_0547 * Km1212_0547) / ((1 + s_0978 / Km0978_0547) * (1 + s_1212 / Km1212_0547) + (1 + s_1014 / Km1014_0547) * (1 + s_1207 / Km1207_0547) - 1))+2.0 * (cell * Vmax_0558 * (s_0218 * (s_1212)^(2) - s_0028 * s_0529 * (s_1207)^(2) / Keq_0558) / (Km0218_0558 * (Km1212_0558)^(2)) / ((1 + s_0218 / Km0218_0558) * (1 + s_1212 / Km1212_0558)^(2) + (1 + s_0028 / Km0028_0558) * (1 + s_0529 / Km0529_0558) * (1 + s_1207 / Km1207_0558)^(2) - 1))-1.0 * (cell * Vmax_0661 * (s_0940 * s_1207 - s_0180 * s_0456 * s_1212 / Keq_0661) / (Km0940_0661 * Km1207_0661) / ((1 + s_0940 / Km0940_0661) * (1 + s_1207 / Km1207_0661) + (1 + s_0180 / Km0180_0661) * (1 + s_0456 / Km0456_0661) * (1 + s_1212 / Km1212_0661) - 1))+1.0 * (cell * Vmax_0669 * (s_0039 * s_1212 - s_0008 * s_1207 / Keq_0669) / (Km0039_0669 * Km1212_0669) / ((1 + s_0039 / Km0039_0669) * (1 + s_1212 / Km1212_0669) + (1 + s_0008 / Km0008_0669) * (1 + s_1207 / Km1207_0669) - 1))+1.0 * (cell * Vmax_0678 * (s_0953 * s_1212 - s_0959 * s_1207 / Keq_0678) / (Km0953_0678 * Km1212_0678) / ((1 + s_0953 / Km0953_0678) * (1 + s_1212 / Km1212_0678) + (1 + s_0959 / Km0959_0678) * (1 + s_1207 / Km1207_0678) - 1))+1.0 * (cell * Vmax_0688 * (s_1151 * s_1212 - s_0062 * s_1207 / Keq_0688) / (Km1151_0688 * Km1212_0688) / ((1 + s_1151 / Km1151_0688) * (1 + s_1212 / Km1212_0688) + (1 + s_0062 / Km0062_0688) * (1 + s_1207 / Km1207_0688) - 1))-1.0 * (cell * Vmax_0732 * (s_0306 * s_1207 - s_0304 * s_1212 / Keq_0732) / (Km0306_0732 * Km1207_0732) / ((1 + s_0306 / Km0306_0732) * (1 + s_1207 / Km1207_0732) + (1 + s_0304 / Km0304_0732) * (1 + s_1212 / Km1212_0732) - 1))+1.0 * (cell * Vmax_0759 * (s_1191 * s_1212 - s_0145 * s_1207 * s_1322 / Keq_0759) / (Km1191_0759 * Km1212_0759) / ((1 + s_1191 / Km1191_0759) * (1 + s_1212 / Km1212_0759) + (1 + s_0145 / Km0145_0759) * (1 + s_1207 / Km1207_0759) * (1 + s_1322 / Km1322_0759) - 1))-1.0 * (cell * Vmax_0889 * (s_0340 * s_1207 - s_0456 * s_0577 * s_1212 / Keq_0889) / (Km0340_0889 * Km1207_0889) / ((1 + s_0340 / Km0340_0889) * (1 + s_1207 / Km1207_0889) + (1 + s_0456 / Km0456_0889) * (1 + s_0577 / Km0577_0889) * (1 + s_1212 / Km1212_0889) - 1))+1.0 * (cell * Vmax_0922 * (s_1212 * s_1275 * s_1445 - s_1207 * s_1366 / Keq_0922) / (Km1212_0922 * Km1275_0922 * Km1445_0922) / ((1 + s_1212 / Km1212_0922) * (1 + s_1275 / Km1275_0922) * (1 + s_1445 / Km1445_0922) + (1 + s_1207 / Km1207_0922) * (1 + s_1366 / Km1366_0922) - 1))-1.0 * (cell * Vmax_0939 * (s_1207 * s_1377 - s_0204 * s_0456 * s_1212 / Keq_0939) / (Km1207_0939 * Km1377_0939) / ((1 + s_1207 / Km1207_0939) * (1 + s_1377 / Km1377_0939) + (1 + s_0204 / Km0204_0939) * (1 + s_0456 / Km0456_0939) * (1 + s_1212 / Km1212_0939) - 1))+1.0 * (cell * Vmax_0957 * (s_0118 * s_1212 - s_1035 * s_1207 / Keq_0957) / (Km0118_0957 * Km1212_0957) / ((1 + s_0118 / Km0118_0957) * (1 + s_1212 / Km1212_0957) + (1 + s_1035 / Km1035_0957) * (1 + s_1207 / Km1207_0957) - 1))+1.0 * (cell * Vmax_0989 * (s_0959 * s_0991 * s_1212 - s_1038 * s_1207 / Keq_0989) / (Km0959_0989 * Km0991_0989 * Km1212_0989) / ((1 + s_0959 / Km0959_0989) * (1 + s_0991 / Km0991_0989) * (1 + s_1212 / Km1212_0989) + (1 + s_1038 / Km1038_0989) * (1 + s_1207 / Km1207_0989) - 1))+1.0 * (cell * Vmax_0996 * (s_0211 * s_1212 - s_1207 * s_1429 / Keq_0996) / (Km0211_0996 * Km1212_0996) / ((1 + s_0211 / Km0211_0996) * (1 + s_1212 / Km1212_0996) + (1 + s_1207 / Km1207_0996) * (1 + s_1429 / Km1429_0996) - 1))+1.0 * (cell * Vmax_1011 * (s_1212 * s_1275 * s_1447 - s_0037 * s_1207 / Keq_1011) / (Km1212_1011 * Km1275_1011 * Km1447_1011) / ((1 + s_1212 / Km1212_1011) * (1 + s_1275 / Km1275_1011) * (1 + s_1447 / Km1447_1011) + (1 + s_0037 / Km0037_1011) * (1 + s_1207 / Km1207_1011) - 1))+1.0 * (cell * Vmax_1012 * ((s_0190)^(2) * s_1212 - (s_0633)^(2) * s_1207 * s_1447 / Keq_1012) / ((Km0190_1012)^(2) * Km1212_1012) / ((1 + s_0190 / Km0190_1012)^(2) * (1 + s_1212 / Km1212_1012) + (1 + s_0633 / Km0633_1012)^(2) * (1 + s_1207 / Km1207_1012) * (1 + s_1447 / Km1447_1012) - 1))+3.0 * (cell * Vmax_1027 * ((s_1212)^(3) * s_1469 - s_0841 * (s_1207)^(3) / Keq_1027) / ((Km1212_1027)^(3) * Km1469_1027) / ((1 + s_1212 / Km1212_1027)^(3) * (1 + s_1469 / Km1469_1027) + (1 + s_0841 / Km0841_1027) * (1 + s_1207 / Km1207_1027)^(3) - 1))+1.0 * (cell * Vmax_1038 * (s_1212 * s_1620 - s_1207 * s_1616 / Keq_1038) / (Km1212_1038 * Km1620_1038) / ((1 + s_1212 / Km1212_1038) * (1 + s_1620 / Km1620_1038) + (1 + s_1207 / Km1207_1038) * (1 + s_1616 / Km1616_1038) - 1)),
D(s_0657) ~ -1.0 * (cell * Vmax_0242 * (s_0657 * s_1212 * s_1275 - s_0664 * s_1207 / Keq_0242) / (Km0657_0242 * Km1212_0242 * Km1275_0242) / ((1 + s_0657 / Km0657_0242) * (1 + s_1212 / Km1212_0242) * (1 + s_1275 / Km1275_0242) + (1 + s_0664 / Km0664_0242) * (1 + s_1207 / Km1207_0242) - 1))+1.0 * (cell * Vmax_0243 * (s_0700 - s_0657 / Keq_0243) / Km0700_0243 / (1 + s_0700 / Km0700_0243 + 1 + s_0657 / Km0657_0243 - 1))-9.6e-5 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_0979) ~ -1.0 * (cell * Vmax_0208 * (s_0434 * s_0973 * s_0979 - s_0015 * s_0423 * s_0633 / Keq_0208) / (Km0434_0208 * Km0973_0208 * Km0979_0208) / ((1 + s_0434 / Km0434_0208) * (1 + s_0973 / Km0973_0208) * (1 + s_0979 / Km0979_0208) + (1 + s_0015 / Km0015_0208) * (1 + s_0423 / Km0423_0208) * (1 + s_0633 / Km0633_0208) - 1))+1.0 * (cell * Vmax_0816 * (s_0455 * s_1266 - s_0979 * s_1322 / Keq_0816) / (Km0455_0816 * Km1266_0816) / ((1 + s_0455 / Km0455_0816) * (1 + s_1266 / Km1266_0816) + (1 + s_0979 / Km0979_0816) * (1 + s_1322 / Km1322_0816) - 1)),
D(s_0725) ~ +1.0 * (cell * Vmax_0151 * (s_0299 - s_0403 * s_0725 / Keq_0151) / Km0299_0151 / (1 + s_0299 / Km0299_0151 + (1 + s_0403 / Km0403_0151) * (1 + s_0725 / Km0725_0151) - 1))+1.0 * (cell * Vmax_0152 * (s_0393 - s_0423 * s_0725 / Keq_0152) / Km0393_0152 / (1 + s_0393 / Km0393_0152 + (1 + s_0423 / Km0423_0152) * (1 + s_0725 / Km0725_0152) - 1))+1.0 * (cell * Vmax_0207 * (s_0015 - s_0725 * s_0965 / Keq_0207) / Km0015_0207 / (1 + s_0015 / Km0015_0207 + (1 + s_0725 / Km0725_0207) * (1 + s_0965 / Km0965_0207) - 1))-1.0 * (cell * Vmax_0451 * (s_0725 - s_0066 / Keq_0451) / Km0725_0451 / (1 + s_0725 / Km0725_0451 + 1 + s_0066 / Km0066_0451 - 1)),
D(s_0709) ~ -2.0 * (cell * Vmax_0001 * (s_0025 * (s_0709)^(2) - (s_0710)^(2) * s_1399 / Keq_0001) / (Km0025_0001 * (Km0709_0001)^(2)) / ((1 + s_0025 / Km0025_0001) * (1 + s_0709 / Km0709_0001)^(2) + (1 + s_0710 / Km0710_0001)^(2) * (1 + s_1399 / Km1399_0001) - 1))-2.0 * (cell * Vmax_0004 * (s_0063 * (s_0709)^(2) - (s_0710)^(2) * s_1399 / Keq_0004) / (Km0063_0004 * (Km0709_0004)^(2)) / ((1 + s_0063 / Km0063_0004) * (1 + s_0709 / Km0709_0004)^(2) + (1 + s_0710 / Km0710_0004)^(2) * (1 + s_1399 / Km1399_0004) - 1))+4.0 * (cell * Vmax_0438 * ((s_0710)^(4) * s_1275 - (s_0709)^(4) / Keq_0438) / ((Km0710_0438)^(4) * Km1275_0438) / ((1 + s_0710 / Km0710_0438)^(4) * (1 + s_1275 / Km1275_0438) + (1 + s_0709 / Km0709_0438)^(4) - 1))-2.0 * (cell * Vmax_0439 * ((s_0709)^(2) * s_1535 - (s_0710)^(2) * s_1537 / Keq_0439) / ((Km0709_0439)^(2) * Km1535_0439) / ((1 + s_0709 / Km0709_0439)^(2) * (1 + s_1535 / Km1535_0439) + (1 + s_0710 / Km0710_0439)^(2) * (1 + s_1537 / Km1537_0439) - 1)),
D(s_0061) ~ -1.0 * (cell * Vmax_0339 * (s_0061 * s_1275 - s_0837 * s_1269 / Keq_0339) / (Km0061_0339 * Km1275_0339) / ((1 + s_0061 / Km0061_0339) * (1 + s_1275 / Km1275_0339) + (1 + s_0837 / Km0837_0339) * (1 + s_1269 / Km1269_0339) - 1))+1.0 * (cell * Vmax_0349 * (s_1194 - s_0061 / Keq_0349) / Km1194_0349 / (1 + s_1194 / Km1194_0349 + 1 + s_0061 / Km0061_0349 - 1)),
D(s_1426) ~ +1.0 * (cell * Vmax_0887 * (s_0434 * s_1427 - s_0394 * s_1426 / Keq_0887) / (Km0434_0887 * Km1427_0887) / ((1 + s_0434 / Km0434_0887) * (1 + s_1427 / Km1427_0887) + (1 + s_0394 / Km0394_0887) * (1 + s_1426 / Km1426_0887) - 1))-1.0 * (cell * Vmax_0990 * (s_1426 - s_0551 * s_0629 / Keq_0990) / Km1426_0990 / (1 + s_1426 / Km1426_0990 + (1 + s_0551 / Km0551_0990) * (1 + s_0629 / Km0629_0990) - 1)),
D(s_0403) ~ +1.0 * (cell * Vmax_0151 * (s_0299 - s_0403 * s_0725 / Keq_0151) / Km0299_0151 / (1 + s_0299 / Km0299_0151 + (1 + s_0403 / Km0403_0151) * (1 + s_0725 / Km0725_0151) - 1))+1.0 * (cell * Vmax_0563 * (s_0312 * s_0999 - s_0403 * s_0550 * s_0991 / Keq_0563) / (Km0312_0563 * Km0999_0563) / ((1 + s_0312 / Km0312_0563) * (1 + s_0999 / Km0999_0563) + (1 + s_0403 / Km0403_0563) * (1 + s_0550 / Km0550_0563) * (1 + s_0991 / Km0991_0563) - 1))-1.0 * (cell * Vmax_0912 * (s_0120 * s_0403 - s_1365 * s_1487 / Keq_0912) / (Km0120_0912 * Km0403_0912) / ((1 + s_0120 / Km0120_0912) * (1 + s_0403 / Km0403_0912) + (1 + s_1365 / Km1365_0912) * (1 + s_1487 / Km1487_0912) - 1)),
D(s_0082) ~ -1.0 * (cell * Vmax_0008 * (s_0082 * s_0380 - s_0529 * s_1331 / Keq_0008) / (Km0082_0008 * Km0380_0008) / ((1 + s_0082 / Km0082_0008) * (1 + s_0380 / Km0380_0008) + (1 + s_0529 / Km0529_0008) * (1 + s_1331 / Km1331_0008) - 1))+1.0 * (cell * Vmax_0495 * (s_0380 * s_0767 - s_0082 * s_0529 / Keq_0495) / (Km0380_0495 * Km0767_0495) / ((1 + s_0380 / Km0380_0495) * (1 + s_0767 / Km0767_0495) + (1 + s_0082 / Km0082_0495) * (1 + s_0529 / Km0529_0495) - 1)),
D(s_1576) ~ +1.0 * (cell * Vmax_0238 * (s_0296 * s_1212 * s_1275 - s_1207 * s_1576 / Keq_0238) / (Km0296_0238 * Km1212_0238 * Km1275_0238) / ((1 + s_0296 / Km0296_0238) * (1 + s_1212 / Km1212_0238) * (1 + s_1275 / Km1275_0238) + (1 + s_1207 / Km1207_0238) * (1 + s_1576 / Km1576_0238) - 1))-1.0 * (cell * Vmax_0239 * (s_1212 * s_1275 * s_1576 - s_1207 * s_1577 / Keq_0239) / (Km1212_0239 * Km1275_0239 * Km1576_0239) / ((1 + s_1212 / Km1212_0239) * (1 + s_1275 / Km1275_0239) * (1 + s_1576 / Km1576_0239) + (1 + s_1207 / Km1207_0239) * (1 + s_1577 / Km1577_0239) - 1)),
D(s_0680) ~ +1.0 * (cell * Vmax_0165 * (s_0359 * s_1203 - s_0680 * s_1198 / Keq_0165) / (Km0359_0165 * Km1203_0165) / ((1 + s_0359 / Km0359_0165) * (1 + s_1203 / Km1203_0165) + (1 + s_0680 / Km0680_0165) * (1 + s_1198 / Km1198_0165) - 1))-1.0 * (cell * Vmax_1762 * s_0680 / Km0680_1762 / (1 + s_0680 / Km0680_1762)),
D(s_1182) ~ +1.0 * (cell * Vmax_0118 * (s_0145 * s_0991 - s_0180 * s_1182 / Keq_0118) / (Km0145_0118 * Km0991_0118) / ((1 + s_0145 / Km0145_0118) * (1 + s_0991 / Km0991_0118) + (1 + s_0180 / Km0180_0118) * (1 + s_1182 / Km1182_0118) - 1))-1.0 * (cell * Vmax_0818 * (s_0991 * s_1182 - s_1192 * s_1266 / Keq_0818) / (Km0991_0818 * Km1182_0818) / ((1 + s_0991 / Km0991_0818) * (1 + s_1182 / Km1182_0818) + (1 + s_1192 / Km1192_0818) * (1 + s_1266 / Km1266_0818) - 1)),
D(s_0039) ~ +1.0 * (cell * Vmax_0016 * (s_0178 * s_1399 - s_0039 * s_0456 / Keq_0016) / (Km0178_0016 * Km1399_0016) / ((1 + s_0178 / Km0178_0016) * (1 + s_1399 / Km1399_0016) + (1 + s_0039 / Km0039_0016) * (1 + s_0456 / Km0456_0016) - 1))-1.0 * (cell * Vmax_0669 * (s_0039 * s_1212 - s_0008 * s_1207 / Keq_0669) / (Km0039_0669 * Km1212_0669) / ((1 + s_0039 / Km0039_0669) * (1 + s_1212 / Km1212_0669) + (1 + s_0008 / Km0008_0669) * (1 + s_1207 / Km1207_0669) - 1)),
D(s_0232) ~ -1.0 * (cell * Vmax_0024 * (s_0232 * s_0373 - s_0162 * s_0529 / Keq_0024) / (Km0232_0024 * Km0373_0024) / ((1 + s_0232 / Km0232_0024) * (1 + s_0373 / Km0373_0024) + (1 + s_0162 / Km0162_0024) * (1 + s_0529 / Km0529_0024) - 1))+1.0 * (cell * Vmax_0352 * (s_0016 - s_0232 / Keq_0352) / Km0016_0352 / (1 + s_0016 / Km0016_0352 + 1 + s_0232 / Km0232_0352 - 1))-1.0 * (cell * Vmax_1087 * (s_0232 * s_0991 - s_0180 * s_1056 / Keq_1087) / (Km0232_1087 * Km0991_1087) / ((1 + s_0232 / Km0232_1087) * (1 + s_0991 / Km0991_1087) + (1 + s_0180 / Km0180_1087) * (1 + s_1056 / Km1056_1087) - 1)),
D(s_0969) ~ +1.0 * (cell * Vmax_0211 * (s_0434 * s_0973 * s_0999 - s_0423 * s_0633 * s_0969 * s_0991 / Keq_0211) / (Km0434_0211 * Km0973_0211 * Km0999_0211) / ((1 + s_0434 / Km0434_0211) * (1 + s_0973 / Km0973_0211) * (1 + s_0999 / Km0999_0211) + (1 + s_0423 / Km0423_0211) * (1 + s_0633 / Km0633_0211) * (1 + s_0969 / Km0969_0211) * (1 + s_0991 / Km0991_0211) - 1))-0.172 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_0980) ~ +1.0 * (cell * Vmax_0309 * (s_1012 * s_1039 - s_0980 / Keq_0309) / (Km1012_0309 * Km1039_0309) / ((1 + s_1012 / Km1012_0309) * (1 + s_1039 / Km1039_0309) + 1 + s_0980 / Km0980_0309 - 1))-1.0 * (cell * Vmax_0310 * (s_0980 - s_0178 * s_0419 * s_0981 / Keq_0310) / Km0980_0310 / (1 + s_0980 / Km0980_0310 + (1 + s_0178 / Km0178_0310) * (1 + s_0419 / Km0419_0310) * (1 + s_0981 / Km0981_0310) - 1))+1.0 * (cell * Vmax_0311 * (s_0981 * s_1233 - s_0362 * s_0980 / Keq_0311) / (Km0981_0311 * Km1233_0311) / ((1 + s_0981 / Km0981_0311) * (1 + s_1233 / Km1233_0311) + (1 + s_0362 / Km0362_0311) * (1 + s_0980 / Km0980_0311) - 1)),
D(s_1578) ~ -1.0 * (cell * Vmax_0234 * (s_1207 * s_1578 - s_0456 * s_1212 * s_1579 / Keq_0234) / (Km1207_0234 * Km1578_0234) / ((1 + s_1207 / Km1207_0234) * (1 + s_1578 / Km1578_0234) + (1 + s_0456 / Km0456_0234) * (1 + s_1212 / Km1212_0234) * (1 + s_1579 / Km1579_0234) - 1))+1.0 * (cell * Vmax_0240 * (s_1212 * s_1275 * s_1577 - s_1207 * s_1578 / Keq_0240) / (Km1212_0240 * Km1275_0240 * Km1577_0240) / ((1 + s_1212 / Km1212_0240) * (1 + s_1275 / Km1275_0240) * (1 + s_1577 / Km1577_0240) + (1 + s_1207 / Km1207_0240) * (1 + s_1578 / Km1578_0240) - 1)),
D(s_1487) ~ +1.0 * (cell * Vmax_0344 * (s_0625 * s_1212 - s_1207 * s_1487 / Keq_0344) / (Km0625_0344 * Km1212_0344) / ((1 + s_0625 / Km0625_0344) * (1 + s_1212 / Km1212_0344) + (1 + s_1207 / Km1207_0344) * (1 + s_1487 / Km1487_0344) - 1))+1.0 * (cell * Vmax_0446 * (s_0120 * s_0394 * s_1322 - s_0434 * s_0722 * s_1487 / Keq_0446) / (Km0120_0446 * Km0394_0446 * Km1322_0446) / ((1 + s_0120 / Km0120_0446) * (1 + s_0394 / Km0394_0446) * (1 + s_1322 / Km1322_0446) + (1 + s_0434 / Km0434_0446) * (1 + s_0722 / Km0722_0446) * (1 + s_1487 / Km1487_0446) - 1))+1.0 * (cell * Vmax_0499 * (s_0120 * s_0325 - s_0301 * s_1487 / Keq_0499) / (Km0120_0499 * Km0325_0499) / ((1 + s_0120 / Km0120_0499) * (1 + s_0325 / Km0325_0499) + (1 + s_0301 / Km0301_0499) * (1 + s_1487 / Km1487_0499) - 1))-1.0 * (cell * Vmax_0502 * (s_1039 * s_1487 - s_0306 * s_1003 / Keq_0502) / (Km1039_0502 * Km1487_0502) / ((1 + s_1039 / Km1039_0502) * (1 + s_1487 / Km1487_0502) + (1 + s_0306 / Km0306_0502) * (1 + s_1003 / Km1003_0502) - 1))+1.0 * (cell * Vmax_0727 * (s_0322 * s_1012 - s_1029 * s_1487 / Keq_0727) / (Km0322_0727 * Km1012_0727) / ((1 + s_0322 / Km0322_0727) * (1 + s_1012 / Km1012_0727) + (1 + s_1029 / Km1029_0727) * (1 + s_1487 / Km1487_0727) - 1))+1.0 * (cell * Vmax_0912 * (s_0120 * s_0403 - s_1365 * s_1487 / Keq_0912) / (Km0120_0912 * Km0403_0912) / ((1 + s_0120 / Km0120_0912) * (1 + s_0403 / Km0403_0912) + (1 + s_1365 / Km1365_0912) * (1 + s_1487 / Km1487_0912) - 1)),
D(s_0259) ~ -1.0 * (cell * Vmax_0917 * (s_0259 - s_1039 * s_1322 / Keq_0917) / Km0259_0917 / (1 + s_0259 / Km0259_0917 + (1 + s_1039 / Km1039_0917) * (1 + s_1322 / Km1322_0917) - 1))+1.0 * (cell * Vmax_0918 * (s_0258 * s_0991 - s_0180 * s_0259 / Keq_0918) / (Km0258_0918 * Km0991_0918) / ((1 + s_0258 / Km0258_0918) * (1 + s_0991 / Km0991_0918) + (1 + s_0180 / Km0180_0918) * (1 + s_0259 / Km0259_0918) - 1)),
D(s_0475) ~ -1.0 * (cell * Vmax_0259 * (s_0475 * s_1212 * s_1275 - s_0481 * s_1207 / Keq_0259) / (Km0475_0259 * Km1212_0259 * Km1275_0259) / ((1 + s_0475 / Km0475_0259) * (1 + s_1212 / Km1212_0259) * (1 + s_1275 / Km1275_0259) + (1 + s_0481 / Km0481_0259) * (1 + s_1207 / Km1207_0259) - 1))+1.0 * (cell * Vmax_0340 * (s_1084 * s_1445 - s_0475 / Keq_0340) / (Km1084_0340 * Km1445_0340) / ((1 + s_1084 / Km1084_0340) * (1 + s_1445 / Km1445_0340) + 1 + s_0475 / Km0475_0340 - 1)),
D(s_1520) ~ +1.0 * (cell * Vmax_1051 * (s_0409 - s_1322 * s_1520 / Keq_1051) / Km0409_1051 / (1 + s_0409 / Km0409_1051 + (1 + s_1322 / Km1322_1051) * (1 + s_1520 / Km1520_1051) - 1))-1.0 * (cell * Vmax_2079 * s_1520 / Km1520_2079 / (1 + s_1520 / Km1520_2079))-0.0234 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_1010) ~ -1.0 * (cell * Vmax_0536 * (s_1010 * (s_1198)^(2) - s_1006 * (s_1203)^(2) / Keq_0536) / (Km1010_0536 * (Km1198_0536)^(2)) / ((1 + s_1010 / Km1010_0536) * (1 + s_1198 / Km1198_0536)^(2) + (1 + s_1006 / Km1006_0536) * (1 + s_1203 / Km1203_0536)^(2) - 1))+1.0 * (cell * Vmax_0537 * (s_1011 - s_1010 * s_1322 / Keq_0537) / Km1011_0537 / (1 + s_1011 / Km1011_0537 + (1 + s_1010 / Km1010_0537) * (1 + s_1322 / Km1322_0537) - 1)),
D(s_1161) ~ +1.0 * (cell * Vmax_0387 * (s_1065 * s_1101 * (s_1212)^(2) - s_0456 * s_0529 * s_1161 * (s_1207)^(2) / Keq_0387) / (Km1065_0387 * Km1101_0387 * (Km1212_0387)^(2)) / ((1 + s_1065 / Km1065_0387) * (1 + s_1101 / Km1101_0387) * (1 + s_1212 / Km1212_0387)^(2) + (1 + s_0456 / Km0456_0387) * (1 + s_0529 / Km0529_0387) * (1 + s_1161 / Km1161_0387) * (1 + s_1207 / Km1207_0387)^(2) - 1))-1.0 * (cell * Vmax_0389 * (s_1101 * s_1161 * (s_1212)^(2) - s_0456 * s_0529 * (s_1207)^(2) * s_1286 / Keq_0389) / (Km1101_0389 * Km1161_0389 * (Km1212_0389)^(2)) / ((1 + s_1101 / Km1101_0389) * (1 + s_1161 / Km1161_0389) * (1 + s_1212 / Km1212_0389)^(2) + (1 + s_0456 / Km0456_0389) * (1 + s_0529 / Km0529_0389) * (1 + s_1207 / Km1207_0389)^(2) * (1 + s_1286 / Km1286_0389) - 1)),
D(s_0656) ~ -1.0 * (cell * Vmax_0364 * (s_0656 - s_0633 * s_0654 / Keq_0364) / Km0656_0364 / (1 + s_0656 / Km0656_0364 + (1 + s_0633 / Km0633_0364) * (1 + s_0654 / Km0654_0364) - 1))+1.0 * (cell * Vmax_0973 * (s_1559 * s_1616 - s_0656 * s_1620 / Keq_0973) / (Km1559_0973 * Km1616_0973) / ((1 + s_1559 / Km1559_0973) * (1 + s_1616 / Km1616_0973) + (1 + s_0656 / Km0656_0973) * (1 + s_1620 / Km1620_0973) - 1)),
D(s_1212) ~ -1.0 * (cell * Vmax_0015 * (s_0141 * s_1212 - s_0142 * s_1207 / Keq_0015) / (Km0141_0015 * Km1212_0015) / ((1 + s_0141 / Km0141_0015) * (1 + s_1212 / Km1212_0015) + (1 + s_0142 / Km0142_0015) * (1 + s_1207 / Km1207_0015) - 1))-1.0 * (cell * Vmax_0041 * (s_0231 * s_1212 - s_1207 * s_1445 / Keq_0041) / (Km0231_0041 * Km1212_0041) / ((1 + s_0231 / Km0231_0041) * (1 + s_1212 / Km1212_0041) + (1 + s_1207 / Km1207_0041) * (1 + s_1445 / Km1445_0041) - 1))-1.0 * (cell * Vmax_0080 * (s_0306 * s_1212 - s_0322 * s_1207 / Keq_0080) / (Km0306_0080 * Km1212_0080) / ((1 + s_0306 / Km0306_0080) * (1 + s_1212 / Km1212_0080) + (1 + s_0322 / Km0322_0080) * (1 + s_1207 / Km1207_0080) - 1))-1.0 * (cell * Vmax_0096 * (s_0146 * s_1212 - s_0016 * s_1207 / Keq_0096) / (Km0146_0096 * Km1212_0096) / ((1 + s_0146 / Km0146_0096) * (1 + s_1212 / Km1212_0096) + (1 + s_0016 / Km0016_0096) * (1 + s_1207 / Km1207_0096) - 1))+1.0 * (cell * Vmax_0173 * (s_0359 * s_1207 - s_0362 * s_1212 / Keq_0173) / (Km0359_0173 * Km1207_0173) / ((1 + s_0359 / Km0359_0173) * (1 + s_1207 / Km1207_0173) + (1 + s_0362 / Km0362_0173) * (1 + s_1212 / Km1212_0173) - 1))-1.0 * (cell * Vmax_0219 * (s_0295 * s_1212 - s_0978 * s_1207 * s_1322 / Keq_0219) / (Km0295_0219 * Km1212_0219) / ((1 + s_0295 / Km0295_0219) * (1 + s_1212 / Km1212_0219) + (1 + s_0978 / Km0978_0219) * (1 + s_1207 / Km1207_0219) * (1 + s_1322 / Km1322_0219) - 1))-1.0 * (cell * Vmax_0231 * (s_0262 * s_1212 - s_0122 * s_1207 / Keq_0231) / (Km0262_0231 * Km1212_0231) / ((1 + s_0262 / Km0262_0231) * (1 + s_1212 / Km1212_0231) + (1 + s_0122 / Km0122_0231) * (1 + s_1207 / Km1207_0231) - 1))-1.0 * (cell * Vmax_0233 * (s_0664 * s_1212 * s_1275 - s_0662 * s_1207 / Keq_0233) / (Km0664_0233 * Km1212_0233 * Km1275_0233) / ((1 + s_0664 / Km0664_0233) * (1 + s_1212 / Km1212_0233) * (1 + s_1275 / Km1275_0233) + (1 + s_0662 / Km0662_0233) * (1 + s_1207 / Km1207_0233) - 1))+1.0 * (cell * Vmax_0234 * (s_1207 * s_1578 - s_0456 * s_1212 * s_1579 / Keq_0234) / (Km1207_0234 * Km1578_0234) / ((1 + s_1207 / Km1207_0234) * (1 + s_1578 / Km1578_0234) + (1 + s_0456 / Km0456_0234) * (1 + s_1212 / Km1212_0234) * (1 + s_1579 / Km1579_0234) - 1))-1.0 * (cell * Vmax_0236 * (s_0209 * s_1212 - s_0296 * s_1207 / Keq_0236) / (Km0209_0236 * Km1212_0236) / ((1 + s_0209 / Km0209_0236) * (1 + s_1212 / Km1212_0236) + (1 + s_0296 / Km0296_0236) * (1 + s_1207 / Km1207_0236) - 1))-1.0 * (cell * Vmax_0237 * (s_1212 * s_1579 - s_1207 * s_1569 / Keq_0237) / (Km1212_0237 * Km1579_0237) / ((1 + s_1212 / Km1212_0237) * (1 + s_1579 / Km1579_0237) + (1 + s_1207 / Km1207_0237) * (1 + s_1569 / Km1569_0237) - 1))-1.0 * (cell * Vmax_0238 * (s_0296 * s_1212 * s_1275 - s_1207 * s_1576 / Keq_0238) / (Km0296_0238 * Km1212_0238 * Km1275_0238) / ((1 + s_0296 / Km0296_0238) * (1 + s_1212 / Km1212_0238) * (1 + s_1275 / Km1275_0238) + (1 + s_1207 / Km1207_0238) * (1 + s_1576 / Km1576_0238) - 1))-1.0 * (cell * Vmax_0239 * (s_1212 * s_1275 * s_1576 - s_1207 * s_1577 / Keq_0239) / (Km1212_0239 * Km1275_0239 * Km1576_0239) / ((1 + s_1212 / Km1212_0239) * (1 + s_1275 / Km1275_0239) * (1 + s_1576 / Km1576_0239) + (1 + s_1207 / Km1207_0239) * (1 + s_1577 / Km1577_0239) - 1))-1.0 * (cell * Vmax_0240 * (s_1212 * s_1275 * s_1577 - s_1207 * s_1578 / Keq_0240) / (Km1212_0240 * Km1275_0240 * Km1577_0240) / ((1 + s_1212 / Km1212_0240) * (1 + s_1275 / Km1275_0240) * (1 + s_1577 / Km1577_0240) + (1 + s_1207 / Km1207_0240) * (1 + s_1578 / Km1578_0240) - 1))-3.0 * (cell * Vmax_0241 * (s_0122 * (s_1212)^(3) * (s_1275)^(3) - s_0297 * (s_1207)^(3) / Keq_0241) / (Km0122_0241 * (Km1212_0241)^(3) * (Km1275_0241)^(3)) / ((1 + s_0122 / Km0122_0241) * (1 + s_1212 / Km1212_0241)^(3) * (1 + s_1275 / Km1275_0241)^(3) + (1 + s_0297 / Km0297_0241) * (1 + s_1207 / Km1207_0241)^(3) - 1))-1.0 * (cell * Vmax_0242 * (s_0657 * s_1212 * s_1275 - s_0664 * s_1207 / Keq_0242) / (Km0657_0242 * Km1212_0242 * Km1275_0242) / ((1 + s_0657 / Km0657_0242) * (1 + s_1212 / Km1212_0242) * (1 + s_1275 / Km1275_0242) + (1 + s_0664 / Km0664_0242) * (1 + s_1207 / Km1207_0242) - 1))-1.0 * (cell * Vmax_0244 * (s_0662 * s_1212 - s_0666 * s_1207 / Keq_0244) / (Km0662_0244 * Km1212_0244) / ((1 + s_0662 / Km0662_0244) * (1 + s_1212 / Km1212_0244) + (1 + s_0666 / Km0666_0244) * (1 + s_1207 / Km1207_0244) - 1))-1.0 * (cell * Vmax_0259 * (s_0475 * s_1212 * s_1275 - s_0481 * s_1207 / Keq_0259) / (Km0475_0259 * Km1212_0259 * Km1275_0259) / ((1 + s_0475 / Km0475_0259) * (1 + s_1212 / Km1212_0259) * (1 + s_1275 / Km1275_0259) + (1 + s_0481 / Km0481_0259) * (1 + s_1207 / Km1207_0259) - 1))-1.0 * (cell * Vmax_0267 * (s_0481 * s_1212 * s_1275 - s_0493 * s_1207 / Keq_0267) / (Km0481_0267 * Km1212_0267 * Km1275_0267) / ((1 + s_0481 / Km0481_0267) * (1 + s_1212 / Km1212_0267) * (1 + s_1275 / Km1275_0267) + (1 + s_0493 / Km0493_0267) * (1 + s_1207 / Km1207_0267) - 1))-1.0 * (cell * Vmax_0269 * (s_0493 * s_1212 * s_1275 - s_0499 * s_1207 / Keq_0269) / (Km0493_0269 * Km1212_0269 * Km1275_0269) / ((1 + s_0493 / Km0493_0269) * (1 + s_1212 / Km1212_0269) * (1 + s_1275 / Km1275_0269) + (1 + s_0499 / Km0499_0269) * (1 + s_1207 / Km1207_0269) - 1))-3.0 * (cell * Vmax_0317 * (s_1059 * (s_1212)^(3) * (s_1275)^(3) - s_0262 * s_0722 * (s_1207)^(3) / Keq_0317) / (Km1059_0317 * (Km1212_0317)^(3) * (Km1275_0317)^(3)) / ((1 + s_1059 / Km1059_0317) * (1 + s_1212 / Km1212_0317)^(3) * (1 + s_1275 / Km1275_0317)^(3) + (1 + s_0262 / Km0262_0317) * (1 + s_0722 / Km0722_0317) * (1 + s_1207 / Km1207_0317)^(3) - 1))-1.0 * (cell * Vmax_0344 * (s_0625 * s_1212 - s_1207 * s_1487 / Keq_0344) / (Km0625_0344 * Km1212_0344) / ((1 + s_0625 / Km0625_0344) * (1 + s_1212 / Km1212_0344) + (1 + s_1207 / Km1207_0344) * (1 + s_1487 / Km1487_0344) - 1))-2.0 * (cell * Vmax_0386 * (s_0595 * s_1101 * (s_1212)^(2) - s_0456 * s_0529 * s_1065 * (s_1207)^(2) / Keq_0386) / (Km0595_0386 * Km1101_0386 * (Km1212_0386)^(2)) / ((1 + s_0595 / Km0595_0386) * (1 + s_1101 / Km1101_0386) * (1 + s_1212 / Km1212_0386)^(2) + (1 + s_0456 / Km0456_0386) * (1 + s_0529 / Km0529_0386) * (1 + s_1065 / Km1065_0386) * (1 + s_1207 / Km1207_0386)^(2) - 1))-2.0 * (cell * Vmax_0387 * (s_1065 * s_1101 * (s_1212)^(2) - s_0456 * s_0529 * s_1161 * (s_1207)^(2) / Keq_0387) / (Km1065_0387 * Km1101_0387 * (Km1212_0387)^(2)) / ((1 + s_1065 / Km1065_0387) * (1 + s_1101 / Km1101_0387) * (1 + s_1212 / Km1212_0387)^(2) + (1 + s_0456 / Km0456_0387) * (1 + s_0529 / Km0529_0387) * (1 + s_1161 / Km1161_0387) * (1 + s_1207 / Km1207_0387)^(2) - 1))-2.0 * (cell * Vmax_0389 * (s_1101 * s_1161 * (s_1212)^(2) - s_0456 * s_0529 * (s_1207)^(2) * s_1286 / Keq_0389) / (Km1101_0389 * Km1161_0389 * (Km1212_0389)^(2)) / ((1 + s_1101 / Km1101_0389) * (1 + s_1161 / Km1161_0389) * (1 + s_1212 / Km1212_0389)^(2) + (1 + s_0456 / Km0456_0389) * (1 + s_0529 / Km0529_0389) * (1 + s_1207 / Km1207_0389)^(2) * (1 + s_1286 / Km1286_0389) - 1))-2.0 * (cell * Vmax_0391 * (s_1101 * (s_1212)^(2) * s_1286 - s_0456 * s_0529 * (s_1207)^(2) * s_1449 / Keq_0391) / (Km1101_0391 * (Km1212_0391)^(2) * Km1286_0391) / ((1 + s_1101 / Km1101_0391) * (1 + s_1212 / Km1212_0391)^(2) * (1 + s_1286 / Km1286_0391) + (1 + s_0456 / Km0456_0391) * (1 + s_0529 / Km0529_0391) * (1 + s_1207 / Km1207_0391)^(2) * (1 + s_1449 / Km1449_0391) - 1))-6.0 * (cell * Vmax_0393 * ((s_1101)^(3) * (s_1212)^(6) * s_1449 - (s_0456)^(3) * (s_0529)^(3) * s_1084 * (s_1207)^(6) / Keq_0393) / ((Km1101_0393)^(3) * (Km1212_0393)^(6) * Km1449_0393) / ((1 + s_1101 / Km1101_0393)^(3) * (1 + s_1212 / Km1212_0393)^(6) * (1 + s_1449 / Km1449_0393) + (1 + s_0456 / Km0456_0393)^(3) * (1 + s_0529 / Km0529_0393)^(3) * (1 + s_1084 / Km1084_0393) * (1 + s_1207 / Km1207_0393)^(6) - 1))-2.0 * (cell * Vmax_0397 * (s_1101 * (s_1212)^(2) * s_1255 - s_0456 * s_0529 * s_0602 * (s_1207)^(2) / Keq_0397) / (Km1101_0397 * (Km1212_0397)^(2) * Km1255_0397) / ((1 + s_1101 / Km1101_0397) * (1 + s_1212 / Km1212_0397)^(2) * (1 + s_1255 / Km1255_0397) + (1 + s_0456 / Km0456_0397) * (1 + s_0529 / Km0529_0397) * (1 + s_0602 / Km0602_0397) * (1 + s_1207 / Km1207_0397)^(2) - 1))-6.0 * (cell * Vmax_0398 * (s_0373 * (s_1101)^(3) * (s_1212)^(6) - (s_0456)^(3) * (s_0529)^(3) * (s_1207)^(6) * s_1255 / Keq_0398) / (Km0373_0398 * (Km1101_0398)^(3) * (Km1212_0398)^(6)) / ((1 + s_0373 / Km0373_0398) * (1 + s_1101 / Km1101_0398)^(3) * (1 + s_1212 / Km1212_0398)^(6) + (1 + s_0456 / Km0456_0398)^(3) * (1 + s_0529 / Km0529_0398)^(3) * (1 + s_1207 / Km1207_0398)^(6) * (1 + s_1255 / Km1255_0398) - 1))-2.0 * (cell * Vmax_0432 * (s_0602 * s_1101 * (s_1212)^(2) - s_0456 * s_0529 * s_1073 * (s_1207)^(2) / Keq_0432) / (Km0602_0432 * Km1101_0432 * (Km1212_0432)^(2)) / ((1 + s_0602 / Km0602_0432) * (1 + s_1101 / Km1101_0432) * (1 + s_1212 / Km1212_0432)^(2) + (1 + s_0456 / Km0456_0432) * (1 + s_0529 / Km0529_0432) * (1 + s_1073 / Km1073_0432) * (1 + s_1207 / Km1207_0432)^(2) - 1))-2.0 * (cell * Vmax_0433 * (s_1073 * s_1101 * (s_1212)^(2) - s_0456 * s_0529 * s_1176 * (s_1207)^(2) / Keq_0433) / (Km1073_0433 * Km1101_0433 * (Km1212_0433)^(2)) / ((1 + s_1073 / Km1073_0433) * (1 + s_1101 / Km1101_0433) * (1 + s_1212 / Km1212_0433)^(2) + (1 + s_0456 / Km0456_0433) * (1 + s_0529 / Km0529_0433) * (1 + s_1176 / Km1176_0433) * (1 + s_1207 / Km1207_0433)^(2) - 1))-2.0 * (cell * Vmax_0434 * (s_1101 * s_1176 * (s_1212)^(2) - s_0456 * s_0529 * (s_1207)^(2) * s_1302 / Keq_0434) / (Km1101_0434 * Km1176_0434 * (Km1212_0434)^(2)) / ((1 + s_1101 / Km1101_0434) * (1 + s_1176 / Km1176_0434) * (1 + s_1212 / Km1212_0434)^(2) + (1 + s_0456 / Km0456_0434) * (1 + s_0529 / Km0529_0434) * (1 + s_1207 / Km1207_0434)^(2) * (1 + s_1302 / Km1302_0434) - 1))-2.0 * (cell * Vmax_0435 * (s_1101 * (s_1212)^(2) * s_1302 - s_0456 * s_0529 * (s_1207)^(2) * s_1454 / Keq_0435) / (Km1101_0435 * (Km1212_0435)^(2) * Km1302_0435) / ((1 + s_1101 / Km1101_0435) * (1 + s_1212 / Km1212_0435)^(2) * (1 + s_1302 / Km1302_0435) + (1 + s_0456 / Km0456_0435) * (1 + s_0529 / Km0529_0435) * (1 + s_1207 / Km1207_0435)^(2) * (1 + s_1454 / Km1454_0435) - 1))+1.0 * (cell * Vmax_0466 * (s_0568 * s_1207 - s_0335 * s_1212 / Keq_0466) / (Km0568_0466 * Km1207_0466) / ((1 + s_0568 / Km0568_0466) * (1 + s_1207 / Km1207_0466) + (1 + s_0335 / Km0335_0466) * (1 + s_1212 / Km1212_0466) - 1))-1.0 * (cell * Vmax_0471 * (s_0180 * s_0419 * s_1212 - s_0991 * s_1207 / Keq_0471) / (Km0180_0471 * Km0419_0471 * Km1212_0471) / ((1 + s_0180 / Km0180_0471) * (1 + s_0419 / Km0419_0471) * (1 + s_1212 / Km1212_0471) + (1 + s_0991 / Km0991_0471) * (1 + s_1207 / Km1207_0471) - 1))-1.0 * (cell * Vmax_0481 * (s_0754 * s_1212 - (s_0750)^(2) * s_1207 / Keq_0481) / (Km0754_0481 * Km1212_0481) / ((1 + s_0754 / Km0754_0481) * (1 + s_1212 / Km1212_0481) + (1 + s_0750 / Km0750_0481)^(2) * (1 + s_1207 / Km1207_0481) - 1))-1.0 * (cell * Vmax_0547 * (s_0978 * s_1212 - s_1014 * s_1207 / Keq_0547) / (Km0978_0547 * Km1212_0547) / ((1 + s_0978 / Km0978_0547) * (1 + s_1212 / Km1212_0547) + (1 + s_1014 / Km1014_0547) * (1 + s_1207 / Km1207_0547) - 1))-2.0 * (cell * Vmax_0558 * (s_0218 * (s_1212)^(2) - s_0028 * s_0529 * (s_1207)^(2) / Keq_0558) / (Km0218_0558 * (Km1212_0558)^(2)) / ((1 + s_0218 / Km0218_0558) * (1 + s_1212 / Km1212_0558)^(2) + (1 + s_0028 / Km0028_0558) * (1 + s_0529 / Km0529_0558) * (1 + s_1207 / Km1207_0558)^(2) - 1))+1.0 * (cell * Vmax_0661 * (s_0940 * s_1207 - s_0180 * s_0456 * s_1212 / Keq_0661) / (Km0940_0661 * Km1207_0661) / ((1 + s_0940 / Km0940_0661) * (1 + s_1207 / Km1207_0661) + (1 + s_0180 / Km0180_0661) * (1 + s_0456 / Km0456_0661) * (1 + s_1212 / Km1212_0661) - 1))-1.0 * (cell * Vmax_0669 * (s_0039 * s_1212 - s_0008 * s_1207 / Keq_0669) / (Km0039_0669 * Km1212_0669) / ((1 + s_0039 / Km0039_0669) * (1 + s_1212 / Km1212_0669) + (1 + s_0008 / Km0008_0669) * (1 + s_1207 / Km1207_0669) - 1))-1.0 * (cell * Vmax_0678 * (s_0953 * s_1212 - s_0959 * s_1207 / Keq_0678) / (Km0953_0678 * Km1212_0678) / ((1 + s_0953 / Km0953_0678) * (1 + s_1212 / Km1212_0678) + (1 + s_0959 / Km0959_0678) * (1 + s_1207 / Km1207_0678) - 1))-1.0 * (cell * Vmax_0688 * (s_1151 * s_1212 - s_0062 * s_1207 / Keq_0688) / (Km1151_0688 * Km1212_0688) / ((1 + s_1151 / Km1151_0688) * (1 + s_1212 / Km1212_0688) + (1 + s_0062 / Km0062_0688) * (1 + s_1207 / Km1207_0688) - 1))+1.0 * (cell * Vmax_0732 * (s_0306 * s_1207 - s_0304 * s_1212 / Keq_0732) / (Km0306_0732 * Km1207_0732) / ((1 + s_0306 / Km0306_0732) * (1 + s_1207 / Km1207_0732) + (1 + s_0304 / Km0304_0732) * (1 + s_1212 / Km1212_0732) - 1))-1.0 * (cell * Vmax_0759 * (s_1191 * s_1212 - s_0145 * s_1207 * s_1322 / Keq_0759) / (Km1191_0759 * Km1212_0759) / ((1 + s_1191 / Km1191_0759) * (1 + s_1212 / Km1212_0759) + (1 + s_0145 / Km0145_0759) * (1 + s_1207 / Km1207_0759) * (1 + s_1322 / Km1322_0759) - 1))+1.0 * (cell * Vmax_0889 * (s_0340 * s_1207 - s_0456 * s_0577 * s_1212 / Keq_0889) / (Km0340_0889 * Km1207_0889) / ((1 + s_0340 / Km0340_0889) * (1 + s_1207 / Km1207_0889) + (1 + s_0456 / Km0456_0889) * (1 + s_0577 / Km0577_0889) * (1 + s_1212 / Km1212_0889) - 1))-1.0 * (cell * Vmax_0922 * (s_1212 * s_1275 * s_1445 - s_1207 * s_1366 / Keq_0922) / (Km1212_0922 * Km1275_0922 * Km1445_0922) / ((1 + s_1212 / Km1212_0922) * (1 + s_1275 / Km1275_0922) * (1 + s_1445 / Km1445_0922) + (1 + s_1207 / Km1207_0922) * (1 + s_1366 / Km1366_0922) - 1))+1.0 * (cell * Vmax_0939 * (s_1207 * s_1377 - s_0204 * s_0456 * s_1212 / Keq_0939) / (Km1207_0939 * Km1377_0939) / ((1 + s_1207 / Km1207_0939) * (1 + s_1377 / Km1377_0939) + (1 + s_0204 / Km0204_0939) * (1 + s_0456 / Km0456_0939) * (1 + s_1212 / Km1212_0939) - 1))-1.0 * (cell * Vmax_0957 * (s_0118 * s_1212 - s_1035 * s_1207 / Keq_0957) / (Km0118_0957 * Km1212_0957) / ((1 + s_0118 / Km0118_0957) * (1 + s_1212 / Km1212_0957) + (1 + s_1035 / Km1035_0957) * (1 + s_1207 / Km1207_0957) - 1))-1.0 * (cell * Vmax_0989 * (s_0959 * s_0991 * s_1212 - s_1038 * s_1207 / Keq_0989) / (Km0959_0989 * Km0991_0989 * Km1212_0989) / ((1 + s_0959 / Km0959_0989) * (1 + s_0991 / Km0991_0989) * (1 + s_1212 / Km1212_0989) + (1 + s_1038 / Km1038_0989) * (1 + s_1207 / Km1207_0989) - 1))-1.0 * (cell * Vmax_0996 * (s_0211 * s_1212 - s_1207 * s_1429 / Keq_0996) / (Km0211_0996 * Km1212_0996) / ((1 + s_0211 / Km0211_0996) * (1 + s_1212 / Km1212_0996) + (1 + s_1207 / Km1207_0996) * (1 + s_1429 / Km1429_0996) - 1))-1.0 * (cell * Vmax_1011 * (s_1212 * s_1275 * s_1447 - s_0037 * s_1207 / Keq_1011) / (Km1212_1011 * Km1275_1011 * Km1447_1011) / ((1 + s_1212 / Km1212_1011) * (1 + s_1275 / Km1275_1011) * (1 + s_1447 / Km1447_1011) + (1 + s_0037 / Km0037_1011) * (1 + s_1207 / Km1207_1011) - 1))-1.0 * (cell * Vmax_1012 * ((s_0190)^(2) * s_1212 - (s_0633)^(2) * s_1207 * s_1447 / Keq_1012) / ((Km0190_1012)^(2) * Km1212_1012) / ((1 + s_0190 / Km0190_1012)^(2) * (1 + s_1212 / Km1212_1012) + (1 + s_0633 / Km0633_1012)^(2) * (1 + s_1207 / Km1207_1012) * (1 + s_1447 / Km1447_1012) - 1))-3.0 * (cell * Vmax_1027 * ((s_1212)^(3) * s_1469 - s_0841 * (s_1207)^(3) / Keq_1027) / ((Km1212_1027)^(3) * Km1469_1027) / ((1 + s_1212 / Km1212_1027)^(3) * (1 + s_1469 / Km1469_1027) + (1 + s_0841 / Km0841_1027) * (1 + s_1207 / Km1207_1027)^(3) - 1))-1.0 * (cell * Vmax_1038 * (s_1212 * s_1620 - s_1207 * s_1616 / Keq_1038) / (Km1212_1038 * Km1620_1038) / ((1 + s_1212 / Km1212_1038) * (1 + s_1620 / Km1620_1038) + (1 + s_1207 / Km1207_1038) * (1 + s_1616 / Km1616_1038) - 1)),
D(s_0373) ~ -1.0 * (cell * Vmax_0024 * (s_0232 * s_0373 - s_0162 * s_0529 / Keq_0024) / (Km0232_0024 * Km0373_0024) / ((1 + s_0232 / Km0232_0024) * (1 + s_0373 / Km0373_0024) + (1 + s_0162 / Km0162_0024) * (1 + s_0529 / Km0529_0024) - 1))-2.0 * (cell * Vmax_0103 * ((s_0373)^(2) - s_0367 * s_0529 / Keq_0103) / (Km0373_0103)^(2) / ((1 + s_0373 / Km0373_0103)^(2) + (1 + s_0367 / Km0367_0103) * (1 + s_0529 / Km0529_0103) - 1))-1.0 * (cell * Vmax_0108 * (s_0373 * s_0434 * s_0445 - s_0394 * s_1101 * s_1322 / Keq_0108) / (Km0373_0108 * Km0434_0108 * Km0445_0108) / ((1 + s_0373 / Km0373_0108) * (1 + s_0434 / Km0434_0108) * (1 + s_0445 / Km0445_0108) + (1 + s_0394 / Km0394_0108) * (1 + s_1101 / Km1101_0108) * (1 + s_1322 / Km1322_0108) - 1))-1.0 * (cell * Vmax_0111 * (s_0373 - s_0362 * s_0529 / Keq_0111) / Km0373_0111 / (1 + s_0373 / Km0373_0111 + (1 + s_0362 / Km0362_0111) * (1 + s_0529 / Km0529_0111) - 1))-1.0 * (cell * Vmax_0300 * (s_0373 * s_1271 - s_0522 * s_0529 / Keq_0300) / (Km0373_0300 * Km1271_0300) / ((1 + s_0373 / Km0373_0300) * (1 + s_1271 / Km1271_0300) + (1 + s_0522 / Km0522_0300) * (1 + s_0529 / Km0529_0300) - 1))-1.0 * (cell * Vmax_0398 * (s_0373 * (s_1101)^(3) * (s_1212)^(6) - (s_0456)^(3) * (s_0529)^(3) * (s_1207)^(6) * s_1255 / Keq_0398) / (Km0373_0398 * (Km1101_0398)^(3) * (Km1212_0398)^(6)) / ((1 + s_0373 / Km0373_0398) * (1 + s_1101 / Km1101_0398)^(3) * (1 + s_1212 / Km1212_0398)^(6) + (1 + s_0456 / Km0456_0398)^(3) * (1 + s_0529 / Km0529_0398)^(3) * (1 + s_1207 / Km1207_0398)^(6) * (1 + s_1255 / Km1255_0398) - 1))-1.0 * (cell * Vmax_0543 * (s_0180 * s_0373 - s_0529 * s_0835 / Keq_0543) / (Km0180_0543 * Km0373_0543) / ((1 + s_0180 / Km0180_0543) * (1 + s_0373 / Km0373_0543) + (1 + s_0529 / Km0529_0543) * (1 + s_0835 / Km0835_0543) - 1))-1.0 * (cell * Vmax_0549 * (s_0373 * s_1014 - s_0529 * s_1233 / Keq_0549) / (Km0373_0549 * Km1014_0549) / ((1 + s_0373 / Km0373_0549) * (1 + s_1014 / Km1014_0549) + (1 + s_0529 / Km0529_0549) * (1 + s_1233 / Km1233_0549) - 1))-1.0 * (cell * Vmax_0559 * (s_0367 * s_0373 - s_0218 * s_0529 / Keq_0559) / (Km0367_0559 * Km0373_0559) / ((1 + s_0367 / Km0367_0559) * (1 + s_0373 / Km0373_0559) + (1 + s_0218 / Km0218_0559) * (1 + s_0529 / Km0529_0559) - 1))+1.0 * (cell * Vmax_0961 * (s_0529 * s_1198 * s_1399 - s_0373 * s_0456 * s_1203 / Keq_0961) / (Km0529_0961 * Km1198_0961 * Km1399_0961) / ((1 + s_0529 / Km0529_0961) * (1 + s_1198 / Km1198_0961) * (1 + s_1399 / Km1399_0961) + (1 + s_0373 / Km0373_0961) * (1 + s_0456 / Km0456_0961) * (1 + s_1203 / Km1203_0961) - 1))-1.0 * (cell * Vmax_0992 * (s_0373 * s_1039 - s_0529 * s_1234 / Keq_0992) / (Km0373_0992 * Km1039_0992) / ((1 + s_0373 / Km0373_0992) * (1 + s_1039 / Km1039_0992) + (1 + s_0529 / Km0529_0992) * (1 + s_1234 / Km1234_0992) - 1)),
D(s_0551) ~ -1.0 * (cell * Vmax_0020 * (s_0551 * s_1360 - s_0349 * s_1322 / Keq_0020) / (Km0551_0020 * Km1360_0020) / ((1 + s_0551 / Km0551_0020) * (1 + s_1360 / Km1360_0020) + (1 + s_0349 / Km0349_0020) * (1 + s_1322 / Km1322_0020) - 1))+1.0 * (cell * Vmax_0990 * (s_1426 - s_0551 * s_0629 / Keq_0990) / Km1426_0990 / (1 + s_1426 / Km1426_0990 + (1 + s_0551 / Km0551_0990) * (1 + s_0629 / Km0629_0990) - 1))-1.0 * (cell * Vmax_1050 * (s_0551 * s_0581 - s_0557 * s_0764 / Keq_1050) / (Km0551_1050 * Km0581_1050) / ((1 + s_0551 / Km0551_1050) * (1 + s_0581 / Km0581_1050) + (1 + s_0557 / Km0557_1050) * (1 + s_0764 / Km0764_1050) - 1)),
D(s_0118) ~ +1.0 * (cell * Vmax_0012 * (s_0991 * s_1203 - s_0118 * s_1198 / Keq_0012) / (Km0991_0012 * Km1203_0012) / ((1 + s_0991 / Km0991_0012) * (1 + s_1203 / Km1203_0012) + (1 + s_0118 / Km0118_0012) * (1 + s_1198 / Km1198_0012) - 1))-1.0 * (cell * Vmax_0957 * (s_0118 * s_1212 - s_1035 * s_1207 / Keq_0957) / (Km0118_0957 * Km1212_0957) / ((1 + s_0118 / Km0118_0957) * (1 + s_1212 / Km1212_0957) + (1 + s_1035 / Km1035_0957) * (1 + s_1207 / Km1207_0957) - 1)),
D(s_1537) ~ +1.0 * (cell * Vmax_0439 * ((s_0709)^(2) * s_1535 - (s_0710)^(2) * s_1537 / Keq_0439) / ((Km0709_0439)^(2) * Km1535_0439) / ((1 + s_0709 / Km0709_0439)^(2) * (1 + s_1535 / Km1535_0439) + (1 + s_0710 / Km0710_0439)^(2) * (1 + s_1537 / Km1537_0439) - 1))-1.0 * (cell * Vmax_0770 * (s_1203 * s_1537 - s_1198 * s_1535 / Keq_0770) / (Km1203_0770 * Km1537_0770) / ((1 + s_1203 / Km1203_0770) * (1 + s_1537 / Km1537_0770) + (1 + s_1198 / Km1198_0770) * (1 + s_1535 / Km1535_0770) - 1)),
D(s_0056) ~ +1.0 * (cell * Vmax_0353 * (s_0008 - s_0056 / Keq_0353) / Km0008_0353 / (1 + s_0008 / Km0008_0353 + 1 + s_0056 / Km0056_0353 - 1))-1.0 * (cell * Vmax_0663 * (s_0056 * s_0991 - s_0180 * s_1016 / Keq_0663) / (Km0056_0663 * Km0991_0663) / ((1 + s_0056 / Km0056_0663) * (1 + s_0991 / Km0991_0663) + (1 + s_0180 / Km0180_0663) * (1 + s_1016 / Km1016_0663) - 1)),
D(s_1275) ~ -1.0 * (cell * Vmax_0233 * (s_0664 * s_1212 * s_1275 - s_0662 * s_1207 / Keq_0233) / (Km0664_0233 * Km1212_0233 * Km1275_0233) / ((1 + s_0664 / Km0664_0233) * (1 + s_1212 / Km1212_0233) * (1 + s_1275 / Km1275_0233) + (1 + s_0662 / Km0662_0233) * (1 + s_1207 / Km1207_0233) - 1))-1.0 * (cell * Vmax_0238 * (s_0296 * s_1212 * s_1275 - s_1207 * s_1576 / Keq_0238) / (Km0296_0238 * Km1212_0238 * Km1275_0238) / ((1 + s_0296 / Km0296_0238) * (1 + s_1212 / Km1212_0238) * (1 + s_1275 / Km1275_0238) + (1 + s_1207 / Km1207_0238) * (1 + s_1576 / Km1576_0238) - 1))-1.0 * (cell * Vmax_0239 * (s_1212 * s_1275 * s_1576 - s_1207 * s_1577 / Keq_0239) / (Km1212_0239 * Km1275_0239 * Km1576_0239) / ((1 + s_1212 / Km1212_0239) * (1 + s_1275 / Km1275_0239) * (1 + s_1576 / Km1576_0239) + (1 + s_1207 / Km1207_0239) * (1 + s_1577 / Km1577_0239) - 1))-1.0 * (cell * Vmax_0240 * (s_1212 * s_1275 * s_1577 - s_1207 * s_1578 / Keq_0240) / (Km1212_0240 * Km1275_0240 * Km1577_0240) / ((1 + s_1212 / Km1212_0240) * (1 + s_1275 / Km1275_0240) * (1 + s_1577 / Km1577_0240) + (1 + s_1207 / Km1207_0240) * (1 + s_1578 / Km1578_0240) - 1))-3.0 * (cell * Vmax_0241 * (s_0122 * (s_1212)^(3) * (s_1275)^(3) - s_0297 * (s_1207)^(3) / Keq_0241) / (Km0122_0241 * (Km1212_0241)^(3) * (Km1275_0241)^(3)) / ((1 + s_0122 / Km0122_0241) * (1 + s_1212 / Km1212_0241)^(3) * (1 + s_1275 / Km1275_0241)^(3) + (1 + s_0297 / Km0297_0241) * (1 + s_1207 / Km1207_0241)^(3) - 1))-1.0 * (cell * Vmax_0242 * (s_0657 * s_1212 * s_1275 - s_0664 * s_1207 / Keq_0242) / (Km0657_0242 * Km1212_0242 * Km1275_0242) / ((1 + s_0657 / Km0657_0242) * (1 + s_1212 / Km1212_0242) * (1 + s_1275 / Km1275_0242) + (1 + s_0664 / Km0664_0242) * (1 + s_1207 / Km1207_0242) - 1))-1.0 * (cell * Vmax_0259 * (s_0475 * s_1212 * s_1275 - s_0481 * s_1207 / Keq_0259) / (Km0475_0259 * Km1212_0259 * Km1275_0259) / ((1 + s_0475 / Km0475_0259) * (1 + s_1212 / Km1212_0259) * (1 + s_1275 / Km1275_0259) + (1 + s_0481 / Km0481_0259) * (1 + s_1207 / Km1207_0259) - 1))-1.0 * (cell * Vmax_0267 * (s_0481 * s_1212 * s_1275 - s_0493 * s_1207 / Keq_0267) / (Km0481_0267 * Km1212_0267 * Km1275_0267) / ((1 + s_0481 / Km0481_0267) * (1 + s_1212 / Km1212_0267) * (1 + s_1275 / Km1275_0267) + (1 + s_0493 / Km0493_0267) * (1 + s_1207 / Km1207_0267) - 1))-1.0 * (cell * Vmax_0269 * (s_0493 * s_1212 * s_1275 - s_0499 * s_1207 / Keq_0269) / (Km0493_0269 * Km1212_0269 * Km1275_0269) / ((1 + s_0493 / Km0493_0269) * (1 + s_1212 / Km1212_0269) * (1 + s_1275 / Km1275_0269) + (1 + s_0499 / Km0499_0269) * (1 + s_1207 / Km1207_0269) - 1))-3.0 * (cell * Vmax_0317 * (s_1059 * (s_1212)^(3) * (s_1275)^(3) - s_0262 * s_0722 * (s_1207)^(3) / Keq_0317) / (Km1059_0317 * (Km1212_0317)^(3) * (Km1275_0317)^(3)) / ((1 + s_1059 / Km1059_0317) * (1 + s_1212 / Km1212_0317)^(3) * (1 + s_1275 / Km1275_0317)^(3) + (1 + s_0262 / Km0262_0317) * (1 + s_0722 / Km0722_0317) * (1 + s_1207 / Km1207_0317)^(3) - 1))-1.0 * (cell * Vmax_0339 * (s_0061 * s_1275 - s_0837 * s_1269 / Keq_0339) / (Km0061_0339 * Km1275_0339) / ((1 + s_0061 / Km0061_0339) * (1 + s_1275 / Km1275_0339) + (1 + s_0837 / Km0837_0339) * (1 + s_1269 / Km1269_0339) - 1))-1.0 * (cell * Vmax_0438 * ((s_0710)^(4) * s_1275 - (s_0709)^(4) / Keq_0438) / ((Km0710_0438)^(4) * Km1275_0438) / ((1 + s_0710 / Km0710_0438)^(4) * (1 + s_1275 / Km1275_0438) + (1 + s_0709 / Km0709_0438)^(4) - 1))-1.0 * (cell * Vmax_0694 * (s_1048 * s_1275 - s_1195 / Keq_0694) / (Km1048_0694 * Km1275_0694) / ((1 + s_1048 / Km1048_0694) * (1 + s_1275 / Km1275_0694) + 1 + s_1195 / Km1195_0694 - 1))-1.0 * (cell * Vmax_0922 * (s_1212 * s_1275 * s_1445 - s_1207 * s_1366 / Keq_0922) / (Km1212_0922 * Km1275_0922 * Km1445_0922) / ((1 + s_1212 / Km1212_0922) * (1 + s_1275 / Km1275_0922) * (1 + s_1445 / Km1445_0922) + (1 + s_1207 / Km1207_0922) * (1 + s_1366 / Km1366_0922) - 1))-1.0 * (cell * Vmax_1010 * (s_1203 * s_1275 * s_1447 - s_0037 * s_1198 / Keq_1010) / (Km1203_1010 * Km1275_1010 * Km1447_1010) / ((1 + s_1203 / Km1203_1010) * (1 + s_1275 / Km1275_1010) * (1 + s_1447 / Km1447_1010) + (1 + s_0037 / Km0037_1010) * (1 + s_1198 / Km1198_1010) - 1))-1.0 * (cell * Vmax_1011 * (s_1212 * s_1275 * s_1447 - s_0037 * s_1207 / Keq_1011) / (Km1212_1011 * Km1275_1011 * Km1447_1011) / ((1 + s_1212 / Km1212_1011) * (1 + s_1275 / Km1275_1011) * (1 + s_1447 / Km1447_1011) + (1 + s_0037 / Km0037_1011) * (1 + s_1207 / Km1207_1011) - 1))+1.0 * (cell * Vmax_1979 * (s_1277 - s_1275) / Km1277_1979 / (1 + s_1277 / Km1277_1979 + 1 + s_1275 / Km1275_1979 - 1)),
D(s_0764) ~ +1.0 * (cell * Vmax_0450 * (s_0555 - s_0629 * s_0764 / Keq_0450) / Km0555_0450 / (1 + s_0555 / Km0555_0450 + (1 + s_0629 / Km0629_0450) * (1 + s_0764 / Km0764_0450) - 1))-1.0 * (cell * Vmax_0486 * (s_0764 * s_1198 * s_1322 - s_0075 * s_1203 / Keq_0486) / (Km0764_0486 * Km1198_0486 * Km1322_0486) / ((1 + s_0764 / Km0764_0486) * (1 + s_1198 / Km1198_0486) * (1 + s_1322 / Km1322_0486) + (1 + s_0075 / Km0075_0486) * (1 + s_1203 / Km1203_0486) - 1))+1.0 * (cell * Vmax_1049 * (s_0581 * s_1408 - s_0764 * s_1427 / Keq_1049) / (Km0581_1049 * Km1408_1049) / ((1 + s_0581 / Km0581_1049) * (1 + s_1408 / Km1408_1049) + (1 + s_0764 / Km0764_1049) * (1 + s_1427 / Km1427_1049) - 1))+1.0 * (cell * Vmax_1050 * (s_0551 * s_0581 - s_0557 * s_0764 / Keq_1050) / (Km0551_1050 * Km0581_1050) / ((1 + s_0551 / Km0551_1050) * (1 + s_0581 / Km0581_1050) + (1 + s_0557 / Km0557_1050) * (1 + s_0764 / Km0764_1050) - 1))-1.0 * (cell * Vmax_1054 * (s_0764 - s_0629 / Keq_1054) / Km0764_1054 / (1 + s_0764 / Km0764_1054 + 1 + s_0629 / Km0629_1054 - 1))+1.0 * (cell * Vmax_1055 * (s_0086 * s_1039 - s_0764 * s_1048 / Keq_1055) / (Km0086_1055 * Km1039_1055) / ((1 + s_0086 / Km0086_1055) * (1 + s_1039 / Km1039_1055) + (1 + s_0764 / Km0764_1055) * (1 + s_1048 / Km1048_1055) - 1)),
D(s_0662) ~ +1.0 * (cell * Vmax_0233 * (s_0664 * s_1212 * s_1275 - s_0662 * s_1207 / Keq_0233) / (Km0664_0233 * Km1212_0233 * Km1275_0233) / ((1 + s_0664 / Km0664_0233) * (1 + s_1212 / Km1212_0233) * (1 + s_1275 / Km1275_0233) + (1 + s_0662 / Km0662_0233) * (1 + s_1207 / Km1207_0233) - 1))-1.0 * (cell * Vmax_0244 * (s_0662 * s_1212 - s_0666 * s_1207 / Keq_0244) / (Km0662_0244 * Km1212_0244) / ((1 + s_0662 / Km0662_0244) * (1 + s_1212 / Km1212_0244) + (1 + s_0666 / Km0666_0244) * (1 + s_1207 / Km1207_0244) - 1))-0.000125 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_0362) ~ +1.0 * (cell * Vmax_0111 * (s_0373 - s_0362 * s_0529 / Keq_0111) / Km0373_0111 / (1 + s_0373 / Km0373_0111 + (1 + s_0362 / Km0362_0111) * (1 + s_0529 / Km0529_0111) - 1))+1.0 * (cell * Vmax_0173 * (s_0359 * s_1207 - s_0362 * s_1212 / Keq_0173) / (Km0359_0173 * Km1207_0173) / ((1 + s_0359 / Km0359_0173) * (1 + s_1207 / Km1207_0173) + (1 + s_0362 / Km0362_0173) * (1 + s_1212 / Km1212_0173) - 1))+1.0 * (cell * Vmax_0311 * (s_0981 * s_1233 - s_0362 * s_0980 / Keq_0311) / (Km0981_0311 * Km1233_0311) / ((1 + s_0981 / Km0981_0311) * (1 + s_1233 / Km1233_0311) + (1 + s_0362 / Km0362_0311) * (1 + s_0980 / Km0980_0311) - 1))+1.0 * (cell * Vmax_0312 * (s_0841 * s_1234 - s_0362 * s_0981 / Keq_0312) / (Km0841_0312 * Km1234_0312) / ((1 + s_0841 / Km0841_0312) * (1 + s_1234 / Km1234_0312) + (1 + s_0362 / Km0362_0312) * (1 + s_0981 / Km0981_0312) - 1))+1.0 * (cell * Vmax_0813 * (s_0841 * s_1233 - s_0362 * s_1012 / Keq_0813) / (Km0841_0813 * Km1233_0813) / ((1 + s_0841 / Km0841_0813) * (1 + s_1233 / Km1233_0813) + (1 + s_0362 / Km0362_0813) * (1 + s_1012 / Km1012_0813) - 1))-1.0 * (cell * Vmax_1106 * s_0362 / Km0362_1106 / (1 + s_0362 / Km0362_1106)),
D(s_1255) ~ -1.0 * (cell * Vmax_0397 * (s_1101 * (s_1212)^(2) * s_1255 - s_0456 * s_0529 * s_0602 * (s_1207)^(2) / Keq_0397) / (Km1101_0397 * (Km1212_0397)^(2) * Km1255_0397) / ((1 + s_1101 / Km1101_0397) * (1 + s_1212 / Km1212_0397)^(2) * (1 + s_1255 / Km1255_0397) + (1 + s_0456 / Km0456_0397) * (1 + s_0529 / Km0529_0397) * (1 + s_0602 / Km0602_0397) * (1 + s_1207 / Km1207_0397)^(2) - 1))+1.0 * (cell * Vmax_0398 * (s_0373 * (s_1101)^(3) * (s_1212)^(6) - (s_0456)^(3) * (s_0529)^(3) * (s_1207)^(6) * s_1255 / Keq_0398) / (Km0373_0398 * (Km1101_0398)^(3) * (Km1212_0398)^(6)) / ((1 + s_0373 / Km0373_0398) * (1 + s_1101 / Km1101_0398)^(3) * (1 + s_1212 / Km1212_0398)^(6) + (1 + s_0456 / Km0456_0398)^(3) * (1 + s_0529 / Km0529_0398)^(3) * (1 + s_1207 / Km1207_0398)^(6) * (1 + s_1255 / Km1255_0398) - 1)),
D(s_1447) ~ -1.0 * (cell * Vmax_1010 * (s_1203 * s_1275 * s_1447 - s_0037 * s_1198 / Keq_1010) / (Km1203_1010 * Km1275_1010 * Km1447_1010) / ((1 + s_1203 / Km1203_1010) * (1 + s_1275 / Km1275_1010) * (1 + s_1447 / Km1447_1010) + (1 + s_0037 / Km0037_1010) * (1 + s_1198 / Km1198_1010) - 1))-1.0 * (cell * Vmax_1011 * (s_1212 * s_1275 * s_1447 - s_0037 * s_1207 / Keq_1011) / (Km1212_1011 * Km1275_1011 * Km1447_1011) / ((1 + s_1212 / Km1212_1011) * (1 + s_1275 / Km1275_1011) * (1 + s_1447 / Km1447_1011) + (1 + s_0037 / Km0037_1011) * (1 + s_1207 / Km1207_1011) - 1))+1.0 * (cell * Vmax_1012 * ((s_0190)^(2) * s_1212 - (s_0633)^(2) * s_1207 * s_1447 / Keq_1012) / ((Km0190_1012)^(2) * Km1212_1012) / ((1 + s_0190 / Km0190_1012)^(2) * (1 + s_1212 / Km1212_1012) + (1 + s_0633 / Km0633_1012)^(2) * (1 + s_1207 / Km1207_1012) * (1 + s_1447 / Km1447_1012) - 1)),
D(s_0302) ~ +1.0 * (cell * Vmax_0079 * (s_0301 * s_0434 * s_0999 - s_0302 * s_0394 * s_0991 * s_1322 / Keq_0079) / (Km0301_0079 * Km0434_0079 * Km0999_0079) / ((1 + s_0301 / Km0301_0079) * (1 + s_0434 / Km0434_0079) * (1 + s_0999 / Km0999_0079) + (1 + s_0302 / Km0302_0079) * (1 + s_0394 / Km0394_0079) * (1 + s_0991 / Km0991_0079) * (1 + s_1322 / Km1322_0079) - 1))-1.0 * (cell * Vmax_0855 * (s_0302 * s_0434 - s_0300 * s_0394 * s_1322 / Keq_0855) / (Km0302_0855 * Km0434_0855) / ((1 + s_0302 / Km0302_0855) * (1 + s_0434 / Km0434_0855) + (1 + s_0300 / Km0300_0855) * (1 + s_0394 / Km0394_0855) * (1 + s_1322 / Km1322_0855) - 1)),
D(s_0297) ~ -1.0 * (cell * Vmax_0235 * (s_0297 * s_1198 - s_0209 * s_0456 * s_1203 / Keq_0235) / (Km0297_0235 * Km1198_0235) / ((1 + s_0297 / Km0297_0235) * (1 + s_1198 / Km1198_0235) + (1 + s_0209 / Km0209_0235) * (1 + s_0456 / Km0456_0235) * (1 + s_1203 / Km1203_0235) - 1))+1.0 * (cell * Vmax_0241 * (s_0122 * (s_1212)^(3) * (s_1275)^(3) - s_0297 * (s_1207)^(3) / Keq_0241) / (Km0122_0241 * (Km1212_0241)^(3) * (Km1275_0241)^(3)) / ((1 + s_0122 / Km0122_0241) * (1 + s_1212 / Km1212_0241)^(3) * (1 + s_1275 / Km1275_0241)^(3) + (1 + s_0297 / Km0297_0241) * (1 + s_1207 / Km1207_0241)^(3) - 1)),
D(s_0262) ~ -1.0 * (cell * Vmax_0231 * (s_0262 * s_1212 - s_0122 * s_1207 / Keq_0231) / (Km0262_0231 * Km1212_0231) / ((1 + s_0262 / Km0262_0231) * (1 + s_1212 / Km1212_0231) + (1 + s_0122 / Km0122_0231) * (1 + s_1207 / Km1207_0231) - 1))+1.0 * (cell * Vmax_0317 * (s_1059 * (s_1212)^(3) * (s_1275)^(3) - s_0262 * s_0722 * (s_1207)^(3) / Keq_0317) / (Km1059_0317 * (Km1212_0317)^(3) * (Km1275_0317)^(3)) / ((1 + s_1059 / Km1059_0317) * (1 + s_1212 / Km1212_0317)^(3) * (1 + s_1275 / Km1275_0317)^(3) + (1 + s_0262 / Km0262_0317) * (1 + s_0722 / Km0722_0317) * (1 + s_1207 / Km1207_0317)^(3) - 1)),
D(s_0951) ~ -1.0 * (cell * Vmax_0851 * (s_0951 * s_0991 - s_0180 * s_1032 / Keq_0851) / (Km0951_0851 * Km0991_0851) / ((1 + s_0951 / Km0951_0851) * (1 + s_0991 / Km0991_0851) + (1 + s_0180 / Km0180_0851) * (1 + s_1032 / Km1032_0851) - 1))+1.0 * (cell * Vmax_0938 * (s_1377 - s_0456 * s_0951 / Keq_0938) / Km1377_0938 / (1 + s_1377 / Km1377_0938 + (1 + s_0456 / Km0456_0938) * (1 + s_0951 / Km0951_0938) - 1)),
D(s_0322) ~ +1.0 * (cell * Vmax_0080 * (s_0306 * s_1212 - s_0322 * s_1207 / Keq_0080) / (Km0306_0080 * Km1212_0080) / ((1 + s_0306 / Km0306_0080) * (1 + s_1212 / Km1212_0080) + (1 + s_0322 / Km0322_0080) * (1 + s_1207 / Km1207_0080) - 1))-1.0 * (cell * Vmax_0727 * (s_0322 * s_1012 - s_1029 * s_1487 / Keq_0727) / (Km0322_0727 * Km1012_0727) / ((1 + s_0322 / Km0322_0727) * (1 + s_1012 / Km1012_0727) + (1 + s_1029 / Km1029_0727) * (1 + s_1487 / Km1487_0727) - 1)),
D(s_0349) ~ +1.0 * (cell * Vmax_0020 * (s_0551 * s_1360 - s_0349 * s_1322 / Keq_0020) / (Km0551_0020 * Km1360_0020) / ((1 + s_0551 / Km0551_0020) * (1 + s_1360 / Km1360_0020) + (1 + s_0349 / Km0349_0020) * (1 + s_1322 / Km1322_0020) - 1))-1.0 * (cell * Vmax_0040 * (s_0349 - s_0210 * s_1322 / Keq_0040) / Km0349_0040 / (1 + s_0349 / Km0349_0040 + (1 + s_0210 / Km0210_0040) * (1 + s_1322 / Km1322_0040) - 1)),
D(s_0427) ~ -1.0 * (cell * Vmax_0202 * (s_0427 * s_1386 - s_0633 * s_1187 / Keq_0202) / (Km0427_0202 * Km1386_0202) / ((1 + s_0427 / Km0427_0202) * (1 + s_1386 / Km1386_0202) + (1 + s_0633 / Km0633_0202) * (1 + s_1187 / Km1187_0202) - 1))+1.0 * (cell * Vmax_0203 * (s_0515 * s_0999 - s_0427 * s_0991 * s_1399 / Keq_0203) / (Km0515_0203 * Km0999_0203) / ((1 + s_0515 / Km0515_0203) * (1 + s_0999 / Km0999_0203) + (1 + s_0427 / Km0427_0203) * (1 + s_0991 / Km0991_0203) * (1 + s_1399 / Km1399_0203) - 1))+1.0 * (cell * Vmax_0670 * (s_1020 - s_0427 * s_0955 / Keq_0670) / Km1020_0670 / (1 + s_1020 / Km1020_0670 + (1 + s_0427 / Km0427_0670) * (1 + s_0955 / Km0955_0670) - 1)),
D(s_1364) ~ -1.0 * (cell * Vmax_0908 * (s_0434 * s_0973 * s_1364 - s_0299 * s_0394 * s_1322 / Keq_0908) / (Km0434_0908 * Km0973_0908 * Km1364_0908) / ((1 + s_0434 / Km0434_0908) * (1 + s_0973 / Km0973_0908) * (1 + s_1364 / Km1364_0908) + (1 + s_0299 / Km0299_0908) * (1 + s_0394 / Km0394_0908) * (1 + s_1322 / Km1322_0908) - 1))+1.0 * (cell * Vmax_0911 * (s_0300 * s_0456 * s_0434 - s_1364 * s_0394 * s_1322 / Keq_0911) / (Km0300_0911 * Km0456_0911 * Km0434_0911) / ((1 + s_0300 / Km0300_0911) * (1 + s_0456 / Km0456_0911) * (1 + s_0434 / Km0434_0911) + (1 + s_1364 / Km1364_0911) * (1 + s_0394 / Km0394_0911) * (1 + s_1322 / Km1322_0911) - 1)),
D(s_0973) ~ -1.0 * (cell * Vmax_0153 * (s_0785 * s_0849 * s_0973 - s_0393 * s_0739 * s_1322 / Keq_0153) / (Km0785_0153 * Km0849_0153 * Km0973_0153) / ((1 + s_0785 / Km0785_0153) * (1 + s_0849 / Km0849_0153) * (1 + s_0973 / Km0973_0153) + (1 + s_0393 / Km0393_0153) * (1 + s_0739 / Km0739_0153) * (1 + s_1322 / Km1322_0153) - 1))-1.0 * (cell * Vmax_0208 * (s_0434 * s_0973 * s_0979 - s_0015 * s_0423 * s_0633 / Keq_0208) / (Km0434_0208 * Km0973_0208 * Km0979_0208) / ((1 + s_0434 / Km0434_0208) * (1 + s_0973 / Km0973_0208) * (1 + s_0979 / Km0979_0208) + (1 + s_0015 / Km0015_0208) * (1 + s_0423 / Km0423_0208) * (1 + s_0633 / Km0633_0208) - 1))-1.0 * (cell * Vmax_0211 * (s_0434 * s_0973 * s_0999 - s_0423 * s_0633 * s_0969 * s_0991 / Keq_0211) / (Km0434_0211 * Km0973_0211 * Km0999_0211) / ((1 + s_0434 / Km0434_0211) * (1 + s_0973 / Km0973_0211) * (1 + s_0999 / Km0999_0211) + (1 + s_0423 / Km0423_0211) * (1 + s_0633 / Km0633_0211) * (1 + s_0969 / Km0969_0211) * (1 + s_0991 / Km0991_0211) - 1))-1.0 * (cell * Vmax_0214 * (s_0455 * s_0973 - s_1194 * s_1322 / Keq_0214) / (Km0455_0214 * Km0973_0214) / ((1 + s_0455 / Km0455_0214) * (1 + s_0973 / Km0973_0214) + (1 + s_1194 / Km1194_0214) * (1 + s_1322 / Km1322_0214) - 1))-1.0 * (cell * Vmax_0215 * (s_0434 * s_0973 - s_0295 * s_0394 / Keq_0215) / (Km0434_0215 * Km0973_0215) / ((1 + s_0434 / Km0434_0215) * (1 + s_0973 / Km0973_0215) + (1 + s_0295 / Km0295_0215) * (1 + s_0394 / Km0394_0215) - 1))+1.0 * (cell * Vmax_0216 * (s_0991 * s_1271 - s_0180 * s_0973 / Keq_0216) / (Km0991_0216 * Km1271_0216) / ((1 + s_0991 / Km0991_0216) * (1 + s_1271 / Km1271_0216) + (1 + s_0180 / Km0180_0216) * (1 + s_0973 / Km0973_0216) - 1))-1.0 * (cell * Vmax_0908 * (s_0434 * s_0973 * s_1364 - s_0299 * s_0394 * s_1322 / Keq_0908) / (Km0434_0908 * Km0973_0908 * Km1364_0908) / ((1 + s_0434 / Km0434_0908) * (1 + s_0973 / Km0973_0908) * (1 + s_1364 / Km1364_0908) + (1 + s_0299 / Km0299_0908) * (1 + s_0394 / Km0394_0908) * (1 + s_1322 / Km1322_0908) - 1))-0.172 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_0499) ~ +1.0 * (cell * Vmax_0269 * (s_0493 * s_1212 * s_1275 - s_0499 * s_1207 / Keq_0269) / (Km0493_0269 * Km1212_0269 * Km1275_0269) / ((1 + s_0493 / Km0493_0269) * (1 + s_1212 / Km1212_0269) * (1 + s_1275 / Km1275_0269) + (1 + s_0499 / Km0499_0269) * (1 + s_1207 / Km1207_0269) - 1))-1.0 * (cell * Vmax_0594 * (s_0089 * s_0499 - s_0619 * s_0918 / Keq_0594) / (Km0089_0594 * Km0499_0594) / ((1 + s_0089 / Km0089_0594) * (1 + s_0499 / Km0499_0594) + (1 + s_0619 / Km0619_0594) * (1 + s_0918 / Km0918_0594) - 1)),
D(s_1543) ~ -1.0 * (cell * Vmax_0005 * (s_1543 - s_0002 * s_1538 / Keq_0005) / Km1543_0005 / (1 + s_1543 / Km1543_0005 + (1 + s_0002 / Km0002_0005) * (1 + s_1538 / Km1538_0005) - 1))-1.0 * (cell * Vmax_0195 * (s_0568 * s_1543 - s_0409 * s_1538 / Keq_0195) / (Km0568_0195 * Km1543_0195) / ((1 + s_0568 / Km0568_0195) * (1 + s_1543 / Km1543_0195) + (1 + s_0409 / Km0409_0195) * (1 + s_1538 / Km1538_0195) - 1))-1.0 * (cell * Vmax_0510 * (s_1543 - s_0773 * s_1538 / Keq_0510) / Km1543_0510 / (1 + s_1543 / Km1543_0510 + (1 + s_0773 / Km0773_0510) * (1 + s_1538 / Km1538_0510) - 1))+1.0 * (cell * Vmax_1084 * (s_0567 * s_1559 - s_0633 * s_1543 / Keq_1084) / (Km0567_1084 * Km1559_1084) / ((1 + s_0567 / Km0567_1084) * (1 + s_1559 / Km1559_1084) + (1 + s_0633 / Km0633_1084) * (1 + s_1543 / Km1543_1084) - 1)),
D(s_0364) ~ +1.0 * (cell * Vmax_1106 * s_0362 / Km0362_1106 / (1 + s_0362 / Km0362_1106)),
D(s_0299) ~ -1.0 * (cell * Vmax_0151 * (s_0299 - s_0403 * s_0725 / Keq_0151) / Km0299_0151 / (1 + s_0299 / Km0299_0151 + (1 + s_0403 / Km0403_0151) * (1 + s_0725 / Km0725_0151) - 1))+1.0 * (cell * Vmax_0908 * (s_0434 * s_0973 * s_1364 - s_0299 * s_0394 * s_1322 / Keq_0908) / (Km0434_0908 * Km0973_0908 * Km1364_0908) / ((1 + s_0434 / Km0434_0908) * (1 + s_0973 / Km0973_0908) * (1 + s_1364 / Km1364_0908) + (1 + s_0299 / Km0299_0908) * (1 + s_0394 / Km0394_0908) * (1 + s_1322 / Km1322_0908) - 1)),
D(s_1454) ~ -1.0 * (cell * Vmax_0407 * (s_0423 * s_0633 * s_1454 - s_0434 * s_0529 * s_1449 / Keq_0407) / (Km0423_0407 * Km0633_0407 * Km1454_0407) / ((1 + s_0423 / Km0423_0407) * (1 + s_0633 / Km0633_0407) * (1 + s_1454 / Km1454_0407) + (1 + s_0434 / Km0434_0407) * (1 + s_0529 / Km0529_0407) * (1 + s_1449 / Km1449_0407) - 1))+1.0 * (cell * Vmax_0435 * (s_1101 * (s_1212)^(2) * s_1302 - s_0456 * s_0529 * (s_1207)^(2) * s_1454 / Keq_0435) / (Km1101_0435 * (Km1212_0435)^(2) * Km1302_0435) / ((1 + s_1101 / Km1101_0435) * (1 + s_1212 / Km1212_0435)^(2) * (1 + s_1302 / Km1302_0435) + (1 + s_0456 / Km0456_0435) * (1 + s_0529 / Km0529_0435) * (1 + s_1207 / Km1207_0435)^(2) * (1 + s_1454 / Km1454_0435) - 1)),
D(s_0978) ~ +1.0 * (cell * Vmax_0219 * (s_0295 * s_1212 - s_0978 * s_1207 * s_1322 / Keq_0219) / (Km0295_0219 * Km1212_0219) / ((1 + s_0295 / Km0295_0219) * (1 + s_1212 / Km1212_0219) + (1 + s_0978 / Km0978_0219) * (1 + s_1207 / Km1207_0219) * (1 + s_1322 / Km1322_0219) - 1))-1.0 * (cell * Vmax_0547 * (s_0978 * s_1212 - s_1014 * s_1207 / Keq_0547) / (Km0978_0547 * Km1212_0547) / ((1 + s_0978 / Km0978_0547) * (1 + s_1212 / Km1212_0547) + (1 + s_1014 / Km1014_0547) * (1 + s_1207 / Km1207_0547) - 1)),
D(s_0754) ~ -1.0 * (cell * Vmax_0481 * (s_0754 * s_1212 - (s_0750)^(2) * s_1207 / Keq_0481) / (Km0754_0481 * Km1212_0481) / ((1 + s_0754 / Km0754_0481) * (1 + s_1212 / Km1212_0481) + (1 + s_0750 / Km0750_0481)^(2) * (1 + s_1207 / Km1207_0481) - 1))+1.0 * (cell * Vmax_0483 * ((s_0750)^(2) * s_0837 - s_0754 / Keq_0483) / ((Km0750_0483)^(2) * Km0837_0483) / ((1 + s_0750 / Km0750_0483)^(2) * (1 + s_0837 / Km0837_0483) + 1 + s_0754 / Km0754_0483 - 1)),
D(s_0615) ~ +1.0 * (cell * Vmax_0330 * (s_0394 * s_0613 - s_0434 * s_0615 / Keq_0330) / (Km0394_0330 * Km0613_0330) / ((1 + s_0394 / Km0394_0330) * (1 + s_0613 / Km0613_0330) + (1 + s_0434 / Km0434_0330) * (1 + s_0615 / Km0615_0330) - 1))-0.00243 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_0654) ~ -1.0 * (cell * Vmax_0326 * (s_0419 * s_0654 - s_0589 / Keq_0326) / (Km0419_0326 * Km0654_0326) / ((1 + s_0419 / Km0419_0326) * (1 + s_0654 / Km0654_0326) + 1 + s_0589 / Km0589_0326 - 1))+1.0 * (cell * Vmax_0364 * (s_0656 - s_0633 * s_0654 / Keq_0364) / Km0656_0364 / (1 + s_0656 / Km0656_0364 + (1 + s_0633 / Km0633_0364) * (1 + s_0654 / Km0654_0364) - 1))-1.0 * (cell * Vmax_1045 * (s_0306 * s_0654 - s_0625 * s_0649 / Keq_1045) / (Km0306_1045 * Km0654_1045) / ((1 + s_0306 / Km0306_1045) * (1 + s_0654 / Km0654_1045) + (1 + s_0625 / Km0625_1045) * (1 + s_0649 / Km0649_1045) - 1)),
D(s_0567) ~ +1.0 * (cell * Vmax_0888 * (s_0568 - s_0567 / Keq_0888) / Km0568_0888 / (1 + s_0568 / Km0568_0888 + 1 + s_0567 / Km0567_0888 - 1))-1.0 * (cell * Vmax_1084 * (s_0567 * s_1559 - s_0633 * s_1543 / Keq_1084) / (Km0567_1084 * Km1559_1084) / ((1 + s_0567 / Km0567_1084) * (1 + s_1559 / Km1559_1084) + (1 + s_0633 / Km0633_1084) * (1 + s_1543 / Km1543_1084) - 1)),
D(s_1233) ~ -1.0 * (cell * Vmax_0311 * (s_0981 * s_1233 - s_0362 * s_0980 / Keq_0311) / (Km0981_0311 * Km1233_0311) / ((1 + s_0981 / Km0981_0311) * (1 + s_1233 / Km1233_0311) + (1 + s_0362 / Km0362_0311) * (1 + s_0980 / Km0980_0311) - 1))+1.0 * (cell * Vmax_0549 * (s_0373 * s_1014 - s_0529 * s_1233 / Keq_0549) / (Km0373_0549 * Km1014_0549) / ((1 + s_0373 / Km0373_0549) * (1 + s_1014 / Km1014_0549) + (1 + s_0529 / Km0529_0549) * (1 + s_1233 / Km1233_0549) - 1))-1.0 * (cell * Vmax_0813 * (s_0841 * s_1233 - s_0362 * s_1012 / Keq_0813) / (Km0841_0813 * Km1233_0813) / ((1 + s_0841 / Km0841_0813) * (1 + s_1233 / Km1233_0813) + (1 + s_0362 / Km0362_0813) * (1 + s_1012 / Km1012_0813) - 1)),
D(s_1271) ~ -1.0 * (cell * Vmax_0216 * (s_0991 * s_1271 - s_0180 * s_0973 / Keq_0216) / (Km0991_0216 * Km1271_0216) / ((1 + s_0991 / Km0991_0216) * (1 + s_1271 / Km1271_0216) + (1 + s_0180 / Km0180_0216) * (1 + s_0973 / Km0973_0216) - 1))-1.0 * (cell * Vmax_0300 * (s_0373 * s_1271 - s_0522 * s_0529 / Keq_0300) / (Km0373_0300 * Km1271_0300) / ((1 + s_0373 / Km0373_0300) * (1 + s_1271 / Km1271_0300) + (1 + s_0522 / Km0522_0300) * (1 + s_0529 / Km0529_0300) - 1))+1.0 * (cell * Vmax_0713 * (s_0066 * s_1198 - s_1203 * s_1271 / Keq_0713) / (Km0066_0713 * Km1198_0713) / ((1 + s_0066 / Km0066_0713) * (1 + s_1198 / Km1198_0713) + (1 + s_1203 / Km1203_0713) * (1 + s_1271 / Km1271_0713) - 1))+1.0 * (cell * Vmax_0958 * (s_0434 * s_0445 * s_1399 - s_0394 * s_1271 * s_1322 / Keq_0958) / (Km0434_0958 * Km0445_0958 * Km1399_0958) / ((1 + s_0434 / Km0434_0958) * (1 + s_0445 / Km0445_0958) * (1 + s_1399 / Km1399_0958) + (1 + s_0394 / Km0394_0958) * (1 + s_1271 / Km1271_0958) * (1 + s_1322 / Km1322_0958) - 1)),
D(s_0028) ~ +1.0 * (cell * Vmax_0558 * (s_0218 * (s_1212)^(2) - s_0028 * s_0529 * (s_1207)^(2) / Keq_0558) / (Km0218_0558 * (Km1212_0558)^(2)) / ((1 + s_0218 / Km0218_0558) * (1 + s_1212 / Km1212_0558)^(2) + (1 + s_0028 / Km0028_0558) * (1 + s_0529 / Km0529_0558) * (1 + s_1207 / Km1207_0558)^(2) - 1))-1.0 * (cell * Vmax_0736 * (s_0028 * s_0539 - s_0019 * s_0467 / Keq_0736) / (Km0028_0736 * Km0539_0736) / ((1 + s_0028 / Km0028_0736) * (1 + s_0539 / Km0539_0736) + (1 + s_0019 / Km0019_0736) * (1 + s_0467 / Km0467_0736) - 1)),
D(s_0002) ~ +1.0 * (cell * Vmax_0005 * (s_1543 - s_0002 * s_1538 / Keq_0005) / Km1543_0005 / (1 + s_1543 / Km1543_0005 + (1 + s_0002 / Km0002_0005) * (1 + s_1538 / Km1538_0005) - 1))-1.14 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_1056) ~ +1.0 * (cell * Vmax_1087 * (s_0232 * s_0991 - s_0180 * s_1056 / Keq_1087) / (Km0232_1087 * Km0991_1087) / ((1 + s_0232 / Km0232_1087) * (1 + s_0991 / Km0991_1087) + (1 + s_0180 / Km0180_1087) * (1 + s_1056 / Km1056_1087) - 1))-0.257 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_0577) ~ -1.0 * (cell * Vmax_0038 * (s_0577 - s_0158 * s_0722 / Keq_0038) / Km0577_0038 / (1 + s_0577 / Km0577_0038 + (1 + s_0158 / Km0158_0038) * (1 + s_0722 / Km0722_0038) - 1))+1.0 * (cell * Vmax_0889 * (s_0340 * s_1207 - s_0456 * s_0577 * s_1212 / Keq_0889) / (Km0340_0889 * Km1207_0889) / ((1 + s_0340 / Km0340_0889) * (1 + s_1207 / Km1207_0889) + (1 + s_0456 / Km0456_0889) * (1 + s_0577 / Km0577_0889) * (1 + s_1212 / Km1212_0889) - 1))-1.0 * (cell * Vmax_0982 * (s_0577 - s_1408 / Keq_0982) / Km0577_0982 / (1 + s_0577 / Km0577_0982 + 1 + s_1408 / Km1408_0982 - 1))-1.0 * (cell * Vmax_0984 * (s_0577 - s_0581 / Keq_0984) / Km0577_0984 / (1 + s_0577 / Km0577_0984 + 1 + s_0581 / Km0581_0984 - 1)),
D(s_1012) ~ +1.0 * (cell * Vmax_0144 * (s_1413 - s_0386 * s_1012 / Keq_0144) / Km1413_0144 / (1 + s_1413 / Km1413_0144 + (1 + s_0386 / Km0386_0144) * (1 + s_1012 / Km1012_0144) - 1))-1.0 * (cell * Vmax_0309 * (s_1012 * s_1039 - s_0980 / Keq_0309) / (Km1012_0309 * Km1039_0309) / ((1 + s_1012 / Km1012_0309) * (1 + s_1039 / Km1039_0309) + 1 + s_0980 / Km0980_0309 - 1))-1.0 * (cell * Vmax_0727 * (s_0322 * s_1012 - s_1029 * s_1487 / Keq_0727) / (Km0322_0727 * Km1012_0727) / ((1 + s_0322 / Km0322_0727) * (1 + s_1012 / Km1012_0727) + (1 + s_1029 / Km1029_0727) * (1 + s_1487 / Km1487_0727) - 1))+1.0 * (cell * Vmax_0813 * (s_0841 * s_1233 - s_0362 * s_1012 / Keq_0813) / (Km0841_0813 * Km1233_0813) / ((1 + s_0841 / Km0841_0813) * (1 + s_1233 / Km1233_0813) + (1 + s_0362 / Km0362_0813) * (1 + s_1012 / Km1012_0813) - 1)),
D(s_0645) ~ -1.0 * (cell * Vmax_0361 * (s_0645 * s_0743 - s_0644 * s_0739 / Keq_0361) / (Km0645_0361 * Km0743_0361) / ((1 + s_0645 / Km0645_0361) * (1 + s_0743 / Km0743_0361) + (1 + s_0644 / Km0644_0361) * (1 + s_0739 / Km0739_0361) - 1))+1.0 * (cell * Vmax_0362 * (s_0644 - s_0645 * s_1107 / Keq_0362) / Km0644_0362 / (1 + s_0644 / Km0644_0362 + (1 + s_0645 / Km0645_0362) * (1 + s_1107 / Km1107_0362) - 1)),
D(s_0529) ~ +1.0 * (cell * Vmax_0008 * (s_0082 * s_0380 - s_0529 * s_1331 / Keq_0008) / (Km0082_0008 * Km0380_0008) / ((1 + s_0082 / Km0082_0008) * (1 + s_0380 / Km0380_0008) + (1 + s_0529 / Km0529_0008) * (1 + s_1331 / Km1331_0008) - 1))+1.0 * (cell * Vmax_0024 * (s_0232 * s_0373 - s_0162 * s_0529 / Keq_0024) / (Km0232_0024 * Km0373_0024) / ((1 + s_0232 / Km0232_0024) * (1 + s_0373 / Km0373_0024) + (1 + s_0162 / Km0162_0024) * (1 + s_0529 / Km0529_0024) - 1))+1.0 * (cell * Vmax_0103 * ((s_0373)^(2) - s_0367 * s_0529 / Keq_0103) / (Km0373_0103)^(2) / ((1 + s_0373 / Km0373_0103)^(2) + (1 + s_0367 / Km0367_0103) * (1 + s_0529 / Km0529_0103) - 1))+1.0 * (cell * Vmax_0111 * (s_0373 - s_0362 * s_0529 / Keq_0111) / Km0373_0111 / (1 + s_0373 / Km0373_0111 + (1 + s_0362 / Km0362_0111) * (1 + s_0529 / Km0529_0111) - 1))+1.0 * (cell * Vmax_0300 * (s_0373 * s_1271 - s_0522 * s_0529 / Keq_0300) / (Km0373_0300 * Km1271_0300) / ((1 + s_0373 / Km0373_0300) * (1 + s_1271 / Km1271_0300) + (1 + s_0522 / Km0522_0300) * (1 + s_0529 / Km0529_0300) - 1))-1.0 * (cell * Vmax_0336 * (s_0529 * s_1524 - s_0380 * s_0619 / Keq_0336) / (Km0529_0336 * Km1524_0336) / ((1 + s_0529 / Km0529_0336) * (1 + s_1524 / Km1524_0336) + (1 + s_0380 / Km0380_0336) * (1 + s_0619 / Km0619_0336) - 1))+1.0 * (cell * Vmax_0386 * (s_0595 * s_1101 * (s_1212)^(2) - s_0456 * s_0529 * s_1065 * (s_1207)^(2) / Keq_0386) / (Km0595_0386 * Km1101_0386 * (Km1212_0386)^(2)) / ((1 + s_0595 / Km0595_0386) * (1 + s_1101 / Km1101_0386) * (1 + s_1212 / Km1212_0386)^(2) + (1 + s_0456 / Km0456_0386) * (1 + s_0529 / Km0529_0386) * (1 + s_1065 / Km1065_0386) * (1 + s_1207 / Km1207_0386)^(2) - 1))+1.0 * (cell * Vmax_0387 * (s_1065 * s_1101 * (s_1212)^(2) - s_0456 * s_0529 * s_1161 * (s_1207)^(2) / Keq_0387) / (Km1065_0387 * Km1101_0387 * (Km1212_0387)^(2)) / ((1 + s_1065 / Km1065_0387) * (1 + s_1101 / Km1101_0387) * (1 + s_1212 / Km1212_0387)^(2) + (1 + s_0456 / Km0456_0387) * (1 + s_0529 / Km0529_0387) * (1 + s_1161 / Km1161_0387) * (1 + s_1207 / Km1207_0387)^(2) - 1))+1.0 * (cell * Vmax_0389 * (s_1101 * s_1161 * (s_1212)^(2) - s_0456 * s_0529 * (s_1207)^(2) * s_1286 / Keq_0389) / (Km1101_0389 * Km1161_0389 * (Km1212_0389)^(2)) / ((1 + s_1101 / Km1101_0389) * (1 + s_1161 / Km1161_0389) * (1 + s_1212 / Km1212_0389)^(2) + (1 + s_0456 / Km0456_0389) * (1 + s_0529 / Km0529_0389) * (1 + s_1207 / Km1207_0389)^(2) * (1 + s_1286 / Km1286_0389) - 1))+1.0 * (cell * Vmax_0391 * (s_1101 * (s_1212)^(2) * s_1286 - s_0456 * s_0529 * (s_1207)^(2) * s_1449 / Keq_0391) / (Km1101_0391 * (Km1212_0391)^(2) * Km1286_0391) / ((1 + s_1101 / Km1101_0391) * (1 + s_1212 / Km1212_0391)^(2) * (1 + s_1286 / Km1286_0391) + (1 + s_0456 / Km0456_0391) * (1 + s_0529 / Km0529_0391) * (1 + s_1207 / Km1207_0391)^(2) * (1 + s_1449 / Km1449_0391) - 1))+3.0 * (cell * Vmax_0393 * ((s_1101)^(3) * (s_1212)^(6) * s_1449 - (s_0456)^(3) * (s_0529)^(3) * s_1084 * (s_1207)^(6) / Keq_0393) / ((Km1101_0393)^(3) * (Km1212_0393)^(6) * Km1449_0393) / ((1 + s_1101 / Km1101_0393)^(3) * (1 + s_1212 / Km1212_0393)^(6) * (1 + s_1449 / Km1449_0393) + (1 + s_0456 / Km0456_0393)^(3) * (1 + s_0529 / Km0529_0393)^(3) * (1 + s_1084 / Km1084_0393) * (1 + s_1207 / Km1207_0393)^(6) - 1))+1.0 * (cell * Vmax_0397 * (s_1101 * (s_1212)^(2) * s_1255 - s_0456 * s_0529 * s_0602 * (s_1207)^(2) / Keq_0397) / (Km1101_0397 * (Km1212_0397)^(2) * Km1255_0397) / ((1 + s_1101 / Km1101_0397) * (1 + s_1212 / Km1212_0397)^(2) * (1 + s_1255 / Km1255_0397) + (1 + s_0456 / Km0456_0397) * (1 + s_0529 / Km0529_0397) * (1 + s_0602 / Km0602_0397) * (1 + s_1207 / Km1207_0397)^(2) - 1))+3.0 * (cell * Vmax_0398 * (s_0373 * (s_1101)^(3) * (s_1212)^(6) - (s_0456)^(3) * (s_0529)^(3) * (s_1207)^(6) * s_1255 / Keq_0398) / (Km0373_0398 * (Km1101_0398)^(3) * (Km1212_0398)^(6)) / ((1 + s_0373 / Km0373_0398) * (1 + s_1101 / Km1101_0398)^(3) * (1 + s_1212 / Km1212_0398)^(6) + (1 + s_0456 / Km0456_0398)^(3) * (1 + s_0529 / Km0529_0398)^(3) * (1 + s_1207 / Km1207_0398)^(6) * (1 + s_1255 / Km1255_0398) - 1))+1.0 * (cell * Vmax_0399 * (s_0423 * s_0602 * s_0633 - s_0434 * s_0529 * s_0595 / Keq_0399) / (Km0423_0399 * Km0602_0399 * Km0633_0399) / ((1 + s_0423 / Km0423_0399) * (1 + s_0602 / Km0602_0399) * (1 + s_0633 / Km0633_0399) + (1 + s_0434 / Km0434_0399) * (1 + s_0529 / Km0529_0399) * (1 + s_0595 / Km0595_0399) - 1))+1.0 * (cell * Vmax_0407 * (s_0423 * s_0633 * s_1454 - s_0434 * s_0529 * s_1449 / Keq_0407) / (Km0423_0407 * Km0633_0407 * Km1454_0407) / ((1 + s_0423 / Km0423_0407) * (1 + s_0633 / Km0633_0407) * (1 + s_1454 / Km1454_0407) + (1 + s_0434 / Km0434_0407) * (1 + s_0529 / Km0529_0407) * (1 + s_1449 / Km1449_0407) - 1))+1.0 * (cell * Vmax_0432 * (s_0602 * s_1101 * (s_1212)^(2) - s_0456 * s_0529 * s_1073 * (s_1207)^(2) / Keq_0432) / (Km0602_0432 * Km1101_0432 * (Km1212_0432)^(2)) / ((1 + s_0602 / Km0602_0432) * (1 + s_1101 / Km1101_0432) * (1 + s_1212 / Km1212_0432)^(2) + (1 + s_0456 / Km0456_0432) * (1 + s_0529 / Km0529_0432) * (1 + s_1073 / Km1073_0432) * (1 + s_1207 / Km1207_0432)^(2) - 1))+1.0 * (cell * Vmax_0433 * (s_1073 * s_1101 * (s_1212)^(2) - s_0456 * s_0529 * s_1176 * (s_1207)^(2) / Keq_0433) / (Km1073_0433 * Km1101_0433 * (Km1212_0433)^(2)) / ((1 + s_1073 / Km1073_0433) * (1 + s_1101 / Km1101_0433) * (1 + s_1212 / Km1212_0433)^(2) + (1 + s_0456 / Km0456_0433) * (1 + s_0529 / Km0529_0433) * (1 + s_1176 / Km1176_0433) * (1 + s_1207 / Km1207_0433)^(2) - 1))+1.0 * (cell * Vmax_0434 * (s_1101 * s_1176 * (s_1212)^(2) - s_0456 * s_0529 * (s_1207)^(2) * s_1302 / Keq_0434) / (Km1101_0434 * Km1176_0434 * (Km1212_0434)^(2)) / ((1 + s_1101 / Km1101_0434) * (1 + s_1176 / Km1176_0434) * (1 + s_1212 / Km1212_0434)^(2) + (1 + s_0456 / Km0456_0434) * (1 + s_0529 / Km0529_0434) * (1 + s_1207 / Km1207_0434)^(2) * (1 + s_1302 / Km1302_0434) - 1))+1.0 * (cell * Vmax_0435 * (s_1101 * (s_1212)^(2) * s_1302 - s_0456 * s_0529 * (s_1207)^(2) * s_1454 / Keq_0435) / (Km1101_0435 * (Km1212_0435)^(2) * Km1302_0435) / ((1 + s_1101 / Km1101_0435) * (1 + s_1212 / Km1212_0435)^(2) * (1 + s_1302 / Km1302_0435) + (1 + s_0456 / Km0456_0435) * (1 + s_0529 / Km0529_0435) * (1 + s_1207 / Km1207_0435)^(2) * (1 + s_1454 / Km1454_0435) - 1))+1.0 * (cell * Vmax_0495 * (s_0380 * s_0767 - s_0082 * s_0529 / Keq_0495) / (Km0380_0495 * Km0767_0495) / ((1 + s_0380 / Km0380_0495) * (1 + s_0767 / Km0767_0495) + (1 + s_0082 / Km0082_0495) * (1 + s_0529 / Km0529_0495) - 1))+1.0 * (cell * Vmax_0543 * (s_0180 * s_0373 - s_0529 * s_0835 / Keq_0543) / (Km0180_0543 * Km0373_0543) / ((1 + s_0180 / Km0180_0543) * (1 + s_0373 / Km0373_0543) + (1 + s_0529 / Km0529_0543) * (1 + s_0835 / Km0835_0543) - 1))+1.0 * (cell * Vmax_0549 * (s_0373 * s_1014 - s_0529 * s_1233 / Keq_0549) / (Km0373_0549 * Km1014_0549) / ((1 + s_0373 / Km0373_0549) * (1 + s_1014 / Km1014_0549) + (1 + s_0529 / Km0529_0549) * (1 + s_1233 / Km1233_0549) - 1))+1.0 * (cell * Vmax_0558 * (s_0218 * (s_1212)^(2) - s_0028 * s_0529 * (s_1207)^(2) / Keq_0558) / (Km0218_0558 * (Km1212_0558)^(2)) / ((1 + s_0218 / Km0218_0558) * (1 + s_1212 / Km1212_0558)^(2) + (1 + s_0028 / Km0028_0558) * (1 + s_0529 / Km0529_0558) * (1 + s_1207 / Km1207_0558)^(2) - 1))+1.0 * (cell * Vmax_0559 * (s_0367 * s_0373 - s_0218 * s_0529 / Keq_0559) / (Km0367_0559 * Km0373_0559) / ((1 + s_0367 / Km0367_0559) * (1 + s_0373 / Km0373_0559) + (1 + s_0218 / Km0218_0559) * (1 + s_0529 / Km0529_0559) - 1))-1.0 * (cell * Vmax_0961 * (s_0529 * s_1198 * s_1399 - s_0373 * s_0456 * s_1203 / Keq_0961) / (Km0529_0961 * Km1198_0961 * Km1399_0961) / ((1 + s_0529 / Km0529_0961) * (1 + s_1198 / Km1198_0961) * (1 + s_1399 / Km1399_0961) + (1 + s_0373 / Km0373_0961) * (1 + s_0456 / Km0456_0961) * (1 + s_1203 / Km1203_0961) - 1))+1.0 * (cell * Vmax_0992 * (s_0373 * s_1039 - s_0529 * s_1234 / Keq_0992) / (Km0373_0992 * Km1039_0992) / ((1 + s_0373 / Km0373_0992) * (1 + s_1039 / Km1039_0992) + (1 + s_0529 / Km0529_0992) * (1 + s_1234 / Km1234_0992) - 1))+1.0 * (cell * Vmax_0993 * (s_1039 * s_1302 - s_0231 * s_0456 * s_0529 / Keq_0993) / (Km1039_0993 * Km1302_0993) / ((1 + s_1039 / Km1039_0993) * (1 + s_1302 / Km1302_0993) + (1 + s_0231 / Km0231_0993) * (1 + s_0456 / Km0456_0993) * (1 + s_0529 / Km0529_0993) - 1)),
D(s_1524) ~ -1.0 * (cell * Vmax_0336 * (s_0529 * s_1524 - s_0380 * s_0619 / Keq_0336) / (Km0529_0336 * Km1524_0336) / ((1 + s_0529 / Km0529_0336) * (1 + s_1524 / Km1524_0336) + (1 + s_0380 / Km0380_0336) * (1 + s_0619 / Km0619_0336) - 1))+1.0 * (cell * Vmax_1052 * (s_0619 * s_0595 - s_1524 / Keq_1052) / (Km0619_1052 * Km0595_1052) / ((1 + s_0619 / Km0619_1052) * (1 + s_0595 / Km0595_1052) + 1 + s_1524 / Km1524_1052 - 1))-0.000781 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_0313) ~ +1.0 * (cell * Vmax_0014 * (s_0142 - s_0313 * s_0419 / Keq_0014) / Km0142_0014 / (1 + s_0142 / Km0142_0014 + (1 + s_0313 / Km0313_0014) * (1 + s_0419 / Km0419_0014) - 1))-1.0 * (cell * Vmax_2030 * (s_0313 - s_0314 * s_1322 / Keq_2030) / Km0313_2030 / (1 + s_0313 / Km0313_2030 + (1 + s_0314 / Km0314_2030) * (1 + s_1322 / Km1322_2030) - 1)),
D(s_0613) ~ -1.0 * (cell * Vmax_0330 * (s_0394 * s_0613 - s_0434 * s_0615 / Keq_0330) / (Km0394_0330 * Km0613_0330) / ((1 + s_0394 / Km0394_0330) * (1 + s_0613 / Km0613_0330) + (1 + s_0434 / Km0434_0330) * (1 + s_0615 / Km0615_0330) - 1))+1.0 * (cell * Vmax_0978 * (s_0739 * s_1616 - s_0613 * s_1620 / Keq_0978) / (Km0739_0978 * Km1616_0978) / ((1 + s_0739 / Km0739_0978) * (1 + s_1616 / Km1616_0978) + (1 + s_0613 / Km0613_0978) * (1 + s_1620 / Km1620_0978) - 1)),
D(s_1324) ~ -1.0 * (cell * Vmax_1244 * (s_1324 - s_1322) / Km1324_1244 / (1 + s_1324 / Km1324_1244 + 1 + s_1322 / Km1322_1244 - 1)),
D(s_0304) ~ -1.0 * (cell * Vmax_0724 * (s_0304 - s_0120 / Keq_0724) / Km0304_0724 / (1 + s_0304 / Km0304_0724 + 1 + s_0120 / Km0120_0724 - 1))+1.0 * (cell * Vmax_0731 * (s_0306 * s_1198 - s_0304 * s_1203 / Keq_0731) / (Km0306_0731 * Km1198_0731) / ((1 + s_0306 / Km0306_0731) * (1 + s_1198 / Km1198_0731) + (1 + s_0304 / Km0304_0731) * (1 + s_1203 / Km1203_0731) - 1))+1.0 * (cell * Vmax_0732 * (s_0306 * s_1207 - s_0304 * s_1212 / Keq_0732) / (Km0306_0732 * Km1207_0732) / ((1 + s_0306 / Km0306_0732) * (1 + s_1207 / Km1207_0732) + (1 + s_0304 / Km0304_0732) * (1 + s_1212 / Km1212_0732) - 1)),
D(s_1176) ~ +1.0 * (cell * Vmax_0433 * (s_1073 * s_1101 * (s_1212)^(2) - s_0456 * s_0529 * s_1176 * (s_1207)^(2) / Keq_0433) / (Km1073_0433 * Km1101_0433 * (Km1212_0433)^(2)) / ((1 + s_1073 / Km1073_0433) * (1 + s_1101 / Km1101_0433) * (1 + s_1212 / Km1212_0433)^(2) + (1 + s_0456 / Km0456_0433) * (1 + s_0529 / Km0529_0433) * (1 + s_1176 / Km1176_0433) * (1 + s_1207 / Km1207_0433)^(2) - 1))-1.0 * (cell * Vmax_0434 * (s_1101 * s_1176 * (s_1212)^(2) - s_0456 * s_0529 * (s_1207)^(2) * s_1302 / Keq_0434) / (Km1101_0434 * Km1176_0434 * (Km1212_0434)^(2)) / ((1 + s_1101 / Km1101_0434) * (1 + s_1176 / Km1176_0434) * (1 + s_1212 / Km1212_0434)^(2) + (1 + s_0456 / Km0456_0434) * (1 + s_0529 / Km0529_0434) * (1 + s_1207 / Km1207_0434)^(2) * (1 + s_1302 / Km1302_0434) - 1)),
D(s_1399) ~ +1.0 * (cell * Vmax_0001 * (s_0025 * (s_0709)^(2) - (s_0710)^(2) * s_1399 / Keq_0001) / (Km0025_0001 * (Km0709_0001)^(2)) / ((1 + s_0025 / Km0025_0001) * (1 + s_0709 / Km0709_0001)^(2) + (1 + s_0710 / Km0710_0001)^(2) * (1 + s_1399 / Km1399_0001) - 1))+1.0 * (cell * Vmax_0004 * (s_0063 * (s_0709)^(2) - (s_0710)^(2) * s_1399 / Keq_0004) / (Km0063_0004 * (Km0709_0004)^(2)) / ((1 + s_0063 / Km0063_0004) * (1 + s_0709 / Km0709_0004)^(2) + (1 + s_0710 / Km0710_0004)^(2) * (1 + s_1399 / Km1399_0004) - 1))-1.0 * (cell * Vmax_0016 * (s_0178 * s_1399 - s_0039 * s_0456 / Keq_0016) / (Km0178_0016 * Km1399_0016) / ((1 + s_0178 / Km0178_0016) * (1 + s_1399 / Km1399_0016) + (1 + s_0039 / Km0039_0016) * (1 + s_0456 / Km0456_0016) - 1))-2.0 * (cell * Vmax_0097 * ((s_1399)^(2) - s_0146 * s_0456 / Keq_0097) / (Km1399_0097)^(2) / ((1 + s_1399 / Km1399_0097)^(2) + (1 + s_0146 / Km0146_0097) * (1 + s_0456 / Km0456_0097) - 1))+1.0 * (cell * Vmax_0203 * (s_0515 * s_0999 - s_0427 * s_0991 * s_1399 / Keq_0203) / (Km0515_0203 * Km0999_0203) / ((1 + s_0515 / Km0515_0203) * (1 + s_0999 / Km0999_0203) + (1 + s_0427 / Km0427_0203) * (1 + s_0991 / Km0991_0203) * (1 + s_1399 / Km1399_0203) - 1))-1.0 * (cell * Vmax_0674 * (s_0991 * s_1399 - s_0180 * s_0955 / Keq_0674) / (Km0991_0674 * Km1399_0674) / ((1 + s_0991 / Km0991_0674) * (1 + s_1399 / Km1399_0674) + (1 + s_0180 / Km0180_0674) * (1 + s_0955 / Km0955_0674) - 1))-1.0 * (cell * Vmax_0958 * (s_0434 * s_0445 * s_1399 - s_0394 * s_1271 * s_1322 / Keq_0958) / (Km0434_0958 * Km0445_0958 * Km1399_0958) / ((1 + s_0434 / Km0434_0958) * (1 + s_0445 / Km0445_0958) * (1 + s_1399 / Km1399_0958) + (1 + s_0394 / Km0394_0958) * (1 + s_1271 / Km1271_0958) * (1 + s_1322 / Km1322_0958) - 1))-1.0 * (cell * Vmax_0959 * (s_1399 - s_0359 * s_0456 / Keq_0959) / Km1399_0959 / (1 + s_1399 / Km1399_0959 + (1 + s_0359 / Km0359_0959) * (1 + s_0456 / Km0456_0959) - 1))-1.0 * (cell * Vmax_0961 * (s_0529 * s_1198 * s_1399 - s_0373 * s_0456 * s_1203 / Keq_0961) / (Km0529_0961 * Km1198_0961 * Km1399_0961) / ((1 + s_0529 / Km0529_0961) * (1 + s_1198 / Km1198_0961) * (1 + s_1399 / Km1399_0961) + (1 + s_0373 / Km0373_0961) * (1 + s_0456 / Km0456_0961) * (1 + s_1203 / Km1203_0961) - 1))+1.0 * (cell * Vmax_0962 * (s_0394 * s_1360 - s_0434 * s_1399 / Keq_0962) / (Km0394_0962 * Km1360_0962) / ((1 + s_0394 / Km0394_0962) * (1 + s_1360 / Km1360_0962) + (1 + s_0434 / Km0434_0962) * (1 + s_1399 / Km1399_0962) - 1)),
D(s_1565) ~ -1.0 * (cell * Vmax_0514 * (s_0434 * s_0999 * s_1565 - s_0423 * s_0633 * s_0782 * s_0991 / Keq_0514) / (Km0434_0514 * Km0999_0514 * Km1565_0514) / ((1 + s_0434 / Km0434_0514) * (1 + s_0999 / Km0999_0514) * (1 + s_1565 / Km1565_0514) + (1 + s_0423 / Km0423_0514) * (1 + s_0633 / Km0633_0514) * (1 + s_0782 / Km0782_0514) * (1 + s_0991 / Km0991_0514) - 1))+1.0 * (cell * Vmax_0565 * (s_0849 * s_1198 - s_1203 * s_1565 / Keq_0565) / (Km0849_0565 * Km1198_0565) / ((1 + s_0849 / Km0849_0565) * (1 + s_1198 / Km1198_0565) + (1 + s_1203 / Km1203_0565) * (1 + s_1565 / Km1565_0565) - 1)),
D(s_0563) ~ -1.0 * (cell * Vmax_0534 * (s_0434 * s_0563 - s_0394 * s_0568 / Keq_0534) / (Km0434_0534 * Km0563_0534) / ((1 + s_0434 / Km0434_0534) * (1 + s_0563 / Km0563_0534) + (1 + s_0394 / Km0394_0534) * (1 + s_0568 / Km0568_0534) - 1))+1.0 * (cell * Vmax_1166 * (s_0565 - s_0563) / Km0565_1166 / (1 + s_0565 / Km0565_1166 + 1 + s_0563 / Km0563_1166 - 1)),
D(s_0327) ~ -1.0 * (cell * Vmax_0914 * (s_0327 * s_0434 * s_1003 - s_0325 * s_0394 * s_1322 / Keq_0914) / (Km0327_0914 * Km0434_0914 * Km1003_0914) / ((1 + s_0327 / Km0327_0914) * (1 + s_0434 / Km0434_0914) * (1 + s_1003 / Km1003_0914) + (1 + s_0325 / Km0325_0914) * (1 + s_0394 / Km0394_0914) * (1 + s_1322 / Km1322_0914) - 1))+1.0 * (cell * Vmax_0915 * (s_0999 * s_1386 - s_0327 * s_0633 * s_0991 / Keq_0915) / (Km0999_0915 * Km1386_0915) / ((1 + s_0999 / Km0999_0915) * (1 + s_1386 / Km1386_0915) + (1 + s_0327 / Km0327_0915) * (1 + s_0633 / Km0633_0915) * (1 + s_0991 / Km0991_0915) - 1)),
D(s_1029) ~ -1.0 * (cell * Vmax_0726 * (s_0434 * s_1029 - s_0633 * s_1322 * s_1416 / Keq_0726) / (Km0434_0726 * Km1029_0726) / ((1 + s_0434 / Km0434_0726) * (1 + s_1029 / Km1029_0726) + (1 + s_0633 / Km0633_0726) * (1 + s_1322 / Km1322_0726) * (1 + s_1416 / Km1416_0726) - 1))+1.0 * (cell * Vmax_0727 * (s_0322 * s_1012 - s_1029 * s_1487 / Keq_0727) / (Km0322_0727 * Km1012_0727) / ((1 + s_0322 / Km0322_0727) * (1 + s_1012 / Km1012_0727) + (1 + s_1029 / Km1029_0727) * (1 + s_1487 / Km1487_0727) - 1))-0.05 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_0037) ~ -1.0 * (cell * Vmax_0698 * (s_0037 - s_1059 / Keq_0698) / Km0037_0698 / (1 + s_0037 / Km0037_0698 + 1 + s_1059 / Km1059_0698 - 1))+1.0 * (cell * Vmax_1010 * (s_1203 * s_1275 * s_1447 - s_0037 * s_1198 / Keq_1010) / (Km1203_1010 * Km1275_1010 * Km1447_1010) / ((1 + s_1203 / Km1203_1010) * (1 + s_1275 / Km1275_1010) * (1 + s_1447 / Km1447_1010) + (1 + s_0037 / Km0037_1010) * (1 + s_1198 / Km1198_1010) - 1))+1.0 * (cell * Vmax_1011 * (s_1212 * s_1275 * s_1447 - s_0037 * s_1207 / Keq_1011) / (Km1212_1011 * Km1275_1011 * Km1447_1011) / ((1 + s_1212 / Km1212_1011) * (1 + s_1275 / Km1275_1011) * (1 + s_1447 / Km1447_1011) + (1 + s_0037 / Km0037_1011) * (1 + s_1207 / Km1207_1011) - 1)),
D(s_0009) ~ +1.0 * (cell * Vmax_0060 * (s_0165 - s_0009 / Keq_0060) / Km0165_0060 / (1 + s_0165 / Km0165_0060 + 1 + s_0009 / Km0009_0060 - 1))-1.0 * (cell * Vmax_0061 * (s_0009 * s_1198 - s_0010 * s_1203 / Keq_0061) / (Km0009_0061 * Km1198_0061) / ((1 + s_0009 / Km0009_0061) * (1 + s_1198 / Km1198_0061) + (1 + s_0010 / Km0010_0061) * (1 + s_1203 / Km1203_0061) - 1)),
D(s_0386) ~ -1.0 * (cell * Vmax_0142 * (s_0386 * s_0434 - s_0394 * s_0423 / Keq_0142) / (Km0386_0142 * Km0434_0142) / ((1 + s_0386 / Km0386_0142) * (1 + s_0434 / Km0434_0142) + (1 + s_0394 / Km0394_0142) * (1 + s_0423 / Km0423_0142) - 1))+1.0 * (cell * Vmax_0144 * (s_1413 - s_0386 * s_1012 / Keq_0144) / Km1413_0144 / (1 + s_1413 / Km1413_0144 + (1 + s_0386 / Km0386_0144) * (1 + s_1012 / Km1012_0144) - 1)),
D(s_1038) ~ -1.0 * (cell * Vmax_0988 * (s_1038 * s_1198 - s_0180 * s_1025 * s_1203 / Keq_0988) / (Km1038_0988 * Km1198_0988) / ((1 + s_1038 / Km1038_0988) * (1 + s_1198 / Km1198_0988) + (1 + s_0180 / Km0180_0988) * (1 + s_1025 / Km1025_0988) * (1 + s_1203 / Km1203_0988) - 1))+1.0 * (cell * Vmax_0989 * (s_0959 * s_0991 * s_1212 - s_1038 * s_1207 / Keq_0989) / (Km0959_0989 * Km0991_0989 * Km1212_0989) / ((1 + s_0959 / Km0959_0989) * (1 + s_0991 / Km0991_0989) * (1 + s_1212 / Km1212_0989) + (1 + s_1038 / Km1038_0989) * (1 + s_1207 / Km1207_0989) - 1)),
D(s_0629) ~ +1.0 * (cell * Vmax_0450 * (s_0555 - s_0629 * s_0764 / Keq_0450) / Km0555_0450 / (1 + s_0555 / Km0555_0450 + (1 + s_0629 / Km0629_0450) * (1 + s_0764 / Km0764_0450) - 1))-1.0 * (cell * Vmax_0491 * (s_0629 * s_1203 - s_0767 * s_1198 / Keq_0491) / (Km0629_0491 * Km1203_0491) / ((1 + s_0629 / Km0629_0491) * (1 + s_1203 / Km1203_0491) + (1 + s_0767 / Km0767_0491) * (1 + s_1198 / Km1198_0491) - 1))+1.0 * (cell * Vmax_0990 * (s_1426 - s_0551 * s_0629 / Keq_0990) / Km1426_0990 / (1 + s_1426 / Km1426_0990 + (1 + s_0551 / Km0551_0990) * (1 + s_0629 / Km0629_0990) - 1))+1.0 * (cell * Vmax_1054 * (s_0764 - s_0629 / Keq_1054) / Km0764_1054 / (1 + s_0764 / Km0764_1054 + 1 + s_0629 / Km0629_1054 - 1))-1.0 * (cell * Vmax_1936 * (s_0629 - s_1151 * s_1322 / Keq_1936) / Km0629_1936 / (1 + s_0629 / Km0629_1936 + (1 + s_1151 / Km1151_1936) * (1 + s_1322 / Km1322_1936) - 1)),
D(s_0260) ~ -1.0 * (cell * Vmax_0891 * (s_0260 * s_1198 - s_0258 * s_1203 / Keq_0891) / (Km0260_0891 * Km1198_0891) / ((1 + s_0260 / Km0260_0891) * (1 + s_1198 / Km1198_0891) + (1 + s_0258 / Km0258_0891) * (1 + s_1203 / Km1203_0891) - 1))+1.0 * (cell * Vmax_0892 * (s_0075 * s_0394 - s_0260 * s_0434 / Keq_0892) / (Km0075_0892 * Km0394_0892) / ((1 + s_0075 / Km0075_0892) * (1 + s_0394 / Km0394_0892) + (1 + s_0260 / Km0260_0892) * (1 + s_0434 / Km0434_0892) - 1))-1.0 * (cell * Vmax_0893 * (s_0260 - s_0188 / Keq_0893) / Km0260_0893 / (1 + s_0260 / Km0260_0893 + 1 + s_0188 / Km0188_0893 - 1)),
D(s_1366) ~ -1.0 * (cell * Vmax_0919 * (s_1084 * s_1366 - s_0481 / Keq_0919) / (Km1084_0919 * Km1366_0919) / ((1 + s_1084 / Km1084_0919) * (1 + s_1366 / Km1366_0919) + 1 + s_0481 / Km0481_0919 - 1))+1.0 * (cell * Vmax_0922 * (s_1212 * s_1275 * s_1445 - s_1207 * s_1366 / Keq_0922) / (Km1212_0922 * Km1275_0922 * Km1445_0922) / ((1 + s_1212 / Km1212_0922) * (1 + s_1275 / Km1275_0922) * (1 + s_1445 / Km1445_0922) + (1 + s_1207 / Km1207_0922) * (1 + s_1366 / Km1366_0922) - 1)),
D(s_0390) ~ -1.0 * (cell * Vmax_0032 * (s_0390 - s_0423 * s_1322 / Keq_0032) / Km0390_0032 / (1 + s_0390 / Km0390_0032 + (1 + s_0423 / Km0423_0032) * (1 + s_1322 / Km1322_0032) - 1))+1.0 * (cell * Vmax_0883 * (s_0201 * s_1616 - s_0390 * s_1469 * s_1620 / Keq_0883) / (Km0201_0883 * Km1616_0883) / ((1 + s_0201 / Km0201_0883) * (1 + s_1616 / Km1616_0883) + (1 + s_0390 / Km0390_0883) * (1 + s_1469 / Km1469_0883) * (1 + s_1620 / Km1620_0883) - 1)),
D(s_0231) ~ -1.0 * (cell * Vmax_0041 * (s_0231 * s_1212 - s_1207 * s_1445 / Keq_0041) / (Km0231_0041 * Km1212_0041) / ((1 + s_0231 / Km0231_0041) * (1 + s_1212 / Km1212_0041) + (1 + s_1207 / Km1207_0041) * (1 + s_1445 / Km1445_0041) - 1))+1.0 * (cell * Vmax_0993 * (s_1039 * s_1302 - s_0231 * s_0456 * s_0529 / Keq_0993) / (Km1039_0993 * Km1302_0993) / ((1 + s_1039 / Km1039_0993) * (1 + s_1302 / Km1302_0993) + (1 + s_0231 / Km0231_0993) * (1 + s_0456 / Km0456_0993) * (1 + s_0529 / Km0529_0993) - 1)),
D(s_1045) ~ +1.0 * (cell * Vmax_1041 * (s_1238 - s_1045 * s_1322 / Keq_1041) / Km1238_1041 / (1 + s_1238 / Km1238_1041 + (1 + s_1045 / Km1045_1041) * (1 + s_1322 / Km1322_1041) - 1))-0.197 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_1048) ~ -1.0 * (cell * Vmax_0694 * (s_1048 * s_1275 - s_1195 / Keq_0694) / (Km1048_0694 * Km1275_0694) / ((1 + s_1048 / Km1048_0694) * (1 + s_1275 / Km1275_0694) + 1 + s_1195 / Km1195_0694 - 1))+1.0 * (cell * Vmax_1055 * (s_0086 * s_1039 - s_0764 * s_1048 / Keq_1055) / (Km0086_1055 * Km1039_1055) / ((1 + s_0086 / Km0086_1055) * (1 + s_1039 / Km1039_1055) + (1 + s_0764 / Km0764_1055) * (1 + s_1048 / Km1048_1055) - 1))-0.028 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_0836) ~ +1.0 * (cell * Vmax_0542 * (s_0454 - s_0836 / Keq_0542) / Km0454_0542 / (1 + s_0454 / Km0454_0542 + 1 + s_0836 / Km0836_0542 - 1))-1.0 * (cell * Vmax_0545 * (s_0836 * s_1198 - s_0176 * s_1203 * s_0456 / Keq_0545) / (Km0836_0545 * Km1198_0545) / ((1 + s_0836 / Km0836_0545) * (1 + s_1198 / Km1198_0545) + (1 + s_0176 / Km0176_0545) * (1 + s_1203 / Km1203_0545) * (1 + s_0456 / Km0456_0545) - 1)),
D(s_0918) ~ +1.0 * (cell * Vmax_0594 * (s_0089 * s_0499 - s_0619 * s_0918 / Keq_0594) / (Km0089_0594 * Km0499_0594) / ((1 + s_0089 / Km0089_0594) * (1 + s_0499 / Km0499_0594) + (1 + s_0619 / Km0619_0594) * (1 + s_0918 / Km0918_0594) - 1))-0.000538625 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_1408) ~ -1.0 * (cell * Vmax_0916 * (s_0434 * s_1408 - s_0423 * s_1386 / Keq_0916) / (Km0434_0916 * Km1408_0916) / ((1 + s_0434 / Km0434_0916) * (1 + s_1408 / Km1408_0916) + (1 + s_0423 / Km0423_0916) * (1 + s_1386 / Km1386_0916) - 1))+1.0 * (cell * Vmax_0982 * (s_0577 - s_1408 / Keq_0982) / Km0577_0982 / (1 + s_0577 / Km0577_0982 + 1 + s_1408 / Km1408_0982 - 1))-1.0 * (cell * Vmax_1049 * (s_0581 * s_1408 - s_0764 * s_1427 / Keq_1049) / (Km0581_1049 * Km1408_1049) / ((1 + s_0581 / Km0581_1049) * (1 + s_1408 / Km1408_1049) + (1 + s_0764 / Km0764_1049) * (1 + s_1427 / Km1427_1049) - 1)),
D(s_0015) ~ -1.0 * (cell * Vmax_0207 * (s_0015 - s_0725 * s_0965 / Keq_0207) / Km0015_0207 / (1 + s_0015 / Km0015_0207 + (1 + s_0725 / Km0725_0207) * (1 + s_0965 / Km0965_0207) - 1))+1.0 * (cell * Vmax_0208 * (s_0434 * s_0973 * s_0979 - s_0015 * s_0423 * s_0633 / Keq_0208) / (Km0434_0208 * Km0973_0208 * Km0979_0208) / ((1 + s_0434 / Km0434_0208) * (1 + s_0973 / Km0973_0208) * (1 + s_0979 / Km0979_0208) + (1 + s_0015 / Km0015_0208) * (1 + s_0423 / Km0423_0208) * (1 + s_0633 / Km0633_0208) - 1)),
D(s_1073) ~ +1.0 * (cell * Vmax_0432 * (s_0602 * s_1101 * (s_1212)^(2) - s_0456 * s_0529 * s_1073 * (s_1207)^(2) / Keq_0432) / (Km0602_0432 * Km1101_0432 * (Km1212_0432)^(2)) / ((1 + s_0602 / Km0602_0432) * (1 + s_1101 / Km1101_0432) * (1 + s_1212 / Km1212_0432)^(2) + (1 + s_0456 / Km0456_0432) * (1 + s_0529 / Km0529_0432) * (1 + s_1073 / Km1073_0432) * (1 + s_1207 / Km1207_0432)^(2) - 1))-1.0 * (cell * Vmax_0433 * (s_1073 * s_1101 * (s_1212)^(2) - s_0456 * s_0529 * s_1176 * (s_1207)^(2) / Keq_0433) / (Km1073_0433 * Km1101_0433 * (Km1212_0433)^(2)) / ((1 + s_1073 / Km1073_0433) * (1 + s_1101 / Km1101_0433) * (1 + s_1212 / Km1212_0433)^(2) + (1 + s_0456 / Km0456_0433) * (1 + s_0529 / Km0529_0433) * (1 + s_1176 / Km1176_0433) * (1 + s_1207 / Km1207_0433)^(2) - 1)),
D(s_1234) ~ -1.0 * (cell * Vmax_0312 * (s_0841 * s_1234 - s_0362 * s_0981 / Keq_0312) / (Km0841_0312 * Km1234_0312) / ((1 + s_0841 / Km0841_0312) * (1 + s_1234 / Km1234_0312) + (1 + s_0362 / Km0362_0312) * (1 + s_0981 / Km0981_0312) - 1))+1.0 * (cell * Vmax_0992 * (s_0373 * s_1039 - s_0529 * s_1234 / Keq_0992) / (Km0373_0992 * Km1039_0992) / ((1 + s_0373 / Km0373_0992) * (1 + s_1039 / Km1039_0992) + (1 + s_0529 / Km0529_0992) * (1 + s_1234 / Km1234_0992) - 1)),
D(s_1351) ~ -1.0 * (cell * Vmax_0858 * (s_1351 * s_1416 - s_1343 * s_1413 / Keq_0858) / (Km1351_0858 * Km1416_0858) / ((1 + s_1351 / Km1351_0858) * (1 + s_1416 / Km1416_0858) + (1 + s_1343 / Km1343_0858) * (1 + s_1413 / Km1413_0858) - 1))+1.0 * (cell * Vmax_0877 * (s_1337 - s_0456 * s_1351 / Keq_0877) / Km1337_0877 / (1 + s_1337 / Km1337_0877 + (1 + s_0456 / Km0456_0877) * (1 + s_1351 / Km1351_0877) - 1))-0.000697 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_0018) ~ -1.0 * (cell * Vmax_0739 * (s_0018 * s_0434 - s_0394 * s_0456 * s_0943 * s_1322 / Keq_0739) / (Km0018_0739 * Km0434_0739) / ((1 + s_0018 / Km0018_0739) * (1 + s_0434 / Km0434_0739) + (1 + s_0394 / Km0394_0739) * (1 + s_0456 / Km0456_0739) * (1 + s_0943 / Km0943_0739) * (1 + s_1322 / Km1322_0739) - 1))+1.0 * (cell * Vmax_0904 * (s_0019 * s_0434 - s_0018 * s_0394 / Keq_0904) / (Km0019_0904 * Km0434_0904) / ((1 + s_0019 / Km0019_0904) * (1 + s_0434 / Km0434_0904) + (1 + s_0018 / Km0018_0904) * (1 + s_0394 / Km0394_0904) - 1)),
D(s_1065) ~ +1.0 * (cell * Vmax_0386 * (s_0595 * s_1101 * (s_1212)^(2) - s_0456 * s_0529 * s_1065 * (s_1207)^(2) / Keq_0386) / (Km0595_0386 * Km1101_0386 * (Km1212_0386)^(2)) / ((1 + s_0595 / Km0595_0386) * (1 + s_1101 / Km1101_0386) * (1 + s_1212 / Km1212_0386)^(2) + (1 + s_0456 / Km0456_0386) * (1 + s_0529 / Km0529_0386) * (1 + s_1065 / Km1065_0386) * (1 + s_1207 / Km1207_0386)^(2) - 1))-1.0 * (cell * Vmax_0387 * (s_1065 * s_1101 * (s_1212)^(2) - s_0456 * s_0529 * s_1161 * (s_1207)^(2) / Keq_0387) / (Km1065_0387 * Km1101_0387 * (Km1212_0387)^(2)) / ((1 + s_1065 / Km1065_0387) * (1 + s_1101 / Km1101_0387) * (1 + s_1212 / Km1212_0387)^(2) + (1 + s_0456 / Km0456_0387) * (1 + s_0529 / Km0529_0387) * (1 + s_1161 / Km1161_0387) * (1 + s_1207 / Km1207_0387)^(2) - 1)),
D(s_1429) ~ +1.0 * (cell * Vmax_0996 * (s_0211 * s_1212 - s_1207 * s_1429 / Keq_0996) / (Km0211_0996 * Km1212_0996) / ((1 + s_0211 / Km0211_0996) * (1 + s_1212 / Km1212_0996) + (1 + s_1207 / Km1207_0996) * (1 + s_1429 / Km1429_0996) - 1))-1.0 * (cell * Vmax_0997 * (s_0434 * s_1429 - s_0261 * s_0394 / Keq_0997) / (Km0434_0997 * Km1429_0997) / ((1 + s_0434 / Km0434_0997) * (1 + s_1429 / Km1429_0997) + (1 + s_0261 / Km0261_0997) * (1 + s_0394 / Km0394_0997) - 1)),
D(s_1413) ~ -1.0 * (cell * Vmax_0144 * (s_1413 - s_0386 * s_1012 / Keq_0144) / Km1413_0144 / (1 + s_1413 / Km1413_0144 + (1 + s_0386 / Km0386_0144) * (1 + s_1012 / Km1012_0144) - 1))+1.0 * (cell * Vmax_0858 * (s_1351 * s_1416 - s_1343 * s_1413 / Keq_0858) / (Km1351_0858 * Km1416_0858) / ((1 + s_1351 / Km1351_0858) * (1 + s_1416 / Km1416_0858) + (1 + s_1343 / Km1343_0858) * (1 + s_1413 / Km1413_0858) - 1))+1.0 * (cell * Vmax_0900 * (s_1342 * s_1416 - s_1346 * s_1413 / Keq_0900) / (Km1342_0900 * Km1416_0900) / ((1 + s_1342 / Km1342_0900) * (1 + s_1416 / Km1416_0900) + (1 + s_1346 / Km1346_0900) * (1 + s_1413 / Km1413_0900) - 1))+1.0 * (cell * Vmax_0901 * (s_1343 * s_1416 - s_1342 * s_1413 / Keq_0901) / (Km1343_0901 * Km1416_0901) / ((1 + s_1343 / Km1343_0901) * (1 + s_1416 / Km1416_0901) + (1 + s_1342 / Km1342_0901) * (1 + s_1413 / Km1413_0901) - 1))+1.0 * (cell * Vmax_0986 * (s_1416 * s_1569 - s_0700 * s_1413 / Keq_0986) / (Km1416_0986 * Km1569_0986) / ((1 + s_1416 / Km1416_0986) * (1 + s_1569 / Km1569_0986) + (1 + s_0700 / Km0700_0986) * (1 + s_1413 / Km1413_0986) - 1)),
D(s_0782) ~ +1.0 * (cell * Vmax_0514 * (s_0434 * s_0999 * s_1565 - s_0423 * s_0633 * s_0782 * s_0991 / Keq_0514) / (Km0434_0514 * Km0999_0514 * Km1565_0514) / ((1 + s_0434 / Km0434_0514) * (1 + s_0999 / Km0999_0514) * (1 + s_1565 / Km1565_0514) + (1 + s_0423 / Km0423_0514) * (1 + s_0633 / Km0633_0514) * (1 + s_0782 / Km0782_0514) * (1 + s_0991 / Km0991_0514) - 1))-1.0 * (cell * Vmax_0528 * (s_0434 * s_0782 - s_0394 * s_0739 / Keq_0528) / (Km0434_0528 * Km0782_0528) / ((1 + s_0434 / Km0434_0528) * (1 + s_0782 / Km0782_0528) + (1 + s_0394 / Km0394_0528) * (1 + s_0739 / Km0739_0528) - 1))-1.0 * (cell * Vmax_0529 * (s_0586 * s_0782 - s_0582 * s_0739 / Keq_0529) / (Km0586_0529 * Km0782_0529) / ((1 + s_0586 / Km0586_0529) * (1 + s_0782 / Km0782_0529) + (1 + s_0582 / Km0582_0529) * (1 + s_0739 / Km0739_0529) - 1))-0.051 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_0325) ~ -1.0 * (cell * Vmax_0499 * (s_0120 * s_0325 - s_0301 * s_1487 / Keq_0499) / (Km0120_0499 * Km0325_0499) / ((1 + s_0120 / Km0120_0499) * (1 + s_0325 / Km0325_0499) + (1 + s_0301 / Km0301_0499) * (1 + s_1487 / Km1487_0499) - 1))+1.0 * (cell * Vmax_0914 * (s_0327 * s_0434 * s_1003 - s_0325 * s_0394 * s_1322 / Keq_0914) / (Km0327_0914 * Km0434_0914 * Km1003_0914) / ((1 + s_0327 / Km0327_0914) * (1 + s_0434 / Km0434_0914) * (1 + s_1003 / Km1003_0914) + (1 + s_0325 / Km0325_0914) * (1 + s_0394 / Km0394_0914) * (1 + s_1322 / Km1322_0914) - 1)),
D(s_0298) ~ -1.0 * (cell * Vmax_0154 * (s_0298 * s_0434 - s_0201 * s_0394 / Keq_0154) / (Km0298_0154 * Km0434_0154) / ((1 + s_0298 / Km0298_0154) * (1 + s_0434 / Km0434_0154) + (1 + s_0201 / Km0201_0154) * (1 + s_0394 / Km0394_0154) - 1))+1.0 * (cell * Vmax_1026 * (s_0394 * s_1467 - s_0298 * s_1322 / Keq_1026) / (Km0394_1026 * Km1467_1026) / ((1 + s_0394 / Km0394_1026) * (1 + s_1467 / Km1467_1026) + (1 + s_0298 / Km0298_1026) * (1 + s_1322 / Km1322_1026) - 1)),
D(s_0526) ~ +1.0 * (cell * Vmax_0792 * (s_0467 - s_0526 * s_1322 / Keq_0792) / Km0467_0792 / (1 + s_0467 / Km0467_0792 + (1 + s_0526 / Km0526_0792) * (1 + s_1322 / Km1322_0792) - 1))+1.0 * (cell * Vmax_0874 * (s_0471 * s_1153 - s_0089 * s_0526 / Keq_0874) / (Km0471_0874 * Km1153_0874) / ((1 + s_0471 / Km0471_0874) * (1 + s_1153 / Km1153_0874) + (1 + s_0089 / Km0089_0874) * (1 + s_0526 / Km0526_0874) - 1))+1.0 * (cell * Vmax_0880 * (s_0471 * s_1039 - s_0526 * s_1337 / Keq_0880) / (Km0471_0880 * Km1039_0880) / ((1 + s_0471 / Km0471_0880) * (1 + s_1039 / Km1039_0880) + (1 + s_0526 / Km0526_0880) * (1 + s_1337 / Km1337_0880) - 1))-0.05 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_1151) ~ -1.0 * (cell * Vmax_0688 * (s_1151 * s_1212 - s_0062 * s_1207 / Keq_0688) / (Km1151_0688 * Km1212_0688) / ((1 + s_1151 / Km1151_0688) * (1 + s_1212 / Km1212_0688) + (1 + s_0062 / Km0062_0688) * (1 + s_1207 / Km1207_0688) - 1))-1.0 * (cell * Vmax_0697 * (s_0750 * s_1151 - s_0033 / Keq_0697) / (Km0750_0697 * Km1151_0697) / ((1 + s_0750 / Km0750_0697) * (1 + s_1151 / Km1151_0697) + 1 + s_0033 / Km0033_0697 - 1))+1.0 * (cell * Vmax_1936 * (s_0629 - s_1151 * s_1322 / Keq_1936) / Km0629_1936 / (1 + s_0629 / Km0629_1936 + (1 + s_1151 / Km1151_1936) * (1 + s_1322 / Km1322_1936) - 1)),
D(s_0165) ~ +1.0 * (cell * Vmax_0023 * (s_0162 - s_0165 / Keq_0023) / Km0162_0023 / (1 + s_0162 / Km0162_0023 + 1 + s_0165 / Km0165_0023 - 1))-1.0 * (cell * Vmax_0060 * (s_0165 - s_0009 / Keq_0060) / Km0165_0060 / (1 + s_0165 / Km0165_0060 + 1 + s_0009 / Km0009_0060 - 1)),
D(s_0291) ~ +1.0 * (cell * Vmax_0029 * (s_0010 - s_0291 * s_0456 / Keq_0029) / Km0010_0029 / (1 + s_0010 / Km0010_0029 + (1 + s_0291 / Km0291_0029) * (1 + s_0456 / Km0456_0029) - 1))-1.0 * (cell * Vmax_0699 * (s_0291 * s_0991 - s_0180 * s_1021 / Keq_0699) / (Km0291_0699 * Km0991_0699) / ((1 + s_0291 / Km0291_0699) * (1 + s_0991 / Km0991_0699) + (1 + s_0180 / Km0180_0699) * (1 + s_1021 / Km1021_0699) - 1)),
D(s_0953) ~ +1.0 * (cell * Vmax_0018 * (s_0176 * s_0991 - s_0180 * s_0953 / Keq_0018) / (Km0176_0018 * Km0991_0018) / ((1 + s_0176 / Km0176_0018) * (1 + s_0991 / Km0991_0018) + (1 + s_0180 / Km0180_0018) * (1 + s_0953 / Km0953_0018) - 1))-1.0 * (cell * Vmax_0678 * (s_0953 * s_1212 - s_0959 * s_1207 / Keq_0678) / (Km0953_0678 * Km1212_0678) / ((1 + s_0953 / Km0953_0678) * (1 + s_1212 / Km1212_0678) + (1 + s_0959 / Km0959_0678) * (1 + s_1207 / Km1207_0678) - 1)),
D(s_0419) ~ +1.0 * (cell * Vmax_0014 * (s_0142 - s_0313 * s_0419 / Keq_0014) / Km0142_0014 / (1 + s_0142 / Km0142_0014 + (1 + s_0313 / Km0313_0014) * (1 + s_0419 / Km0419_0014) - 1))-1.0 * (cell * Vmax_0307 * (s_0419 * s_0434 * s_1559 - s_0394 * s_0539 * s_1322 / Keq_0307) / (Km0419_0307 * Km0434_0307 * Km1559_0307) / ((1 + s_0419 / Km0419_0307) * (1 + s_0434 / Km0434_0307) * (1 + s_1559 / Km1559_0307) + (1 + s_0394 / Km0394_0307) * (1 + s_0539 / Km0539_0307) * (1 + s_1322 / Km1322_0307) - 1))+1.0 * (cell * Vmax_0310 * (s_0980 - s_0178 * s_0419 * s_0981 / Keq_0310) / Km0980_0310 / (1 + s_0980 / Km0980_0310 + (1 + s_0178 / Km0178_0310) * (1 + s_0419 / Km0419_0310) * (1 + s_0981 / Km0981_0310) - 1))-1.0 * (cell * Vmax_0326 * (s_0419 * s_0654 - s_0589 / Keq_0326) / (Km0419_0326 * Km0654_0326) / ((1 + s_0419 / Km0419_0326) * (1 + s_0654 / Km0654_0326) + 1 + s_0589 / Km0589_0326 - 1))-1.0 * (cell * Vmax_0470 * (s_0180 * s_0419 * s_1203 - s_0991 * s_1198 / Keq_0470) / (Km0180_0470 * Km0419_0470 * Km1203_0470) / ((1 + s_0180 / Km0180_0470) * (1 + s_0419 / Km0419_0470) * (1 + s_1203 / Km1203_0470) + (1 + s_0991 / Km0991_0470) * (1 + s_1198 / Km1198_0470) - 1))-1.0 * (cell * Vmax_0471 * (s_0180 * s_0419 * s_1212 - s_0991 * s_1207 / Keq_0471) / (Km0180_0471 * Km0419_0471 * Km1212_0471) / ((1 + s_0180 / Km0180_0471) * (1 + s_0419 / Km0419_0471) * (1 + s_1212 / Km1212_0471) + (1 + s_0991 / Km0991_0471) * (1 + s_1207 / Km1207_0471) - 1))-1.0 * (cell * Vmax_0476 * (s_0419 * s_0434 * s_0991 - s_0394 * s_0999 * s_1322 / Keq_0476) / (Km0419_0476 * Km0434_0476 * Km0991_0476) / ((1 + s_0419 / Km0419_0476) * (1 + s_0434 / Km0434_0476) * (1 + s_0991 / Km0991_0476) + (1 + s_0394 / Km0394_0476) * (1 + s_0999 / Km0999_0476) * (1 + s_1322 / Km1322_0476) - 1))+1.0 * (cell * Vmax_1115 * (s_0420 - s_0419) / Km0420_1115 / (1 + s_0420 / Km0420_1115 + 1 + s_0419 / Km0419_1115 - 1)),
D(s_1107) ~ +1.0 * (cell * Vmax_0362 * (s_0644 - s_0645 * s_1107 / Keq_0362) / Km0644_0362 / (1 + s_0644 / Km0644_0362 + (1 + s_0645 / Km0645_0362) * (1 + s_1107 / Km1107_0362) - 1))-0.821 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_0300) ~ +1.0 * (cell * Vmax_0855 * (s_0302 * s_0434 - s_0300 * s_0394 * s_1322 / Keq_0855) / (Km0302_0855 * Km0434_0855) / ((1 + s_0302 / Km0302_0855) * (1 + s_0434 / Km0434_0855) + (1 + s_0300 / Km0300_0855) * (1 + s_0394 / Km0394_0855) * (1 + s_1322 / Km1322_0855) - 1))-1.0 * (cell * Vmax_0911 * (s_0300 * s_0456 * s_0434 - s_1364 * s_0394 * s_1322 / Keq_0911) / (Km0300_0911 * Km0456_0911 * Km0434_0911) / ((1 + s_0300 / Km0300_0911) * (1 + s_0456 / Km0456_0911) * (1 + s_0434 / Km0434_0911) + (1 + s_1364 / Km1364_0911) * (1 + s_0394 / Km0394_0911) * (1 + s_1322 / Km1322_0911) - 1)),
D(s_1238) ~ +1.0 * (cell * Vmax_0548 * (s_0434 * s_1014 - s_0394 * s_1238 / Keq_0548) / (Km0434_0548 * Km1014_0548) / ((1 + s_0434 / Km0434_0548) * (1 + s_1014 / Km1014_0548) + (1 + s_0394 / Km0394_0548) * (1 + s_1238 / Km1238_0548) - 1))-1.0 * (cell * Vmax_1041 * (s_1238 - s_1045 * s_1322 / Keq_1041) / Km1238_1041 / (1 + s_1238 / Km1238_1041 + (1 + s_1045 / Km1045_1041) * (1 + s_1322 / Km1322_1041) - 1)),
D(s_0550) ~ +1.0 * (cell * Vmax_0563 * (s_0312 * s_0999 - s_0403 * s_0550 * s_0991 / Keq_0563) / (Km0312_0563 * Km0999_0563) / ((1 + s_0312 / Km0312_0563) * (1 + s_0999 / Km0999_0563) + (1 + s_0403 / Km0403_0563) * (1 + s_0550 / Km0550_0563) * (1 + s_0991 / Km0991_0563) - 1))-1.0 * (cell * Vmax_0564 * (s_0550 - s_0207 / Keq_0564) / Km0550_0564 / (1 + s_0550 / Km0550_0564 + 1 + s_0207 / Km0207_0564 - 1)),
D(s_0008) ~ -1.0 * (cell * Vmax_0353 * (s_0008 - s_0056 / Keq_0353) / Km0008_0353 / (1 + s_0008 / Km0008_0353 + 1 + s_0056 / Km0056_0353 - 1))+1.0 * (cell * Vmax_0669 * (s_0039 * s_1212 - s_0008 * s_1207 / Keq_0669) / (Km0039_0669 * Km1212_0669) / ((1 + s_0039 / Km0039_0669) * (1 + s_1212 / Km1212_0669) + (1 + s_0008 / Km0008_0669) * (1 + s_1207 / Km1207_0669) - 1)),
D(s_0340) ~ +1.0 * (cell * Vmax_0091 * (s_0335 - s_0340 / Keq_0091) / Km0335_0091 / (1 + s_0335 / Km0335_0091 + 1 + s_0340 / Km0340_0091 - 1))-1.0 * (cell * Vmax_0889 * (s_0340 * s_1207 - s_0456 * s_0577 * s_1212 / Keq_0889) / (Km0340_0889 * Km1207_0889) / ((1 + s_0340 / Km0340_0889) * (1 + s_1207 / Km1207_0889) + (1 + s_0456 / Km0456_0889) * (1 + s_0577 / Km0577_0889) * (1 + s_1212 / Km1212_0889) - 1)),
D(s_1153) ~ +1.0 * (cell * Vmax_0757 * (s_0126 - s_1153 * s_1322 / Keq_0757) / Km0126_0757 / (1 + s_0126 / Km0126_0757 + (1 + s_1153 / Km1153_0757) * (1 + s_1322 / Km1322_0757) - 1))-1.0 * (cell * Vmax_0874 * (s_0471 * s_1153 - s_0089 * s_0526 / Keq_0874) / (Km0471_0874 * Km1153_0874) / ((1 + s_0471 / Km0471_0874) * (1 + s_1153 / Km1153_0874) + (1 + s_0089 / Km0089_0874) * (1 + s_0526 / Km0526_0874) - 1)),
D(s_1343) ~ +1.0 * (cell * Vmax_0858 * (s_1351 * s_1416 - s_1343 * s_1413 / Keq_0858) / (Km1351_0858 * Km1416_0858) / ((1 + s_1351 / Km1351_0858) * (1 + s_1416 / Km1416_0858) + (1 + s_1343 / Km1343_0858) * (1 + s_1413 / Km1413_0858) - 1))-1.0 * (cell * Vmax_0901 * (s_1343 * s_1416 - s_1342 * s_1413 / Keq_0901) / (Km1343_0901 * Km1416_0901) / ((1 + s_1343 / Km1343_0901) * (1 + s_1416 / Km1416_0901) + (1 + s_1342 / Km1342_0901) * (1 + s_1413 / Km1413_0901) - 1)),
D(s_0991) ~ -1.0 * (cell * Vmax_0012 * (s_0991 * s_1203 - s_0118 * s_1198 / Keq_0012) / (Km0991_0012 * Km1203_0012) / ((1 + s_0991 / Km0991_0012) * (1 + s_1203 / Km1203_0012) + (1 + s_0118 / Km0118_0012) * (1 + s_1198 / Km1198_0012) - 1))-1.0 * (cell * Vmax_0018 * (s_0176 * s_0991 - s_0180 * s_0953 / Keq_0018) / (Km0176_0018 * Km0991_0018) / ((1 + s_0176 / Km0176_0018) * (1 + s_0991 / Km0991_0018) + (1 + s_0180 / Km0180_0018) * (1 + s_0953 / Km0953_0018) - 1))+1.0 * (cell * Vmax_0079 * (s_0301 * s_0434 * s_0999 - s_0302 * s_0394 * s_0991 * s_1322 / Keq_0079) / (Km0301_0079 * Km0434_0079 * Km0999_0079) / ((1 + s_0301 / Km0301_0079) * (1 + s_0434 / Km0434_0079) * (1 + s_0999 / Km0999_0079) + (1 + s_0302 / Km0302_0079) * (1 + s_0394 / Km0394_0079) * (1 + s_0991 / Km0991_0079) * (1 + s_1322 / Km1322_0079) - 1))-1.0 * (cell * Vmax_0118 * (s_0145 * s_0991 - s_0180 * s_1182 / Keq_0118) / (Km0145_0118 * Km0991_0118) / ((1 + s_0145 / Km0145_0118) * (1 + s_0991 / Km0991_0118) + (1 + s_0180 / Km0180_0118) * (1 + s_1182 / Km1182_0118) - 1))+1.0 * (cell * Vmax_0203 * (s_0515 * s_0999 - s_0427 * s_0991 * s_1399 / Keq_0203) / (Km0515_0203 * Km0999_0203) / ((1 + s_0515 / Km0515_0203) * (1 + s_0999 / Km0999_0203) + (1 + s_0427 / Km0427_0203) * (1 + s_0991 / Km0991_0203) * (1 + s_1399 / Km1399_0203) - 1))+1.0 * (cell * Vmax_0211 * (s_0434 * s_0973 * s_0999 - s_0423 * s_0633 * s_0969 * s_0991 / Keq_0211) / (Km0434_0211 * Km0973_0211 * Km0999_0211) / ((1 + s_0434 / Km0434_0211) * (1 + s_0973 / Km0973_0211) * (1 + s_0999 / Km0999_0211) + (1 + s_0423 / Km0423_0211) * (1 + s_0633 / Km0633_0211) * (1 + s_0969 / Km0969_0211) * (1 + s_0991 / Km0991_0211) - 1))-1.0 * (cell * Vmax_0216 * (s_0991 * s_1271 - s_0180 * s_0973 / Keq_0216) / (Km0991_0216 * Km1271_0216) / ((1 + s_0991 / Km0991_0216) * (1 + s_1271 / Km1271_0216) + (1 + s_0180 / Km0180_0216) * (1 + s_0973 / Km0973_0216) - 1))+1.0 * (cell * Vmax_0250 * ((s_0434)^(2) * s_0445 * s_0999 - (s_0394)^(2) * s_0455 * s_0991 * s_1322 / Keq_0250) / ((Km0434_0250)^(2) * Km0445_0250 * Km0999_0250) / ((1 + s_0434 / Km0434_0250)^(2) * (1 + s_0445 / Km0445_0250) * (1 + s_0999 / Km0999_0250) + (1 + s_0394 / Km0394_0250)^(2) * (1 + s_0455 / Km0455_0250) * (1 + s_0991 / Km0991_0250) * (1 + s_1322 / Km1322_0250) - 1))+1.0 * (cell * Vmax_0470 * (s_0180 * s_0419 * s_1203 - s_0991 * s_1198 / Keq_0470) / (Km0180_0470 * Km0419_0470 * Km1203_0470) / ((1 + s_0180 / Km0180_0470) * (1 + s_0419 / Km0419_0470) * (1 + s_1203 / Km1203_0470) + (1 + s_0991 / Km0991_0470) * (1 + s_1198 / Km1198_0470) - 1))+1.0 * (cell * Vmax_0471 * (s_0180 * s_0419 * s_1212 - s_0991 * s_1207 / Keq_0471) / (Km0180_0471 * Km0419_0471 * Km1212_0471) / ((1 + s_0180 / Km0180_0471) * (1 + s_0419 / Km0419_0471) * (1 + s_1212 / Km1212_0471) + (1 + s_0991 / Km0991_0471) * (1 + s_1207 / Km1207_0471) - 1))-1.0 * (cell * Vmax_0476 * (s_0419 * s_0434 * s_0991 - s_0394 * s_0999 * s_1322 / Keq_0476) / (Km0419_0476 * Km0434_0476 * Km0991_0476) / ((1 + s_0419 / Km0419_0476) * (1 + s_0434 / Km0434_0476) * (1 + s_0991 / Km0991_0476) + (1 + s_0394 / Km0394_0476) * (1 + s_0999 / Km0999_0476) * (1 + s_1322 / Km1322_0476) - 1))+1.0 * (cell * Vmax_0514 * (s_0434 * s_0999 * s_1565 - s_0423 * s_0633 * s_0782 * s_0991 / Keq_0514) / (Km0434_0514 * Km0999_0514 * Km1565_0514) / ((1 + s_0434 / Km0434_0514) * (1 + s_0999 / Km0999_0514) * (1 + s_1565 / Km1565_0514) + (1 + s_0423 / Km0423_0514) * (1 + s_0633 / Km0633_0514) * (1 + s_0782 / Km0782_0514) * (1 + s_0991 / Km0991_0514) - 1))-1.0 * (cell * Vmax_0538 * (s_0207 * s_0991 - s_0180 * s_1011 / Keq_0538) / (Km0207_0538 * Km0991_0538) / ((1 + s_0207 / Km0207_0538) * (1 + s_0991 / Km0991_0538) + (1 + s_0180 / Km0180_0538) * (1 + s_1011 / Km1011_0538) - 1))+1.0 * (cell * Vmax_0563 * (s_0312 * s_0999 - s_0403 * s_0550 * s_0991 / Keq_0563) / (Km0312_0563 * Km0999_0563) / ((1 + s_0312 / Km0312_0563) * (1 + s_0999 / Km0999_0563) + (1 + s_0403 / Km0403_0563) * (1 + s_0550 / Km0550_0563) * (1 + s_0991 / Km0991_0563) - 1))-1.0 * (cell * Vmax_0663 * (s_0056 * s_0991 - s_0180 * s_1016 / Keq_0663) / (Km0056_0663 * Km0991_0663) / ((1 + s_0056 / Km0056_0663) * (1 + s_0991 / Km0991_0663) + (1 + s_0180 / Km0180_0663) * (1 + s_1016 / Km1016_0663) - 1))-1.0 * (cell * Vmax_0674 * (s_0991 * s_1399 - s_0180 * s_0955 / Keq_0674) / (Km0991_0674 * Km1399_0674) / ((1 + s_0991 / Km0991_0674) * (1 + s_1399 / Km1399_0674) + (1 + s_0180 / Km0180_0674) * (1 + s_0955 / Km0955_0674) - 1))-1.0 * (cell * Vmax_0699 * (s_0291 * s_0991 - s_0180 * s_1021 / Keq_0699) / (Km0291_0699 * Km0991_0699) / ((1 + s_0291 / Km0291_0699) * (1 + s_0991 / Km0991_0699) + (1 + s_0180 / Km0180_0699) * (1 + s_1021 / Km1021_0699) - 1))-1.0 * (cell * Vmax_0818 * (s_0991 * s_1182 - s_1192 * s_1266 / Keq_0818) / (Km0991_0818 * Km1182_0818) / ((1 + s_0991 / Km0991_0818) * (1 + s_1182 / Km1182_0818) + (1 + s_1192 / Km1192_0818) * (1 + s_1266 / Km1266_0818) - 1))-1.0 * (cell * Vmax_0851 * (s_0951 * s_0991 - s_0180 * s_1032 / Keq_0851) / (Km0951_0851 * Km0991_0851) / ((1 + s_0951 / Km0951_0851) * (1 + s_0991 / Km0991_0851) + (1 + s_0180 / Km0180_0851) * (1 + s_1032 / Km1032_0851) - 1))+1.0 * (cell * Vmax_0915 * (s_0999 * s_1386 - s_0327 * s_0633 * s_0991 / Keq_0915) / (Km0999_0915 * Km1386_0915) / ((1 + s_0999 / Km0999_0915) * (1 + s_1386 / Km1386_0915) + (1 + s_0327 / Km0327_0915) * (1 + s_0633 / Km0633_0915) * (1 + s_0991 / Km0991_0915) - 1))-1.0 * (cell * Vmax_0918 * (s_0258 * s_0991 - s_0180 * s_0259 / Keq_0918) / (Km0258_0918 * Km0991_0918) / ((1 + s_0258 / Km0258_0918) * (1 + s_0991 / Km0991_0918) + (1 + s_0180 / Km0180_0918) * (1 + s_0259 / Km0259_0918) - 1))-1.0 * (cell * Vmax_0989 * (s_0959 * s_0991 * s_1212 - s_1038 * s_1207 / Keq_0989) / (Km0959_0989 * Km0991_0989 * Km1212_0989) / ((1 + s_0959 / Km0959_0989) * (1 + s_0991 / Km0991_0989) * (1 + s_1212 / Km1212_0989) + (1 + s_1038 / Km1038_0989) * (1 + s_1207 / Km1207_0989) - 1))-1.0 * (cell * Vmax_1063 * (s_0204 * s_0991 - s_0180 * s_1051 / Keq_1063) / (Km0204_1063 * Km0991_1063) / ((1 + s_0204 / Km0204_1063) * (1 + s_0991 / Km0991_1063) + (1 + s_0180 / Km0180_1063) * (1 + s_1051 / Km1051_1063) - 1))-1.0 * (cell * Vmax_1087 * (s_0232 * s_0991 - s_0180 * s_1056 / Keq_1087) / (Km0232_1087 * Km0991_1087) / ((1 + s_0232 / Km0232_1087) * (1 + s_0991 / Km0991_1087) + (1 + s_0180 / Km0180_1087) * (1 + s_1056 / Km1056_1087) - 1))-0.268 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_0739) ~ +1.0 * (cell * Vmax_0153 * (s_0785 * s_0849 * s_0973 - s_0393 * s_0739 * s_1322 / Keq_0153) / (Km0785_0153 * Km0849_0153 * Km0973_0153) / ((1 + s_0785 / Km0785_0153) * (1 + s_0849 / Km0849_0153) * (1 + s_0973 / Km0973_0153) + (1 + s_0393 / Km0393_0153) * (1 + s_0739 / Km0739_0153) * (1 + s_1322 / Km1322_0153) - 1))+1.0 * (cell * Vmax_0361 * (s_0645 * s_0743 - s_0644 * s_0739 / Keq_0361) / (Km0645_0361 * Km0743_0361) / ((1 + s_0645 / Km0645_0361) * (1 + s_0743 / Km0743_0361) + (1 + s_0644 / Km0644_0361) * (1 + s_0739 / Km0739_0361) - 1))+1.0 * (cell * Vmax_0528 * (s_0434 * s_0782 - s_0394 * s_0739 / Keq_0528) / (Km0434_0528 * Km0782_0528) / ((1 + s_0434 / Km0434_0528) * (1 + s_0782 / Km0782_0528) + (1 + s_0394 / Km0394_0528) * (1 + s_0739 / Km0739_0528) - 1))+1.0 * (cell * Vmax_0529 * (s_0586 * s_0782 - s_0582 * s_0739 / Keq_0529) / (Km0586_0529 * Km0782_0529) / ((1 + s_0586 / Km0586_0529) * (1 + s_0782 / Km0782_0529) + (1 + s_0582 / Km0582_0529) * (1 + s_0739 / Km0739_0529) - 1))-1.0 * (cell * Vmax_0800 * (s_0434 * s_0739 - s_0394 * s_0785 / Keq_0800) / (Km0434_0800 * Km0739_0800) / ((1 + s_0434 / Km0434_0800) * (1 + s_0739 / Km0739_0800) + (1 + s_0394 / Km0394_0800) * (1 + s_0785 / Km0785_0800) - 1))-1.0 * (cell * Vmax_0978 * (s_0739 * s_1616 - s_0613 * s_1620 / Keq_0978) / (Km0739_0978 * Km1616_0978) / ((1 + s_0739 / Km0739_0978) * (1 + s_1616 / Km1616_0978) + (1 + s_0613 / Km0613_0978) * (1 + s_1620 / Km1620_0978) - 1)),
D(s_1101) ~ +1.0 * (cell * Vmax_0108 * (s_0373 * s_0434 * s_0445 - s_0394 * s_1101 * s_1322 / Keq_0108) / (Km0373_0108 * Km0434_0108 * Km0445_0108) / ((1 + s_0373 / Km0373_0108) * (1 + s_0434 / Km0434_0108) * (1 + s_0445 / Km0445_0108) + (1 + s_0394 / Km0394_0108) * (1 + s_1101 / Km1101_0108) * (1 + s_1322 / Km1322_0108) - 1))-1.0 * (cell * Vmax_0386 * (s_0595 * s_1101 * (s_1212)^(2) - s_0456 * s_0529 * s_1065 * (s_1207)^(2) / Keq_0386) / (Km0595_0386 * Km1101_0386 * (Km1212_0386)^(2)) / ((1 + s_0595 / Km0595_0386) * (1 + s_1101 / Km1101_0386) * (1 + s_1212 / Km1212_0386)^(2) + (1 + s_0456 / Km0456_0386) * (1 + s_0529 / Km0529_0386) * (1 + s_1065 / Km1065_0386) * (1 + s_1207 / Km1207_0386)^(2) - 1))-1.0 * (cell * Vmax_0387 * (s_1065 * s_1101 * (s_1212)^(2) - s_0456 * s_0529 * s_1161 * (s_1207)^(2) / Keq_0387) / (Km1065_0387 * Km1101_0387 * (Km1212_0387)^(2)) / ((1 + s_1065 / Km1065_0387) * (1 + s_1101 / Km1101_0387) * (1 + s_1212 / Km1212_0387)^(2) + (1 + s_0456 / Km0456_0387) * (1 + s_0529 / Km0529_0387) * (1 + s_1161 / Km1161_0387) * (1 + s_1207 / Km1207_0387)^(2) - 1))-1.0 * (cell * Vmax_0389 * (s_1101 * s_1161 * (s_1212)^(2) - s_0456 * s_0529 * (s_1207)^(2) * s_1286 / Keq_0389) / (Km1101_0389 * Km1161_0389 * (Km1212_0389)^(2)) / ((1 + s_1101 / Km1101_0389) * (1 + s_1161 / Km1161_0389) * (1 + s_1212 / Km1212_0389)^(2) + (1 + s_0456 / Km0456_0389) * (1 + s_0529 / Km0529_0389) * (1 + s_1207 / Km1207_0389)^(2) * (1 + s_1286 / Km1286_0389) - 1))-1.0 * (cell * Vmax_0391 * (s_1101 * (s_1212)^(2) * s_1286 - s_0456 * s_0529 * (s_1207)^(2) * s_1449 / Keq_0391) / (Km1101_0391 * (Km1212_0391)^(2) * Km1286_0391) / ((1 + s_1101 / Km1101_0391) * (1 + s_1212 / Km1212_0391)^(2) * (1 + s_1286 / Km1286_0391) + (1 + s_0456 / Km0456_0391) * (1 + s_0529 / Km0529_0391) * (1 + s_1207 / Km1207_0391)^(2) * (1 + s_1449 / Km1449_0391) - 1))-3.0 * (cell * Vmax_0393 * ((s_1101)^(3) * (s_1212)^(6) * s_1449 - (s_0456)^(3) * (s_0529)^(3) * s_1084 * (s_1207)^(6) / Keq_0393) / ((Km1101_0393)^(3) * (Km1212_0393)^(6) * Km1449_0393) / ((1 + s_1101 / Km1101_0393)^(3) * (1 + s_1212 / Km1212_0393)^(6) * (1 + s_1449 / Km1449_0393) + (1 + s_0456 / Km0456_0393)^(3) * (1 + s_0529 / Km0529_0393)^(3) * (1 + s_1084 / Km1084_0393) * (1 + s_1207 / Km1207_0393)^(6) - 1))-1.0 * (cell * Vmax_0397 * (s_1101 * (s_1212)^(2) * s_1255 - s_0456 * s_0529 * s_0602 * (s_1207)^(2) / Keq_0397) / (Km1101_0397 * (Km1212_0397)^(2) * Km1255_0397) / ((1 + s_1101 / Km1101_0397) * (1 + s_1212 / Km1212_0397)^(2) * (1 + s_1255 / Km1255_0397) + (1 + s_0456 / Km0456_0397) * (1 + s_0529 / Km0529_0397) * (1 + s_0602 / Km0602_0397) * (1 + s_1207 / Km1207_0397)^(2) - 1))-3.0 * (cell * Vmax_0398 * (s_0373 * (s_1101)^(3) * (s_1212)^(6) - (s_0456)^(3) * (s_0529)^(3) * (s_1207)^(6) * s_1255 / Keq_0398) / (Km0373_0398 * (Km1101_0398)^(3) * (Km1212_0398)^(6)) / ((1 + s_0373 / Km0373_0398) * (1 + s_1101 / Km1101_0398)^(3) * (1 + s_1212 / Km1212_0398)^(6) + (1 + s_0456 / Km0456_0398)^(3) * (1 + s_0529 / Km0529_0398)^(3) * (1 + s_1207 / Km1207_0398)^(6) * (1 + s_1255 / Km1255_0398) - 1))-1.0 * (cell * Vmax_0432 * (s_0602 * s_1101 * (s_1212)^(2) - s_0456 * s_0529 * s_1073 * (s_1207)^(2) / Keq_0432) / (Km0602_0432 * Km1101_0432 * (Km1212_0432)^(2)) / ((1 + s_0602 / Km0602_0432) * (1 + s_1101 / Km1101_0432) * (1 + s_1212 / Km1212_0432)^(2) + (1 + s_0456 / Km0456_0432) * (1 + s_0529 / Km0529_0432) * (1 + s_1073 / Km1073_0432) * (1 + s_1207 / Km1207_0432)^(2) - 1))-1.0 * (cell * Vmax_0433 * (s_1073 * s_1101 * (s_1212)^(2) - s_0456 * s_0529 * s_1176 * (s_1207)^(2) / Keq_0433) / (Km1073_0433 * Km1101_0433 * (Km1212_0433)^(2)) / ((1 + s_1073 / Km1073_0433) * (1 + s_1101 / Km1101_0433) * (1 + s_1212 / Km1212_0433)^(2) + (1 + s_0456 / Km0456_0433) * (1 + s_0529 / Km0529_0433) * (1 + s_1176 / Km1176_0433) * (1 + s_1207 / Km1207_0433)^(2) - 1))-1.0 * (cell * Vmax_0434 * (s_1101 * s_1176 * (s_1212)^(2) - s_0456 * s_0529 * (s_1207)^(2) * s_1302 / Keq_0434) / (Km1101_0434 * Km1176_0434 * (Km1212_0434)^(2)) / ((1 + s_1101 / Km1101_0434) * (1 + s_1176 / Km1176_0434) * (1 + s_1212 / Km1212_0434)^(2) + (1 + s_0456 / Km0456_0434) * (1 + s_0529 / Km0529_0434) * (1 + s_1207 / Km1207_0434)^(2) * (1 + s_1302 / Km1302_0434) - 1))-1.0 * (cell * Vmax_0435 * (s_1101 * (s_1212)^(2) * s_1302 - s_0456 * s_0529 * (s_1207)^(2) * s_1454 / Keq_0435) / (Km1101_0435 * (Km1212_0435)^(2) * Km1302_0435) / ((1 + s_1101 / Km1101_0435) * (1 + s_1212 / Km1212_0435)^(2) * (1 + s_1302 / Km1302_0435) + (1 + s_0456 / Km0456_0435) * (1 + s_0529 / Km0529_0435) * (1 + s_1207 / Km1207_0435)^(2) * (1 + s_1454 / Km1454_0435) - 1)),
D(s_0033) ~ -1.0 * (cell * Vmax_0553 * (s_0033 - s_0025 * s_0750 / Keq_0553) / Km0033_0553 / (1 + s_0033 / Km0033_0553 + (1 + s_0025 / Km0025_0553) * (1 + s_0750 / Km0750_0553) - 1))+1.0 * (cell * Vmax_0697 * (s_0750 * s_1151 - s_0033 / Keq_0697) / (Km0750_0697 * Km1151_0697) / ((1 + s_0750 / Km0750_0697) * (1 + s_1151 / Km1151_0697) + 1 + s_0033 / Km0033_0697 - 1)),
D(s_0565) ~ -1.0 * (cell * Vmax_1166 * (s_0565 - s_0563) / Km0565_1166 / (1 + s_0565 / Km0565_1166 + 1 + s_0563 / Km0563_1166 - 1)),
D(s_0025) ~ -1.0 * (cell * Vmax_0001 * (s_0025 * (s_0709)^(2) - (s_0710)^(2) * s_1399 / Keq_0001) / (Km0025_0001 * (Km0709_0001)^(2)) / ((1 + s_0025 / Km0025_0001) * (1 + s_0709 / Km0709_0001)^(2) + (1 + s_0710 / Km0710_0001)^(2) * (1 + s_1399 / Km1399_0001) - 1))+1.0 * (cell * Vmax_0553 * (s_0033 - s_0025 * s_0750 / Keq_0553) / Km0033_0553 / (1 + s_0033 / Km0033_0553 + (1 + s_0025 / Km0025_0553) * (1 + s_0750 / Km0750_0553) - 1)),
D(s_0178) ~ -1.0 * (cell * Vmax_0016 * (s_0178 * s_1399 - s_0039 * s_0456 / Keq_0016) / (Km0178_0016 * Km1399_0016) / ((1 + s_0178 / Km0178_0016) * (1 + s_1399 / Km1399_0016) + (1 + s_0039 / Km0039_0016) * (1 + s_0456 / Km0456_0016) - 1))+1.0 * (cell * Vmax_0310 * (s_0980 - s_0178 * s_0419 * s_0981 / Keq_0310) / Km0980_0310 / (1 + s_0980 / Km0980_0310 + (1 + s_0178 / Km0178_0310) * (1 + s_0419 / Km0419_0310) * (1 + s_0981 / Km0981_0310) - 1)),
D(s_1025) ~ +1.0 * (cell * Vmax_0988 * (s_1038 * s_1198 - s_0180 * s_1025 * s_1203 / Keq_0988) / (Km1038_0988 * Km1198_0988) / ((1 + s_1038 / Km1038_0988) * (1 + s_1198 / Km1198_0988) + (1 + s_0180 / Km0180_0988) * (1 + s_1025 / Km1025_0988) * (1 + s_1203 / Km1203_0988) - 1))-0.239 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_0493) ~ +1.0 * (cell * Vmax_0267 * (s_0481 * s_1212 * s_1275 - s_0493 * s_1207 / Keq_0267) / (Km0481_0267 * Km1212_0267 * Km1275_0267) / ((1 + s_0481 / Km0481_0267) * (1 + s_1212 / Km1212_0267) * (1 + s_1275 / Km1275_0267) + (1 + s_0493 / Km0493_0267) * (1 + s_1207 / Km1207_0267) - 1))-1.0 * (cell * Vmax_0269 * (s_0493 * s_1212 * s_1275 - s_0499 * s_1207 / Keq_0269) / (Km0493_0269 * Km1212_0269 * Km1275_0269) / ((1 + s_0493 / Km0493_0269) * (1 + s_1212 / Km1212_0269) * (1 + s_1275 / Km1275_0269) + (1 + s_0499 / Km0499_0269) * (1 + s_1207 / Km1207_0269) - 1)),
D(s_0943) ~ -1.0 * (cell * Vmax_0355 * (s_0943 * s_1376 - s_0633 * s_0745 / Keq_0355) / (Km0943_0355 * Km1376_0355) / ((1 + s_0943 / Km0943_0355) * (1 + s_1376 / Km1376_0355) + (1 + s_0633 / Km0633_0355) * (1 + s_0745 / Km0745_0355) - 1))-1.0 * (cell * Vmax_0462 * (s_0745 * s_0943 - s_0190 * s_0633 / Keq_0462) / (Km0745_0462 * Km0943_0462) / ((1 + s_0745 / Km0745_0462) * (1 + s_0943 / Km0943_0462) + (1 + s_0190 / Km0190_0462) * (1 + s_0633 / Km0633_0462) - 1))-1.0 * (cell * Vmax_0667 * (s_0943 - s_1376 / Keq_0667) / Km0943_0667 / (1 + s_0943 / Km0943_0667 + 1 + s_1376 / Km1376_0667 - 1))+1.0 * (cell * Vmax_0739 * (s_0018 * s_0434 - s_0394 * s_0456 * s_0943 * s_1322 / Keq_0739) / (Km0018_0739 * Km0434_0739) / ((1 + s_0018 / Km0018_0739) * (1 + s_0434 / Km0434_0739) + (1 + s_0394 / Km0394_0739) * (1 + s_0456 / Km0456_0739) * (1 + s_0943 / Km0943_0739) * (1 + s_1322 / Km1322_0739) - 1)),
D(s_0016) ~ +1.0 * (cell * Vmax_0096 * (s_0146 * s_1212 - s_0016 * s_1207 / Keq_0096) / (Km0146_0096 * Km1212_0096) / ((1 + s_0146 / Km0146_0096) * (1 + s_1212 / Km1212_0096) + (1 + s_0016 / Km0016_0096) * (1 + s_1207 / Km1207_0096) - 1))-1.0 * (cell * Vmax_0352 * (s_0016 - s_0232 / Keq_0352) / Km0016_0352 / (1 + s_0016 / Km0016_0352 + 1 + s_0232 / Km0232_0352 - 1)),
D(s_0204) ~ +1.0 * (cell * Vmax_0939 * (s_1207 * s_1377 - s_0204 * s_0456 * s_1212 / Keq_0939) / (Km1207_0939 * Km1377_0939) / ((1 + s_1207 / Km1207_0939) * (1 + s_1377 / Km1377_0939) + (1 + s_0204 / Km0204_0939) * (1 + s_0456 / Km0456_0939) * (1 + s_1212 / Km1212_0939) - 1))-1.0 * (cell * Vmax_1063 * (s_0204 * s_0991 - s_0180 * s_1051 / Keq_1063) / (Km0204_1063 * Km0991_1063) / ((1 + s_0204 / Km0204_1063) * (1 + s_0991 / Km0991_1063) + (1 + s_0180 / Km0180_1063) * (1 + s_1051 / Km1051_1063) - 1)),
D(s_0010) ~ -1.0 * (cell * Vmax_0029 * (s_0010 - s_0291 * s_0456 / Keq_0029) / Km0010_0029 / (1 + s_0010 / Km0010_0029 + (1 + s_0291 / Km0291_0029) * (1 + s_0456 / Km0456_0029) - 1))+1.0 * (cell * Vmax_0061 * (s_0009 * s_1198 - s_0010 * s_1203 / Keq_0061) / (Km0009_0061 * Km1198_0061) / ((1 + s_0009 / Km0009_0061) * (1 + s_1198 / Km1198_0061) + (1 + s_0010 / Km0010_0061) * (1 + s_1203 / Km1203_0061) - 1)),
D(s_0999) ~ -1.0 * (cell * Vmax_0079 * (s_0301 * s_0434 * s_0999 - s_0302 * s_0394 * s_0991 * s_1322 / Keq_0079) / (Km0301_0079 * Km0434_0079 * Km0999_0079) / ((1 + s_0301 / Km0301_0079) * (1 + s_0434 / Km0434_0079) * (1 + s_0999 / Km0999_0079) + (1 + s_0302 / Km0302_0079) * (1 + s_0394 / Km0394_0079) * (1 + s_0991 / Km0991_0079) * (1 + s_1322 / Km1322_0079) - 1))-1.0 * (cell * Vmax_0203 * (s_0515 * s_0999 - s_0427 * s_0991 * s_1399 / Keq_0203) / (Km0515_0203 * Km0999_0203) / ((1 + s_0515 / Km0515_0203) * (1 + s_0999 / Km0999_0203) + (1 + s_0427 / Km0427_0203) * (1 + s_0991 / Km0991_0203) * (1 + s_1399 / Km1399_0203) - 1))-1.0 * (cell * Vmax_0211 * (s_0434 * s_0973 * s_0999 - s_0423 * s_0633 * s_0969 * s_0991 / Keq_0211) / (Km0434_0211 * Km0973_0211 * Km0999_0211) / ((1 + s_0434 / Km0434_0211) * (1 + s_0973 / Km0973_0211) * (1 + s_0999 / Km0999_0211) + (1 + s_0423 / Km0423_0211) * (1 + s_0633 / Km0633_0211) * (1 + s_0969 / Km0969_0211) * (1 + s_0991 / Km0991_0211) - 1))-1.0 * (cell * Vmax_0250 * ((s_0434)^(2) * s_0445 * s_0999 - (s_0394)^(2) * s_0455 * s_0991 * s_1322 / Keq_0250) / ((Km0434_0250)^(2) * Km0445_0250 * Km0999_0250) / ((1 + s_0434 / Km0434_0250)^(2) * (1 + s_0445 / Km0445_0250) * (1 + s_0999 / Km0999_0250) + (1 + s_0394 / Km0394_0250)^(2) * (1 + s_0455 / Km0455_0250) * (1 + s_0991 / Km0991_0250) * (1 + s_1322 / Km1322_0250) - 1))+1.0 * (cell * Vmax_0476 * (s_0419 * s_0434 * s_0991 - s_0394 * s_0999 * s_1322 / Keq_0476) / (Km0419_0476 * Km0434_0476 * Km0991_0476) / ((1 + s_0419 / Km0419_0476) * (1 + s_0434 / Km0434_0476) * (1 + s_0991 / Km0991_0476) + (1 + s_0394 / Km0394_0476) * (1 + s_0999 / Km0999_0476) * (1 + s_1322 / Km1322_0476) - 1))-1.0 * (cell * Vmax_0514 * (s_0434 * s_0999 * s_1565 - s_0423 * s_0633 * s_0782 * s_0991 / Keq_0514) / (Km0434_0514 * Km0999_0514 * Km1565_0514) / ((1 + s_0434 / Km0434_0514) * (1 + s_0999 / Km0999_0514) * (1 + s_1565 / Km1565_0514) + (1 + s_0423 / Km0423_0514) * (1 + s_0633 / Km0633_0514) * (1 + s_0782 / Km0782_0514) * (1 + s_0991 / Km0991_0514) - 1))-1.0 * (cell * Vmax_0563 * (s_0312 * s_0999 - s_0403 * s_0550 * s_0991 / Keq_0563) / (Km0312_0563 * Km0999_0563) / ((1 + s_0312 / Km0312_0563) * (1 + s_0999 / Km0999_0563) + (1 + s_0403 / Km0403_0563) * (1 + s_0550 / Km0550_0563) * (1 + s_0991 / Km0991_0563) - 1))-1.0 * (cell * Vmax_0915 * (s_0999 * s_1386 - s_0327 * s_0633 * s_0991 / Keq_0915) / (Km0999_0915 * Km1386_0915) / ((1 + s_0999 / Km0999_0915) * (1 + s_1386 / Km1386_0915) + (1 + s_0327 / Km0327_0915) * (1 + s_0633 / Km0633_0915) * (1 + s_0991 / Km0991_0915) - 1))-0.268 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_0423) ~ +1.0 * (cell * Vmax_0032 * (s_0390 - s_0423 * s_1322 / Keq_0032) / Km0390_0032 / (1 + s_0390 / Km0390_0032 + (1 + s_0423 / Km0423_0032) * (1 + s_1322 / Km1322_0032) - 1))+1.0 * (cell * Vmax_0142 * (s_0386 * s_0434 - s_0394 * s_0423 / Keq_0142) / (Km0386_0142 * Km0434_0142) / ((1 + s_0386 / Km0386_0142) * (1 + s_0434 / Km0434_0142) + (1 + s_0394 / Km0394_0142) * (1 + s_0423 / Km0423_0142) - 1))-1.0 * (cell * Vmax_0148 * (s_0423 * s_0434 - (s_0394)^(2) / Keq_0148) / (Km0423_0148 * Km0434_0148) / ((1 + s_0423 / Km0423_0148) * (1 + s_0434 / Km0434_0148) + (1 + s_0394 / Km0394_0148)^(2) - 1))+1.0 * (cell * Vmax_0152 * (s_0393 - s_0423 * s_0725 / Keq_0152) / Km0393_0152 / (1 + s_0393 / Km0393_0152 + (1 + s_0423 / Km0423_0152) * (1 + s_0725 / Km0725_0152) - 1))+1.0 * (cell * Vmax_0208 * (s_0434 * s_0973 * s_0979 - s_0015 * s_0423 * s_0633 / Keq_0208) / (Km0434_0208 * Km0973_0208 * Km0979_0208) / ((1 + s_0434 / Km0434_0208) * (1 + s_0973 / Km0973_0208) * (1 + s_0979 / Km0979_0208) + (1 + s_0015 / Km0015_0208) * (1 + s_0423 / Km0423_0208) * (1 + s_0633 / Km0633_0208) - 1))+1.0 * (cell * Vmax_0211 * (s_0434 * s_0973 * s_0999 - s_0423 * s_0633 * s_0969 * s_0991 / Keq_0211) / (Km0434_0211 * Km0973_0211 * Km0999_0211) / ((1 + s_0434 / Km0434_0211) * (1 + s_0973 / Km0973_0211) * (1 + s_0999 / Km0999_0211) + (1 + s_0423 / Km0423_0211) * (1 + s_0633 / Km0633_0211) * (1 + s_0969 / Km0969_0211) * (1 + s_0991 / Km0991_0211) - 1))-1.0 * (cell * Vmax_0399 * (s_0423 * s_0602 * s_0633 - s_0434 * s_0529 * s_0595 / Keq_0399) / (Km0423_0399 * Km0602_0399 * Km0633_0399) / ((1 + s_0423 / Km0423_0399) * (1 + s_0602 / Km0602_0399) * (1 + s_0633 / Km0633_0399) + (1 + s_0434 / Km0434_0399) * (1 + s_0529 / Km0529_0399) * (1 + s_0595 / Km0595_0399) - 1))-1.0 * (cell * Vmax_0407 * (s_0423 * s_0633 * s_1454 - s_0434 * s_0529 * s_1449 / Keq_0407) / (Km0423_0407 * Km0633_0407 * Km1454_0407) / ((1 + s_0423 / Km0423_0407) * (1 + s_0633 / Km0633_0407) * (1 + s_1454 / Km1454_0407) + (1 + s_0434 / Km0434_0407) * (1 + s_0529 / Km0529_0407) * (1 + s_1449 / Km1449_0407) - 1))+1.0 * (cell * Vmax_0514 * (s_0434 * s_0999 * s_1565 - s_0423 * s_0633 * s_0782 * s_0991 / Keq_0514) / (Km0434_0514 * Km0999_0514 * Km1565_0514) / ((1 + s_0434 / Km0434_0514) * (1 + s_0999 / Km0999_0514) * (1 + s_1565 / Km1565_0514) + (1 + s_0423 / Km0423_0514) * (1 + s_0633 / Km0633_0514) * (1 + s_0782 / Km0782_0514) * (1 + s_0991 / Km0991_0514) - 1))+1.0 * (cell * Vmax_0916 * (s_0434 * s_1408 - s_0423 * s_1386 / Keq_0916) / (Km0434_0916 * Km1408_0916) / ((1 + s_0434 / Km0434_0916) * (1 + s_1408 / Km1408_0916) + (1 + s_0423 / Km0423_0916) * (1 + s_1386 / Km1386_0916) - 1))-0.051 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_0959) ~ +1.0 * (cell * Vmax_0678 * (s_0953 * s_1212 - s_0959 * s_1207 / Keq_0678) / (Km0953_0678 * Km1212_0678) / ((1 + s_0953 / Km0953_0678) * (1 + s_1212 / Km1212_0678) + (1 + s_0959 / Km0959_0678) * (1 + s_1207 / Km1207_0678) - 1))-1.0 * (cell * Vmax_0989 * (s_0959 * s_0991 * s_1212 - s_1038 * s_1207 / Keq_0989) / (Km0959_0989 * Km0991_0989 * Km1212_0989) / ((1 + s_0959 / Km0959_0989) * (1 + s_0991 / Km0991_0989) * (1 + s_1212 / Km1212_0989) + (1 + s_1038 / Km1038_0989) * (1 + s_1207 / Km1207_0989) - 1)),
D(s_0076) ~ -1.0 * (cell * Vmax_0566 * (s_0076 - s_0086 * s_0456 / Keq_0566) / Km0076_0566 / (1 + s_0076 / Km0076_0566 + (1 + s_0086 / Km0086_0566) * (1 + s_0456 / Km0456_0566) - 1))+1.0 * (cell * Vmax_0913 * (s_1187 - s_0076 / Keq_0913) / Km1187_0913 / (1 + s_1187 / Km1187_0913 + 1 + s_0076 / Km0076_0913 - 1)),
D(s_0584) ~ +1.0 * (cell * Vmax_1729 * (s_0394 * s_0582 - s_0434 * s_0584 / Keq_1729) / (Km0394_1729 * Km0582_1729) / ((1 + s_0394 / Km0394_1729) * (1 + s_0582 / Km0582_1729) + (1 + s_0434 / Km0434_1729) * (1 + s_0584 / Km0584_1729) - 1))-0.00359 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_0644) ~ +1.0 * (cell * Vmax_0361 * (s_0645 * s_0743 - s_0644 * s_0739 / Keq_0361) / (Km0645_0361 * Km0743_0361) / ((1 + s_0645 / Km0645_0361) * (1 + s_0743 / Km0743_0361) + (1 + s_0644 / Km0644_0361) * (1 + s_0739 / Km0739_0361) - 1))-1.0 * (cell * Vmax_0362 * (s_0644 - s_0645 * s_1107 / Keq_0362) / Km0644_0362 / (1 + s_0644 / Km0644_0362 + (1 + s_0645 / Km0645_0362) * (1 + s_1107 / Km1107_0362) - 1)),
D(s_0066) ~ +1.0 * (cell * Vmax_0451 * (s_0725 - s_0066 / Keq_0451) / Km0725_0451 / (1 + s_0725 / Km0725_0451 + 1 + s_0066 / Km0066_0451 - 1))-1.0 * (cell * Vmax_0713 * (s_0066 * s_1198 - s_1203 * s_1271 / Keq_0713) / (Km0066_0713 * Km1198_0713) / ((1 + s_0066 / Km0066_0713) * (1 + s_1198 / Km1198_0713) + (1 + s_1203 / Km1203_0713) * (1 + s_1271 / Km1271_0713) - 1)),
D(s_1014) ~ +1.0 * (cell * Vmax_0547 * (s_0978 * s_1212 - s_1014 * s_1207 / Keq_0547) / (Km0978_0547 * Km1212_0547) / ((1 + s_0978 / Km0978_0547) * (1 + s_1212 / Km1212_0547) + (1 + s_1014 / Km1014_0547) * (1 + s_1207 / Km1207_0547) - 1))-1.0 * (cell * Vmax_0548 * (s_0434 * s_1014 - s_0394 * s_1238 / Keq_0548) / (Km0434_0548 * Km1014_0548) / ((1 + s_0434 / Km0434_0548) * (1 + s_1014 / Km1014_0548) + (1 + s_0394 / Km0394_0548) * (1 + s_1238 / Km1238_0548) - 1))-1.0 * (cell * Vmax_0549 * (s_0373 * s_1014 - s_0529 * s_1233 / Keq_0549) / (Km0373_0549 * Km1014_0549) / ((1 + s_0373 / Km0373_0549) * (1 + s_1014 / Km1014_0549) + (1 + s_0529 / Km0529_0549) * (1 + s_1233 / Km1233_0549) - 1)),
D(s_0481) ~ +1.0 * (cell * Vmax_0259 * (s_0475 * s_1212 * s_1275 - s_0481 * s_1207 / Keq_0259) / (Km0475_0259 * Km1212_0259 * Km1275_0259) / ((1 + s_0475 / Km0475_0259) * (1 + s_1212 / Km1212_0259) * (1 + s_1275 / Km1275_0259) + (1 + s_0481 / Km0481_0259) * (1 + s_1207 / Km1207_0259) - 1))-1.0 * (cell * Vmax_0267 * (s_0481 * s_1212 * s_1275 - s_0493 * s_1207 / Keq_0267) / (Km0481_0267 * Km1212_0267 * Km1275_0267) / ((1 + s_0481 / Km0481_0267) * (1 + s_1212 / Km1212_0267) * (1 + s_1275 / Km1275_0267) + (1 + s_0493 / Km0493_0267) * (1 + s_1207 / Km1207_0267) - 1))+1.0 * (cell * Vmax_0919 * (s_1084 * s_1366 - s_0481 / Keq_0919) / (Km1084_0919 * Km1366_0919) / ((1 + s_1084 / Km1084_0919) * (1 + s_1366 / Km1366_0919) + 1 + s_0481 / Km0481_0919 - 1)),
D(s_0218) ~ -1.0 * (cell * Vmax_0558 * (s_0218 * (s_1212)^(2) - s_0028 * s_0529 * (s_1207)^(2) / Keq_0558) / (Km0218_0558 * (Km1212_0558)^(2)) / ((1 + s_0218 / Km0218_0558) * (1 + s_1212 / Km1212_0558)^(2) + (1 + s_0028 / Km0028_0558) * (1 + s_0529 / Km0529_0558) * (1 + s_1207 / Km1207_0558)^(2) - 1))+1.0 * (cell * Vmax_0559 * (s_0367 * s_0373 - s_0218 * s_0529 / Keq_0559) / (Km0367_0559 * Km0373_0559) / ((1 + s_0367 / Km0367_0559) * (1 + s_0373 / Km0373_0559) + (1 + s_0218 / Km0218_0559) * (1 + s_0529 / Km0529_0559) - 1)),
D(s_0063) ~ -1.0 * (cell * Vmax_0004 * (s_0063 * (s_0709)^(2) - (s_0710)^(2) * s_1399 / Keq_0004) / (Km0063_0004 * (Km0709_0004)^(2)) / ((1 + s_0063 / Km0063_0004) * (1 + s_0709 / Km0709_0004)^(2) + (1 + s_0710 / Km0710_0004)^(2) * (1 + s_1399 / Km1399_0004) - 1))+1.0 * (cell * Vmax_0696 * (s_0062 * s_1198 - s_0063 * s_1203 / Keq_0696) / (Km0062_0696 * Km1198_0696) / ((1 + s_0062 / Km0062_0696) * (1 + s_1198 / Km1198_0696) + (1 + s_0063 / Km0063_0696) * (1 + s_1203 / Km1203_0696) - 1)),
D(s_0295) ~ +1.0 * (cell * Vmax_0215 * (s_0434 * s_0973 - s_0295 * s_0394 / Keq_0215) / (Km0434_0215 * Km0973_0215) / ((1 + s_0434 / Km0434_0215) * (1 + s_0973 / Km0973_0215) + (1 + s_0295 / Km0295_0215) * (1 + s_0394 / Km0394_0215) - 1))-1.0 * (cell * Vmax_0219 * (s_0295 * s_1212 - s_0978 * s_1207 * s_1322 / Keq_0219) / (Km0295_0219 * Km1212_0219) / ((1 + s_0295 / Km0295_0219) * (1 + s_1212 / Km1212_0219) + (1 + s_0978 / Km0978_0219) * (1 + s_1207 / Km1207_0219) * (1 + s_1322 / Km1322_0219) - 1)),
D(s_1006) ~ +1.0 * (cell * Vmax_0536 * (s_1010 * (s_1198)^(2) - s_1006 * (s_1203)^(2) / Keq_0536) / (Km1010_0536 * (Km1198_0536)^(2)) / ((1 + s_1010 / Km1010_0536) * (1 + s_1198 / Km1198_0536)^(2) + (1 + s_1006 / Km1006_0536) * (1 + s_1203 / Km1203_0536)^(2) - 1))-0.075 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_0019) ~ +1.0 * (cell * Vmax_0736 * (s_0028 * s_0539 - s_0019 * s_0467 / Keq_0736) / (Km0028_0736 * Km0539_0736) / ((1 + s_0028 / Km0028_0736) * (1 + s_0539 / Km0539_0736) + (1 + s_0019 / Km0019_0736) * (1 + s_0467 / Km0467_0736) - 1))-1.0 * (cell * Vmax_0904 * (s_0019 * s_0434 - s_0018 * s_0394 / Keq_0904) / (Km0019_0904 * Km0434_0904) / ((1 + s_0019 / Km0019_0904) * (1 + s_0434 / Km0434_0904) + (1 + s_0018 / Km0018_0904) * (1 + s_0394 / Km0394_0904) - 1)),
D(s_0766) ~ +1.0 * (cell * Vmax_1172 * s_0765 / Km0765_1172 / (1 + s_0765 / Km0765_1172)),
D(s_0940) ~ +1.0 * (cell * Vmax_0280 * (s_0516 - s_0940 / Keq_0280) / Km0516_0280 / (1 + s_0516 / Km0516_0280 + 1 + s_0940 / Km0940_0280 - 1))-1.0 * (cell * Vmax_0658 * (s_0940 * s_1198 - s_0180 * s_0456 * s_1203 / Keq_0658) / (Km0940_0658 * Km1198_0658) / ((1 + s_0940 / Km0940_0658) * (1 + s_1198 / Km1198_0658) + (1 + s_0180 / Km0180_0658) * (1 + s_0456 / Km0456_0658) * (1 + s_1203 / Km1203_0658) - 1))-1.0 * (cell * Vmax_0661 * (s_0940 * s_1207 - s_0180 * s_0456 * s_1212 / Keq_0661) / (Km0940_0661 * Km1207_0661) / ((1 + s_0940 / Km0940_0661) * (1 + s_1207 / Km1207_0661) + (1 + s_0180 / Km0180_0661) * (1 + s_0456 / Km0456_0661) * (1 + s_1212 / Km1212_0661) - 1)),
D(s_0582) ~ +1.0 * (cell * Vmax_0529 * (s_0586 * s_0782 - s_0582 * s_0739 / Keq_0529) / (Km0586_0529 * Km0782_0529) / ((1 + s_0586 / Km0586_0529) * (1 + s_0782 / Km0782_0529) + (1 + s_0582 / Km0582_0529) * (1 + s_0739 / Km0739_0529) - 1))+1.0 * (cell * Vmax_0974 * (s_0394 * s_1616 - s_0582 * s_1620 / Keq_0974) / (Km0394_0974 * Km1616_0974) / ((1 + s_0394 / Km0394_0974) * (1 + s_1616 / Km1616_0974) + (1 + s_0582 / Km0582_0974) * (1 + s_1620 / Km1620_0974) - 1))-1.0 * (cell * Vmax_1729 * (s_0394 * s_0582 - s_0434 * s_0584 / Keq_1729) / (Km0394_1729 * Km0582_1729) / ((1 + s_0394 / Km0394_1729) * (1 + s_0582 / Km0582_1729) + (1 + s_0434 / Km0434_1729) * (1 + s_0584 / Km0584_1729) - 1)),
D(s_0595) ~ -1.0 * (cell * Vmax_0386 * (s_0595 * s_1101 * (s_1212)^(2) - s_0456 * s_0529 * s_1065 * (s_1207)^(2) / Keq_0386) / (Km0595_0386 * Km1101_0386 * (Km1212_0386)^(2)) / ((1 + s_0595 / Km0595_0386) * (1 + s_1101 / Km1101_0386) * (1 + s_1212 / Km1212_0386)^(2) + (1 + s_0456 / Km0456_0386) * (1 + s_0529 / Km0529_0386) * (1 + s_1065 / Km1065_0386) * (1 + s_1207 / Km1207_0386)^(2) - 1))+1.0 * (cell * Vmax_0399 * (s_0423 * s_0602 * s_0633 - s_0434 * s_0529 * s_0595 / Keq_0399) / (Km0423_0399 * Km0602_0399 * Km0633_0399) / ((1 + s_0423 / Km0423_0399) * (1 + s_0602 / Km0602_0399) * (1 + s_0633 / Km0633_0399) + (1 + s_0434 / Km0434_0399) * (1 + s_0529 / Km0529_0399) * (1 + s_0595 / Km0595_0399) - 1))-1.8 * (cell * Vmax_1014 * (s_0666 * s_0595 - s_0672 / Keq_1014) / (Km0666_1014 * Km0595_1014) / ((1 + s_0666 / Km0666_1014) * (1 + s_0595 / Km0595_1014) + 1 + s_0672 / Km0672_1014 - 1))-2.6 * (cell * Vmax_1052 * (s_0619 * s_0595 - s_1524 / Keq_1052) / (Km0619_1052 * Km0595_1052) / ((1 + s_0619 / Km0619_1052) * (1 + s_0595 / Km0595_1052) + 1 + s_1524 / Km1524_1052 - 1))-0.000535599999999999 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_0306) ~ -1.0 * (cell * Vmax_0080 * (s_0306 * s_1212 - s_0322 * s_1207 / Keq_0080) / (Km0306_0080 * Km1212_0080) / ((1 + s_0306 / Km0306_0080) * (1 + s_1212 / Km1212_0080) + (1 + s_0322 / Km0322_0080) * (1 + s_1207 / Km1207_0080) - 1))+1.0 * (cell * Vmax_0502 * (s_1039 * s_1487 - s_0306 * s_1003 / Keq_0502) / (Km1039_0502 * Km1487_0502) / ((1 + s_1039 / Km1039_0502) * (1 + s_1487 / Km1487_0502) + (1 + s_0306 / Km0306_0502) * (1 + s_1003 / Km1003_0502) - 1))-1.0 * (cell * Vmax_0731 * (s_0306 * s_1198 - s_0304 * s_1203 / Keq_0731) / (Km0306_0731 * Km1198_0731) / ((1 + s_0306 / Km0306_0731) * (1 + s_1198 / Km1198_0731) + (1 + s_0304 / Km0304_0731) * (1 + s_1203 / Km1203_0731) - 1))-1.0 * (cell * Vmax_0732 * (s_0306 * s_1207 - s_0304 * s_1212 / Keq_0732) / (Km0306_0732 * Km1207_0732) / ((1 + s_0306 / Km0306_0732) * (1 + s_1207 / Km1207_0732) + (1 + s_0304 / Km0304_0732) * (1 + s_1212 / Km1212_0732) - 1))-1.0 * (cell * Vmax_1045 * (s_0306 * s_0654 - s_0625 * s_0649 / Keq_1045) / (Km0306_1045 * Km0654_1045) / ((1 + s_0306 / Km0306_1045) * (1 + s_0654 / Km0654_1045) + (1 + s_0625 / Km0625_1045) * (1 + s_0649 / Km0649_1045) - 1)),
D(s_1059) ~ -1.0 * (cell * Vmax_0317 * (s_1059 * (s_1212)^(3) * (s_1275)^(3) - s_0262 * s_0722 * (s_1207)^(3) / Keq_0317) / (Km1059_0317 * (Km1212_0317)^(3) * (Km1275_0317)^(3)) / ((1 + s_1059 / Km1059_0317) * (1 + s_1212 / Km1212_0317)^(3) * (1 + s_1275 / Km1275_0317)^(3) + (1 + s_0262 / Km0262_0317) * (1 + s_0722 / Km0722_0317) * (1 + s_1207 / Km1207_0317)^(3) - 1))+1.0 * (cell * Vmax_0698 * (s_0037 - s_1059 / Keq_0698) / Km0037_0698 / (1 + s_0037 / Km0037_0698 + 1 + s_1059 / Km1059_0698 - 1))-3.2e-5 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_1559) ~ -1.0 * (cell * Vmax_0307 * (s_0419 * s_0434 * s_1559 - s_0394 * s_0539 * s_1322 / Keq_0307) / (Km0419_0307 * Km0434_0307 * Km1559_0307) / ((1 + s_0419 / Km0419_0307) * (1 + s_0434 / Km0434_0307) * (1 + s_1559 / Km1559_0307) + (1 + s_0394 / Km0394_0307) * (1 + s_0539 / Km0539_0307) * (1 + s_1322 / Km1322_0307) - 1))+1.0 * (cell * Vmax_0811 * (s_0434 * s_1538 - s_0394 * s_1559 / Keq_0811) / (Km0434_0811 * Km1538_0811) / ((1 + s_0434 / Km0434_0811) * (1 + s_1538 / Km1538_0811) + (1 + s_0394 / Km0394_0811) * (1 + s_1559 / Km1559_0811) - 1))-1.0 * (cell * Vmax_0973 * (s_1559 * s_1616 - s_0656 * s_1620 / Keq_0973) / (Km1559_0973 * Km1616_0973) / ((1 + s_1559 / Km1559_0973) * (1 + s_1616 / Km1616_0973) + (1 + s_0656 / Km0656_0973) * (1 + s_1620 / Km1620_0973) - 1))-1.0 * (cell * Vmax_1084 * (s_0567 * s_1559 - s_0633 * s_1543 / Keq_1084) / (Km0567_1084 * Km1559_1084) / ((1 + s_0567 / Km0567_1084) * (1 + s_1559 / Km1559_1084) + (1 + s_0633 / Km0633_1084) * (1 + s_1543 / Km1543_1084) - 1)),
D(s_0625) ~ -1.0 * (cell * Vmax_0344 * (s_0625 * s_1212 - s_1207 * s_1487 / Keq_0344) / (Km0625_0344 * Km1212_0344) / ((1 + s_0625 / Km0625_0344) * (1 + s_1212 / Km1212_0344) + (1 + s_1207 / Km1207_0344) * (1 + s_1487 / Km1487_0344) - 1))+1.0 * (cell * Vmax_1045 * (s_0306 * s_0654 - s_0625 * s_0649 / Keq_1045) / (Km0306_1045 * Km0654_1045) / ((1 + s_0306 / Km0306_1045) * (1 + s_0654 / Km0654_1045) + (1 + s_0625 / Km0625_1045) * (1 + s_0649 / Km0649_1045) - 1)),
D(s_0126) ~ -1.0 * (cell * Vmax_0757 * (s_0126 - s_1153 * s_1322 / Keq_0757) / Km0126_0757 / (1 + s_0126 / Km0126_0757 + (1 + s_1153 / Km1153_0757) * (1 + s_1322 / Km1322_0757) - 1))+1.0 * (cell * Vmax_0758 * (s_0568 - s_0126 / Keq_0758) / Km0568_0758 / (1 + s_0568 / Km0568_0758 + 1 + s_0126 / Km0126_0758 - 1)),
D(s_1346) ~ +1.0 * (cell * Vmax_0900 * (s_1342 * s_1416 - s_1346 * s_1413 / Keq_0900) / (Km1342_0900 * Km1416_0900) / ((1 + s_1342 / Km1342_0900) * (1 + s_1416 / Km1416_0900) + (1 + s_1346 / Km1346_0900) * (1 + s_1413 / Km1413_0900) - 1))-0.00288 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_1616) ~ -1.0 * (cell * Vmax_0550 * (s_0837 * s_1616 - s_1620 / Keq_0550) / (Km0837_0550 * Km1616_0550) / ((1 + s_0837 / Km0837_0550) * (1 + s_1616 / Km1616_0550) + 1 + s_1620 / Km1620_0550 - 1))-1.0 * (cell * Vmax_0883 * (s_0201 * s_1616 - s_0390 * s_1469 * s_1620 / Keq_0883) / (Km0201_0883 * Km1616_0883) / ((1 + s_0201 / Km0201_0883) * (1 + s_1616 / Km1616_0883) + (1 + s_0390 / Km0390_0883) * (1 + s_1469 / Km1469_0883) * (1 + s_1620 / Km1620_0883) - 1))-1.0 * (cell * Vmax_0970 * (s_0434 * s_1616 - s_0586 * s_1620 / Keq_0970) / (Km0434_0970 * Km1616_0970) / ((1 + s_0434 / Km0434_0970) * (1 + s_1616 / Km1616_0970) + (1 + s_0586 / Km0586_0970) * (1 + s_1620 / Km1620_0970) - 1))-1.0 * (cell * Vmax_0973 * (s_1559 * s_1616 - s_0656 * s_1620 / Keq_0973) / (Km1559_0973 * Km1616_0973) / ((1 + s_1559 / Km1559_0973) * (1 + s_1616 / Km1616_0973) + (1 + s_0656 / Km0656_0973) * (1 + s_1620 / Km1620_0973) - 1))-1.0 * (cell * Vmax_0974 * (s_0394 * s_1616 - s_0582 * s_1620 / Keq_0974) / (Km0394_0974 * Km1616_0974) / ((1 + s_0394 / Km0394_0974) * (1 + s_1616 / Km1616_0974) + (1 + s_0582 / Km0582_0974) * (1 + s_1620 / Km1620_0974) - 1))-1.0 * (cell * Vmax_0976 * (s_0467 * s_1616 - s_0587 * s_1620 / Keq_0976) / (Km0467_0976 * Km1616_0976) / ((1 + s_0467 / Km0467_0976) * (1 + s_1616 / Km1616_0976) + (1 + s_0587 / Km0587_0976) * (1 + s_1620 / Km1620_0976) - 1))-1.0 * (cell * Vmax_0978 * (s_0739 * s_1616 - s_0613 * s_1620 / Keq_0978) / (Km0739_0978 * Km1616_0978) / ((1 + s_0739 / Km0739_0978) * (1 + s_1616 / Km1616_0978) + (1 + s_0613 / Km0613_0978) * (1 + s_1620 / Km1620_0978) - 1))+1.0 * (cell * Vmax_1038 * (s_1212 * s_1620 - s_1207 * s_1616 / Keq_1038) / (Km1212_1038 * Km1620_1038) / ((1 + s_1212 / Km1212_1038) * (1 + s_1620 / Km1620_1038) + (1 + s_1207 / Km1207_1038) * (1 + s_1616 / Km1616_1038) - 1)),
D(s_0454) ~ +1.0 * (cell * Vmax_0027 * (s_0835 - s_0454 / Keq_0027) / Km0835_0027 / (1 + s_0835 / Km0835_0027 + 1 + s_0454 / Km0454_0027 - 1))-1.0 * (cell * Vmax_0542 * (s_0454 - s_0836 / Keq_0542) / Km0454_0542 / (1 + s_0454 / Km0454_0542 + 1 + s_0836 / Km0836_0542 - 1)),
D(s_1051) ~ +1.0 * (cell * Vmax_1063 * (s_0204 * s_0991 - s_0180 * s_1051 / Keq_1063) / (Km0204_1063 * Km0991_1063) / ((1 + s_0204 / Km0204_1063) * (1 + s_0991 / Km0991_1063) + (1 + s_0180 / Km0180_1063) * (1 + s_1051 / Km1051_1063) - 1))-0.0965 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_0835) ~ -1.0 * (cell * Vmax_0027 * (s_0835 - s_0454 / Keq_0027) / Km0835_0027 / (1 + s_0835 / Km0835_0027 + 1 + s_0454 / Km0454_0027 - 1))+1.0 * (cell * Vmax_0543 * (s_0180 * s_0373 - s_0529 * s_0835 / Keq_0543) / (Km0180_0543 * Km0373_0543) / ((1 + s_0180 / Km0180_0543) * (1 + s_0373 / Km0373_0543) + (1 + s_0529 / Km0529_0543) * (1 + s_0835 / Km0835_0543) - 1)),
D(s_1191) ~ +1.0 * (cell * Vmax_0115 * (s_0434 * s_1192 - s_0394 * s_1191 / Keq_0115) / (Km0434_0115 * Km1192_0115) / ((1 + s_0434 / Km0434_0115) * (1 + s_1192 / Km1192_0115) + (1 + s_0394 / Km0394_0115) * (1 + s_1191 / Km1191_0115) - 1))-1.0 * (cell * Vmax_0759 * (s_1191 * s_1212 - s_0145 * s_1207 * s_1322 / Keq_0759) / (Km1191_0759 * Km1212_0759) / ((1 + s_1191 / Km1191_0759) * (1 + s_1212 / Km1212_0759) + (1 + s_0145 / Km0145_0759) * (1 + s_1207 / Km1207_0759) * (1 + s_1322 / Km1322_0759) - 1)),
D(s_1386) ~ -1.0 * (cell * Vmax_0202 * (s_0427 * s_1386 - s_0633 * s_1187 / Keq_0202) / (Km0427_0202 * Km1386_0202) / ((1 + s_0427 / Km0427_0202) * (1 + s_1386 / Km1386_0202) + (1 + s_0633 / Km0633_0202) * (1 + s_1187 / Km1187_0202) - 1))-1.0 * (cell * Vmax_0225 * (s_0434 * s_1386 - s_0326 * s_0633 / Keq_0225) / (Km0434_0225 * Km1386_0225) / ((1 + s_0434 / Km0434_0225) * (1 + s_1386 / Km1386_0225) + (1 + s_0326 / Km0326_0225) * (1 + s_0633 / Km0633_0225) - 1))-1.0 * (cell * Vmax_0820 * (s_1269 * s_1386 - s_0633 * s_1270 / Keq_0820) / (Km1269_0820 * Km1386_0820) / ((1 + s_1269 / Km1269_0820) * (1 + s_1386 / Km1386_0820) + (1 + s_0633 / Km0633_0820) * (1 + s_1270 / Km1270_0820) - 1))-1.0 * (cell * Vmax_0915 * (s_0999 * s_1386 - s_0327 * s_0633 * s_0991 / Keq_0915) / (Km0999_0915 * Km1386_0915) / ((1 + s_0999 / Km0999_0915) * (1 + s_1386 / Km1386_0915) + (1 + s_0327 / Km0327_0915) * (1 + s_0633 / Km0633_0915) * (1 + s_0991 / Km0991_0915) - 1))+1.0 * (cell * Vmax_0916 * (s_0434 * s_1408 - s_0423 * s_1386 / Keq_0916) / (Km0434_0916 * Km1408_0916) / ((1 + s_0434 / Km0434_0916) * (1 + s_1408 / Km1408_0916) + (1 + s_0423 / Km0423_0916) * (1 + s_1386 / Km1386_0916) - 1)),
D(s_1545) ~ +1.0 * (cell * Vmax_0821 * (s_1270 - s_0456 * s_1545 / Keq_0821) / Km1270_0821 / (1 + s_1270 / Km1270_0821 + (1 + s_0456 / Km0456_0821) * (1 + s_1545 / Km1545_0821) - 1))-1.0 * (cell * Vmax_1072 * (s_0434 * s_1545 - s_0394 * s_1538 / Keq_1072) / (Km0434_1072 * Km1545_1072) / ((1 + s_0434 / Km0434_1072) * (1 + s_1545 / Km1545_1072) + (1 + s_0394 / Km0394_1072) * (1 + s_1538 / Km1538_1072) - 1))-0.067 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_0710) ~ +2.0 * (cell * Vmax_0001 * (s_0025 * (s_0709)^(2) - (s_0710)^(2) * s_1399 / Keq_0001) / (Km0025_0001 * (Km0709_0001)^(2)) / ((1 + s_0025 / Km0025_0001) * (1 + s_0709 / Km0709_0001)^(2) + (1 + s_0710 / Km0710_0001)^(2) * (1 + s_1399 / Km1399_0001) - 1))+2.0 * (cell * Vmax_0004 * (s_0063 * (s_0709)^(2) - (s_0710)^(2) * s_1399 / Keq_0004) / (Km0063_0004 * (Km0709_0004)^(2)) / ((1 + s_0063 / Km0063_0004) * (1 + s_0709 / Km0709_0004)^(2) + (1 + s_0710 / Km0710_0004)^(2) * (1 + s_1399 / Km1399_0004) - 1))-4.0 * (cell * Vmax_0438 * ((s_0710)^(4) * s_1275 - (s_0709)^(4) / Keq_0438) / ((Km0710_0438)^(4) * Km1275_0438) / ((1 + s_0710 / Km0710_0438)^(4) * (1 + s_1275 / Km1275_0438) + (1 + s_0709 / Km0709_0438)^(4) - 1))+2.0 * (cell * Vmax_0439 * ((s_0709)^(2) * s_1535 - (s_0710)^(2) * s_1537 / Keq_0439) / ((Km0709_0439)^(2) * Km1535_0439) / ((1 + s_0709 / Km0709_0439)^(2) * (1 + s_1535 / Km1535_0439) + (1 + s_0710 / Km0710_0439)^(2) * (1 + s_1537 / Km1537_0439) - 1)),
D(s_0201) ~ +1.0 * (cell * Vmax_0154 * (s_0298 * s_0434 - s_0201 * s_0394 / Keq_0154) / (Km0298_0154 * Km0434_0154) / ((1 + s_0298 / Km0298_0154) * (1 + s_0434 / Km0434_0154) + (1 + s_0201 / Km0201_0154) * (1 + s_0394 / Km0394_0154) - 1))-1.0 * (cell * Vmax_0883 * (s_0201 * s_1616 - s_0390 * s_1469 * s_1620 / Keq_0883) / (Km0201_0883 * Km1616_0883) / ((1 + s_0201 / Km0201_0883) * (1 + s_1616 / Km1616_0883) + (1 + s_0390 / Km0390_0883) * (1 + s_1469 / Km1469_0883) * (1 + s_1620 / Km1620_0883) - 1)),
D(s_0145) ~ -1.0 * (cell * Vmax_0118 * (s_0145 * s_0991 - s_0180 * s_1182 / Keq_0118) / (Km0145_0118 * Km0991_0118) / ((1 + s_0145 / Km0145_0118) * (1 + s_0991 / Km0991_0118) + (1 + s_0180 / Km0180_0118) * (1 + s_1182 / Km1182_0118) - 1))+1.0 * (cell * Vmax_0759 * (s_1191 * s_1212 - s_0145 * s_1207 * s_1322 / Keq_0759) / (Km1191_0759 * Km1212_0759) / ((1 + s_1191 / Km1191_0759) * (1 + s_1212 / Km1212_0759) + (1 + s_0145 / Km0145_0759) * (1 + s_1207 / Km1207_0759) * (1 + s_1322 / Km1322_0759) - 1)),
D(s_0190) ~ +1.0 * (cell * Vmax_0462 * (s_0745 * s_0943 - s_0190 * s_0633 / Keq_0462) / (Km0745_0462 * Km0943_0462) / ((1 + s_0745 / Km0745_0462) * (1 + s_0943 / Km0943_0462) + (1 + s_0190 / Km0190_0462) * (1 + s_0633 / Km0633_0462) - 1))-2.0 * (cell * Vmax_1012 * ((s_0190)^(2) * s_1212 - (s_0633)^(2) * s_1207 * s_1447 / Keq_1012) / ((Km0190_1012)^(2) * Km1212_1012) / ((1 + s_0190 / Km0190_1012)^(2) * (1 + s_1212 / Km1212_1012) + (1 + s_0633 / Km0633_1012)^(2) * (1 + s_1207 / Km1207_1012) * (1 + s_1447 / Km1447_1012) - 1)),
D(s_1302) ~ +1.0 * (cell * Vmax_0434 * (s_1101 * s_1176 * (s_1212)^(2) - s_0456 * s_0529 * (s_1207)^(2) * s_1302 / Keq_0434) / (Km1101_0434 * Km1176_0434 * (Km1212_0434)^(2)) / ((1 + s_1101 / Km1101_0434) * (1 + s_1176 / Km1176_0434) * (1 + s_1212 / Km1212_0434)^(2) + (1 + s_0456 / Km0456_0434) * (1 + s_0529 / Km0529_0434) * (1 + s_1207 / Km1207_0434)^(2) * (1 + s_1302 / Km1302_0434) - 1))-1.0 * (cell * Vmax_0435 * (s_1101 * (s_1212)^(2) * s_1302 - s_0456 * s_0529 * (s_1207)^(2) * s_1454 / Keq_0435) / (Km1101_0435 * (Km1212_0435)^(2) * Km1302_0435) / ((1 + s_1101 / Km1101_0435) * (1 + s_1212 / Km1212_0435)^(2) * (1 + s_1302 / Km1302_0435) + (1 + s_0456 / Km0456_0435) * (1 + s_0529 / Km0529_0435) * (1 + s_1207 / Km1207_0435)^(2) * (1 + s_1454 / Km1454_0435) - 1))-1.0 * (cell * Vmax_0993 * (s_1039 * s_1302 - s_0231 * s_0456 * s_0529 / Keq_0993) / (Km1039_0993 * Km1302_0993) / ((1 + s_1039 / Km1039_0993) * (1 + s_1302 / Km1302_0993) + (1 + s_0231 / Km0231_0993) * (1 + s_0456 / Km0456_0993) * (1 + s_0529 / Km0529_0993) - 1)),
D(s_0539) ~ -1.0 * (cell * Vmax_0257 * (s_0539 * s_1331 - s_0471 * s_0633 / Keq_0257) / (Km0539_0257 * Km1331_0257) / ((1 + s_0539 / Km0539_0257) * (1 + s_1331 / Km1331_0257) + (1 + s_0471 / Km0471_0257) * (1 + s_0633 / Km0633_0257) - 1))+1.0 * (cell * Vmax_0307 * (s_0419 * s_0434 * s_1559 - s_0394 * s_0539 * s_1322 / Keq_0307) / (Km0419_0307 * Km0434_0307 * Km1559_0307) / ((1 + s_0419 / Km0419_0307) * (1 + s_0434 / Km0434_0307) * (1 + s_1559 / Km1559_0307) + (1 + s_0394 / Km0394_0307) * (1 + s_0539 / Km0539_0307) * (1 + s_1322 / Km1322_0307) - 1))-1.0 * (cell * Vmax_0736 * (s_0028 * s_0539 - s_0019 * s_0467 / Keq_0736) / (Km0028_0736 * Km0539_0736) / ((1 + s_0028 / Km0028_0736) * (1 + s_0539 / Km0539_0736) + (1 + s_0019 / Km0019_0736) * (1 + s_0467 / Km0467_0736) - 1))-1.0 * (cell * Vmax_0806 * (s_0539 - s_0467 * s_1322 / Keq_0806) / Km0539_0806 / (1 + s_0539 / Km0539_0806 + (1 + s_0467 / Km0467_0806) * (1 + s_1322 / Km1322_0806) - 1)),
D(s_0681) ~ +1.0 * (cell * Vmax_1762 * s_0680 / Km0680_1762 / (1 + s_0680 / Km0680_1762)),
D(s_0664) ~ -1.0 * (cell * Vmax_0233 * (s_0664 * s_1212 * s_1275 - s_0662 * s_1207 / Keq_0233) / (Km0664_0233 * Km1212_0233 * Km1275_0233) / ((1 + s_0664 / Km0664_0233) * (1 + s_1212 / Km1212_0233) * (1 + s_1275 / Km1275_0233) + (1 + s_0662 / Km0662_0233) * (1 + s_1207 / Km1207_0233) - 1))+1.0 * (cell * Vmax_0242 * (s_0657 * s_1212 * s_1275 - s_0664 * s_1207 / Keq_0242) / (Km0657_0242 * Km1212_0242 * Km1275_0242) / ((1 + s_0657 / Km0657_0242) * (1 + s_1212 / Km1212_0242) * (1 + s_1275 / Km1275_0242) + (1 + s_0664 / Km0664_0242) * (1 + s_1207 / Km1207_0242) - 1)),
D(s_0394) ~ +1.0 * (cell * Vmax_0079 * (s_0301 * s_0434 * s_0999 - s_0302 * s_0394 * s_0991 * s_1322 / Keq_0079) / (Km0301_0079 * Km0434_0079 * Km0999_0079) / ((1 + s_0301 / Km0301_0079) * (1 + s_0434 / Km0434_0079) * (1 + s_0999 / Km0999_0079) + (1 + s_0302 / Km0302_0079) * (1 + s_0394 / Km0394_0079) * (1 + s_0991 / Km0991_0079) * (1 + s_1322 / Km1322_0079) - 1))+1.0 * (cell * Vmax_0108 * (s_0373 * s_0434 * s_0445 - s_0394 * s_1101 * s_1322 / Keq_0108) / (Km0373_0108 * Km0434_0108 * Km0445_0108) / ((1 + s_0373 / Km0373_0108) * (1 + s_0434 / Km0434_0108) * (1 + s_0445 / Km0445_0108) + (1 + s_0394 / Km0394_0108) * (1 + s_1101 / Km1101_0108) * (1 + s_1322 / Km1322_0108) - 1))+1.0 * (cell * Vmax_0115 * (s_0434 * s_1192 - s_0394 * s_1191 / Keq_0115) / (Km0434_0115 * Km1192_0115) / ((1 + s_0434 / Km0434_0115) * (1 + s_1192 / Km1192_0115) + (1 + s_0394 / Km0394_0115) * (1 + s_1191 / Km1191_0115) - 1))+1.0 * (cell * Vmax_0142 * (s_0386 * s_0434 - s_0394 * s_0423 / Keq_0142) / (Km0386_0142 * Km0434_0142) / ((1 + s_0386 / Km0386_0142) * (1 + s_0434 / Km0434_0142) + (1 + s_0394 / Km0394_0142) * (1 + s_0423 / Km0423_0142) - 1))+2.0 * (cell * Vmax_0148 * (s_0423 * s_0434 - (s_0394)^(2) / Keq_0148) / (Km0423_0148 * Km0434_0148) / ((1 + s_0423 / Km0423_0148) * (1 + s_0434 / Km0434_0148) + (1 + s_0394 / Km0394_0148)^(2) - 1))+1.0 * (cell * Vmax_0154 * (s_0298 * s_0434 - s_0201 * s_0394 / Keq_0154) / (Km0298_0154 * Km0434_0154) / ((1 + s_0298 / Km0298_0154) * (1 + s_0434 / Km0434_0154) + (1 + s_0201 / Km0201_0154) * (1 + s_0394 / Km0394_0154) - 1))+1.0 * (cell * Vmax_0215 * (s_0434 * s_0973 - s_0295 * s_0394 / Keq_0215) / (Km0434_0215 * Km0973_0215) / ((1 + s_0434 / Km0434_0215) * (1 + s_0973 / Km0973_0215) + (1 + s_0295 / Km0295_0215) * (1 + s_0394 / Km0394_0215) - 1))-1.0 * (cell * Vmax_0226 * (s_0394 * s_1322 - s_0434 / Keq_0226) / (Km0394_0226 * Km1322_0226) / ((1 + s_0394 / Km0394_0226) * (1 + s_1322 / Km1322_0226) + 1 + s_0434 / Km0434_0226 - 1))+2.0 * (cell * Vmax_0250 * ((s_0434)^(2) * s_0445 * s_0999 - (s_0394)^(2) * s_0455 * s_0991 * s_1322 / Keq_0250) / ((Km0434_0250)^(2) * Km0445_0250 * Km0999_0250) / ((1 + s_0434 / Km0434_0250)^(2) * (1 + s_0445 / Km0445_0250) * (1 + s_0999 / Km0999_0250) + (1 + s_0394 / Km0394_0250)^(2) * (1 + s_0455 / Km0455_0250) * (1 + s_0991 / Km0991_0250) * (1 + s_1322 / Km1322_0250) - 1))+1.0 * (cell * Vmax_0307 * (s_0419 * s_0434 * s_1559 - s_0394 * s_0539 * s_1322 / Keq_0307) / (Km0419_0307 * Km0434_0307 * Km1559_0307) / ((1 + s_0419 / Km0419_0307) * (1 + s_0434 / Km0434_0307) * (1 + s_1559 / Km1559_0307) + (1 + s_0394 / Km0394_0307) * (1 + s_0539 / Km0539_0307) * (1 + s_1322 / Km1322_0307) - 1))-1.0 * (cell * Vmax_0330 * (s_0394 * s_0613 - s_0434 * s_0615 / Keq_0330) / (Km0394_0330 * Km0613_0330) / ((1 + s_0394 / Km0394_0330) * (1 + s_0613 / Km0613_0330) + (1 + s_0434 / Km0434_0330) * (1 + s_0615 / Km0615_0330) - 1))-1.0 * (cell * Vmax_0446 * (s_0120 * s_0394 * s_1322 - s_0434 * s_0722 * s_1487 / Keq_0446) / (Km0120_0446 * Km0394_0446 * Km1322_0446) / ((1 + s_0120 / Km0120_0446) * (1 + s_0394 / Km0394_0446) * (1 + s_1322 / Km1322_0446) + (1 + s_0434 / Km0434_0446) * (1 + s_0722 / Km0722_0446) * (1 + s_1487 / Km1487_0446) - 1))+1.0 * (cell * Vmax_0476 * (s_0419 * s_0434 * s_0991 - s_0394 * s_0999 * s_1322 / Keq_0476) / (Km0419_0476 * Km0434_0476 * Km0991_0476) / ((1 + s_0419 / Km0419_0476) * (1 + s_0434 / Km0434_0476) * (1 + s_0991 / Km0991_0476) + (1 + s_0394 / Km0394_0476) * (1 + s_0999 / Km0999_0476) * (1 + s_1322 / Km1322_0476) - 1))+1.0 * (cell * Vmax_0528 * (s_0434 * s_0782 - s_0394 * s_0739 / Keq_0528) / (Km0434_0528 * Km0782_0528) / ((1 + s_0434 / Km0434_0528) * (1 + s_0782 / Km0782_0528) + (1 + s_0394 / Km0394_0528) * (1 + s_0739 / Km0739_0528) - 1))+1.0 * (cell * Vmax_0534 * (s_0434 * s_0563 - s_0394 * s_0568 / Keq_0534) / (Km0434_0534 * Km0563_0534) / ((1 + s_0434 / Km0434_0534) * (1 + s_0563 / Km0563_0534) + (1 + s_0394 / Km0394_0534) * (1 + s_0568 / Km0568_0534) - 1))+1.0 * (cell * Vmax_0548 * (s_0434 * s_1014 - s_0394 * s_1238 / Keq_0548) / (Km0434_0548 * Km1014_0548) / ((1 + s_0434 / Km0434_0548) * (1 + s_1014 / Km1014_0548) + (1 + s_0394 / Km0394_0548) * (1 + s_1238 / Km1238_0548) - 1))+1.0 * (cell * Vmax_0739 * (s_0018 * s_0434 - s_0394 * s_0456 * s_0943 * s_1322 / Keq_0739) / (Km0018_0739 * Km0434_0739) / ((1 + s_0018 / Km0018_0739) * (1 + s_0434 / Km0434_0739) + (1 + s_0394 / Km0394_0739) * (1 + s_0456 / Km0456_0739) * (1 + s_0943 / Km0943_0739) * (1 + s_1322 / Km1322_0739) - 1))+1.0 * (cell * Vmax_0800 * (s_0434 * s_0739 - s_0394 * s_0785 / Keq_0800) / (Km0434_0800 * Km0739_0800) / ((1 + s_0434 / Km0434_0800) * (1 + s_0739 / Km0739_0800) + (1 + s_0394 / Km0394_0800) * (1 + s_0785 / Km0785_0800) - 1))+1.0 * (cell * Vmax_0811 * (s_0434 * s_1538 - s_0394 * s_1559 / Keq_0811) / (Km0434_0811 * Km1538_0811) / ((1 + s_0434 / Km0434_0811) * (1 + s_1538 / Km1538_0811) + (1 + s_0394 / Km0394_0811) * (1 + s_1559 / Km1559_0811) - 1))+1.0 * (cell * Vmax_0855 * (s_0302 * s_0434 - s_0300 * s_0394 * s_1322 / Keq_0855) / (Km0302_0855 * Km0434_0855) / ((1 + s_0302 / Km0302_0855) * (1 + s_0434 / Km0434_0855) + (1 + s_0300 / Km0300_0855) * (1 + s_0394 / Km0394_0855) * (1 + s_1322 / Km1322_0855) - 1))+1.0 * (cell * Vmax_0886 * (s_0434 * s_0557 - s_0394 * s_0555 / Keq_0886) / (Km0434_0886 * Km0557_0886) / ((1 + s_0434 / Km0434_0886) * (1 + s_0557 / Km0557_0886) + (1 + s_0394 / Km0394_0886) * (1 + s_0555 / Km0555_0886) - 1))+1.0 * (cell * Vmax_0887 * (s_0434 * s_1427 - s_0394 * s_1426 / Keq_0887) / (Km0434_0887 * Km1427_0887) / ((1 + s_0434 / Km0434_0887) * (1 + s_1427 / Km1427_0887) + (1 + s_0394 / Km0394_0887) * (1 + s_1426 / Km1426_0887) - 1))-1.0 * (cell * Vmax_0892 * (s_0075 * s_0394 - s_0260 * s_0434 / Keq_0892) / (Km0075_0892 * Km0394_0892) / ((1 + s_0075 / Km0075_0892) * (1 + s_0394 / Km0394_0892) + (1 + s_0260 / Km0260_0892) * (1 + s_0434 / Km0434_0892) - 1))+1.0 * (cell * Vmax_0904 * (s_0019 * s_0434 - s_0018 * s_0394 / Keq_0904) / (Km0019_0904 * Km0434_0904) / ((1 + s_0019 / Km0019_0904) * (1 + s_0434 / Km0434_0904) + (1 + s_0018 / Km0018_0904) * (1 + s_0394 / Km0394_0904) - 1))+1.0 * (cell * Vmax_0908 * (s_0434 * s_0973 * s_1364 - s_0299 * s_0394 * s_1322 / Keq_0908) / (Km0434_0908 * Km0973_0908 * Km1364_0908) / ((1 + s_0434 / Km0434_0908) * (1 + s_0973 / Km0973_0908) * (1 + s_1364 / Km1364_0908) + (1 + s_0299 / Km0299_0908) * (1 + s_0394 / Km0394_0908) * (1 + s_1322 / Km1322_0908) - 1))+1.0 * (cell * Vmax_0911 * (s_0300 * s_0456 * s_0434 - s_1364 * s_0394 * s_1322 / Keq_0911) / (Km0300_0911 * Km0456_0911 * Km0434_0911) / ((1 + s_0300 / Km0300_0911) * (1 + s_0456 / Km0456_0911) * (1 + s_0434 / Km0434_0911) + (1 + s_1364 / Km1364_0911) * (1 + s_0394 / Km0394_0911) * (1 + s_1322 / Km1322_0911) - 1))+1.0 * (cell * Vmax_0914 * (s_0327 * s_0434 * s_1003 - s_0325 * s_0394 * s_1322 / Keq_0914) / (Km0327_0914 * Km0434_0914 * Km1003_0914) / ((1 + s_0327 / Km0327_0914) * (1 + s_0434 / Km0434_0914) * (1 + s_1003 / Km1003_0914) + (1 + s_0325 / Km0325_0914) * (1 + s_0394 / Km0394_0914) * (1 + s_1322 / Km1322_0914) - 1))+1.0 * (cell * Vmax_0958 * (s_0434 * s_0445 * s_1399 - s_0394 * s_1271 * s_1322 / Keq_0958) / (Km0434_0958 * Km0445_0958 * Km1399_0958) / ((1 + s_0434 / Km0434_0958) * (1 + s_0445 / Km0445_0958) * (1 + s_1399 / Km1399_0958) + (1 + s_0394 / Km0394_0958) * (1 + s_1271 / Km1271_0958) * (1 + s_1322 / Km1322_0958) - 1))-1.0 * (cell * Vmax_0962 * (s_0394 * s_1360 - s_0434 * s_1399 / Keq_0962) / (Km0394_0962 * Km1360_0962) / ((1 + s_0394 / Km0394_0962) * (1 + s_1360 / Km1360_0962) + (1 + s_0434 / Km0434_0962) * (1 + s_1399 / Km1399_0962) - 1))-1.0 * (cell * Vmax_0974 * (s_0394 * s_1616 - s_0582 * s_1620 / Keq_0974) / (Km0394_0974 * Km1616_0974) / ((1 + s_0394 / Km0394_0974) * (1 + s_1616 / Km1616_0974) + (1 + s_0582 / Km0582_0974) * (1 + s_1620 / Km1620_0974) - 1))+1.0 * (cell * Vmax_0997 * (s_0434 * s_1429 - s_0261 * s_0394 / Keq_0997) / (Km0434_0997 * Km1429_0997) / ((1 + s_0434 / Km0434_0997) * (1 + s_1429 / Km1429_0997) + (1 + s_0261 / Km0261_0997) * (1 + s_0394 / Km0394_0997) - 1))-1.0 * (cell * Vmax_1026 * (s_0394 * s_1467 - s_0298 * s_1322 / Keq_1026) / (Km0394_1026 * Km1467_1026) / ((1 + s_0394 / Km0394_1026) * (1 + s_1467 / Km1467_1026) + (1 + s_0298 / Km0298_1026) * (1 + s_1322 / Km1322_1026) - 1))+1.0 * (cell * Vmax_1072 * (s_0434 * s_1545 - s_0394 * s_1538 / Keq_1072) / (Km0434_1072 * Km1545_1072) / ((1 + s_0434 / Km0434_1072) * (1 + s_1545 / Km1545_1072) + (1 + s_0394 / Km0394_1072) * (1 + s_1538 / Km1538_1072) - 1))-1.0 * (cell * Vmax_1704 * (s_0394 * s_0587 - s_0434 * s_0589 / Keq_1704) / (Km0394_1704 * Km0587_1704) / ((1 + s_0394 / Km0394_1704) * (1 + s_0587 / Km0587_1704) + (1 + s_0434 / Km0434_1704) * (1 + s_0589 / Km0589_1704) - 1))-1.0 * (cell * Vmax_1729 * (s_0394 * s_0582 - s_0434 * s_0584 / Keq_1729) / (Km0394_1729 * Km0582_1729) / ((1 + s_0394 / Km0394_1729) * (1 + s_0582 / Km0582_1729) + (1 + s_0434 / Km0434_1729) * (1 + s_0584 / Km0584_1729) - 1))+59.3 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_0767) ~ -1.0 * (cell * Vmax_0489 * (s_0767 - s_0765 * s_1322 / Keq_0489) / Km0767_0489 / (1 + s_0767 / Km0767_0489 + (1 + s_0765 / Km0765_0489) * (1 + s_1322 / Km1322_0489) - 1))+1.0 * (cell * Vmax_0491 * (s_0629 * s_1203 - s_0767 * s_1198 / Keq_0491) / (Km0629_0491 * Km1203_0491) / ((1 + s_0629 / Km0629_0491) * (1 + s_1203 / Km1203_0491) + (1 + s_0767 / Km0767_0491) * (1 + s_1198 / Km1198_0491) - 1))-1.0 * (cell * Vmax_0495 * (s_0380 * s_0767 - s_0082 * s_0529 / Keq_0495) / (Km0380_0495 * Km0767_0495) / ((1 + s_0380 / Km0380_0495) * (1 + s_0767 / Km0767_0495) + (1 + s_0082 / Km0082_0495) * (1 + s_0529 / Km0529_0495) - 1)),
D(s_1286) ~ +1.0 * (cell * Vmax_0389 * (s_1101 * s_1161 * (s_1212)^(2) - s_0456 * s_0529 * (s_1207)^(2) * s_1286 / Keq_0389) / (Km1101_0389 * Km1161_0389 * (Km1212_0389)^(2)) / ((1 + s_1101 / Km1101_0389) * (1 + s_1161 / Km1161_0389) * (1 + s_1212 / Km1212_0389)^(2) + (1 + s_0456 / Km0456_0389) * (1 + s_0529 / Km0529_0389) * (1 + s_1207 / Km1207_0389)^(2) * (1 + s_1286 / Km1286_0389) - 1))-1.0 * (cell * Vmax_0391 * (s_1101 * (s_1212)^(2) * s_1286 - s_0456 * s_0529 * (s_1207)^(2) * s_1449 / Keq_0391) / (Km1101_0391 * (Km1212_0391)^(2) * Km1286_0391) / ((1 + s_1101 / Km1101_0391) * (1 + s_1212 / Km1212_0391)^(2) * (1 + s_1286 / Km1286_0391) + (1 + s_0456 / Km0456_0391) * (1 + s_0529 / Km0529_0391) * (1 + s_1207 / Km1207_0391)^(2) * (1 + s_1449 / Km1449_0391) - 1)),
D(s_0146) ~ -1.0 * (cell * Vmax_0096 * (s_0146 * s_1212 - s_0016 * s_1207 / Keq_0096) / (Km0146_0096 * Km1212_0096) / ((1 + s_0146 / Km0146_0096) * (1 + s_1212 / Km1212_0096) + (1 + s_0016 / Km0016_0096) * (1 + s_1207 / Km1207_0096) - 1))+1.0 * (cell * Vmax_0097 * ((s_1399)^(2) - s_0146 * s_0456 / Keq_0097) / (Km1399_0097)^(2) / ((1 + s_1399 / Km1399_0097)^(2) + (1 + s_0146 / Km0146_0097) * (1 + s_0456 / Km0456_0097) - 1)),
D(s_0420) ~ -1.0 * (cell * Vmax_1115 * (s_0420 - s_0419) / Km0420_1115 / (1 + s_0420 / Km0420_1115 + 1 + s_0419 / Km0419_1115 - 1)),
D(s_1016) ~ +1.0 * (cell * Vmax_0663 * (s_0056 * s_0991 - s_0180 * s_1016 / Keq_0663) / (Km0056_0663 * Km0991_0663) / ((1 + s_0056 / Km0056_0663) * (1 + s_0991 / Km0991_0663) + (1 + s_0180 / Km0180_0663) * (1 + s_1016 / Km1016_0663) - 1))-0.172 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_1187) ~ +1.0 * (cell * Vmax_0202 * (s_0427 * s_1386 - s_0633 * s_1187 / Keq_0202) / (Km0427_0202 * Km1386_0202) / ((1 + s_0427 / Km0427_0202) * (1 + s_1386 / Km1386_0202) + (1 + s_0633 / Km0633_0202) * (1 + s_1187 / Km1187_0202) - 1))-1.0 * (cell * Vmax_0913 * (s_1187 - s_0076 / Keq_0913) / Km1187_0913 / (1 + s_1187 / Km1187_0913 + 1 + s_0076 / Km0076_0913 - 1)),
D(s_0785) ~ -1.0 * (cell * Vmax_0153 * (s_0785 * s_0849 * s_0973 - s_0393 * s_0739 * s_1322 / Keq_0153) / (Km0785_0153 * Km0849_0153 * Km0973_0153) / ((1 + s_0785 / Km0785_0153) * (1 + s_0849 / Km0849_0153) * (1 + s_0973 / Km0973_0153) + (1 + s_0393 / Km0393_0153) * (1 + s_0739 / Km0739_0153) * (1 + s_1322 / Km1322_0153) - 1))-1.0 * (cell * Vmax_0525 * (s_0785 - s_0141 * s_0633 * s_0722 / Keq_0525) / Km0785_0525 / (1 + s_0785 / Km0785_0525 + (1 + s_0141 / Km0141_0525) * (1 + s_0633 / Km0633_0525) * (1 + s_0722 / Km0722_0525) - 1))-1.0 * (cell * Vmax_0722 * (s_0573 * s_0785 - s_0633 * s_0743 / Keq_0722) / (Km0573_0722 * Km0785_0722) / ((1 + s_0573 / Km0573_0722) * (1 + s_0785 / Km0785_0722) + (1 + s_0633 / Km0633_0722) * (1 + s_0743 / Km0743_0722) - 1))+1.0 * (cell * Vmax_0800 * (s_0434 * s_0739 - s_0394 * s_0785 / Keq_0800) / (Km0434_0800 * Km0739_0800) / ((1 + s_0434 / Km0434_0800) * (1 + s_0739 / Km0739_0800) + (1 + s_0394 / Km0394_0800) * (1 + s_0785 / Km0785_0800) - 1)),
D(s_1342) ~ -1.0 * (cell * Vmax_0900 * (s_1342 * s_1416 - s_1346 * s_1413 / Keq_0900) / (Km1342_0900 * Km1416_0900) / ((1 + s_1342 / Km1342_0900) * (1 + s_1416 / Km1416_0900) + (1 + s_1346 / Km1346_0900) * (1 + s_1413 / Km1413_0900) - 1))+1.0 * (cell * Vmax_0901 * (s_1343 * s_1416 - s_1342 * s_1413 / Keq_0901) / (Km1343_0901 * Km1416_0901) / ((1 + s_1343 / Km1343_0901) * (1 + s_1416 / Km1416_0901) + (1 + s_1342 / Km1342_0901) * (1 + s_1413 / Km1413_0901) - 1)),
D(s_0471) ~ +1.0 * (cell * Vmax_0257 * (s_0539 * s_1331 - s_0471 * s_0633 / Keq_0257) / (Km0539_0257 * Km1331_0257) / ((1 + s_0539 / Km0539_0257) * (1 + s_1331 / Km1331_0257) + (1 + s_0471 / Km0471_0257) * (1 + s_0633 / Km0633_0257) - 1))-1.0 * (cell * Vmax_0874 * (s_0471 * s_1153 - s_0089 * s_0526 / Keq_0874) / (Km0471_0874 * Km1153_0874) / ((1 + s_0471 / Km0471_0874) * (1 + s_1153 / Km1153_0874) + (1 + s_0089 / Km0089_0874) * (1 + s_0526 / Km0526_0874) - 1))-1.0 * (cell * Vmax_0880 * (s_0471 * s_1039 - s_0526 * s_1337 / Keq_0880) / (Km0471_0880 * Km1039_0880) / ((1 + s_0471 / Km0471_0880) * (1 + s_1039 / Km1039_0880) + (1 + s_0526 / Km0526_0880) * (1 + s_1337 / Km1337_0880) - 1)),
D(s_1035) ~ +1.0 * (cell * Vmax_0957 * (s_0118 * s_1212 - s_1035 * s_1207 / Keq_0957) / (Km0118_0957 * Km1212_0957) / ((1 + s_0118 / Km0118_0957) * (1 + s_1212 / Km1212_0957) + (1 + s_1035 / Km1035_0957) * (1 + s_1207 / Km1207_0957) - 1))-0.129 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_1039) ~ -1.0 * (cell * Vmax_0309 * (s_1012 * s_1039 - s_0980 / Keq_0309) / (Km1012_0309 * Km1039_0309) / ((1 + s_1012 / Km1012_0309) * (1 + s_1039 / Km1039_0309) + 1 + s_0980 / Km0980_0309 - 1))-1.0 * (cell * Vmax_0502 * (s_1039 * s_1487 - s_0306 * s_1003 / Keq_0502) / (Km1039_0502 * Km1487_0502) / ((1 + s_1039 / Km1039_0502) * (1 + s_1487 / Km1487_0502) + (1 + s_0306 / Km0306_0502) * (1 + s_1003 / Km1003_0502) - 1))-1.0 * (cell * Vmax_0880 * (s_0471 * s_1039 - s_0526 * s_1337 / Keq_0880) / (Km0471_0880 * Km1039_0880) / ((1 + s_0471 / Km0471_0880) * (1 + s_1039 / Km1039_0880) + (1 + s_0526 / Km0526_0880) * (1 + s_1337 / Km1337_0880) - 1))+1.0 * (cell * Vmax_0917 * (s_0259 - s_1039 * s_1322 / Keq_0917) / Km0259_0917 / (1 + s_0259 / Km0259_0917 + (1 + s_1039 / Km1039_0917) * (1 + s_1322 / Km1322_0917) - 1))-1.0 * (cell * Vmax_0992 * (s_0373 * s_1039 - s_0529 * s_1234 / Keq_0992) / (Km0373_0992 * Km1039_0992) / ((1 + s_0373 / Km0373_0992) * (1 + s_1039 / Km1039_0992) + (1 + s_0529 / Km0529_0992) * (1 + s_1234 / Km1234_0992) - 1))-1.0 * (cell * Vmax_0993 * (s_1039 * s_1302 - s_0231 * s_0456 * s_0529 / Keq_0993) / (Km1039_0993 * Km1302_0993) / ((1 + s_1039 / Km1039_0993) * (1 + s_1302 / Km1302_0993) + (1 + s_0231 / Km0231_0993) * (1 + s_0456 / Km0456_0993) * (1 + s_0529 / Km0529_0993) - 1))-1.0 * (cell * Vmax_1055 * (s_0086 * s_1039 - s_0764 * s_1048 / Keq_1055) / (Km0086_1055 * Km1039_1055) / ((1 + s_0086 / Km0086_1055) * (1 + s_1039 / Km1039_1055) + (1 + s_0764 / Km0764_1055) * (1 + s_1048 / Km1048_1055) - 1))-0.254 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_0207) ~ -1.0 * (cell * Vmax_0538 * (s_0207 * s_0991 - s_0180 * s_1011 / Keq_0538) / (Km0207_0538 * Km0991_0538) / ((1 + s_0207 / Km0207_0538) * (1 + s_0991 / Km0991_0538) + (1 + s_0180 / Km0180_0538) * (1 + s_1011 / Km1011_0538) - 1))+1.0 * (cell * Vmax_0564 * (s_0550 - s_0207 / Keq_0564) / Km0550_0564 / (1 + s_0550 / Km0550_0564 + 1 + s_0207 / Km0207_0564 - 1)),
D(s_0515) ~ -1.0 * (cell * Vmax_0203 * (s_0515 * s_0999 - s_0427 * s_0991 * s_1399 / Keq_0203) / (Km0515_0203 * Km0999_0203) / ((1 + s_0515 / Km0515_0203) * (1 + s_0999 / Km0999_0203) + (1 + s_0427 / Km0427_0203) * (1 + s_0991 / Km0991_0203) * (1 + s_1399 / Km1399_0203) - 1))-1.0 * (cell * Vmax_0278 * (s_0515 - s_1377 / Keq_0278) / Km0515_0278 / (1 + s_0515 / Km0515_0278 + 1 + s_1377 / Km1377_0278 - 1))+1.0 * (cell * Vmax_0279 * (s_0324 - s_0515 * s_1322 / Keq_0279) / Km0324_0279 / (1 + s_0324 / Km0324_0279 + (1 + s_0515 / Km0515_0279) * (1 + s_1322 / Km1322_0279) - 1)),
D(s_0743) ~ -1.0 * (cell * Vmax_0361 * (s_0645 * s_0743 - s_0644 * s_0739 / Keq_0361) / (Km0645_0361 * Km0743_0361) / ((1 + s_0645 / Km0645_0361) * (1 + s_0743 / Km0743_0361) + (1 + s_0644 / Km0644_0361) * (1 + s_0739 / Km0739_0361) - 1))+1.0 * (cell * Vmax_0722 * (s_0573 * s_0785 - s_0633 * s_0743 / Keq_0722) / (Km0573_0722 * Km0785_0722) / ((1 + s_0573 / Km0573_0722) * (1 + s_0785 / Km0785_0722) + (1 + s_0633 / Km0633_0722) * (1 + s_0743 / Km0743_0722) - 1)),
D(s_0209) ~ +1.0 * (cell * Vmax_0235 * (s_0297 * s_1198 - s_0209 * s_0456 * s_1203 / Keq_0235) / (Km0297_0235 * Km1198_0235) / ((1 + s_0297 / Km0297_0235) * (1 + s_1198 / Km1198_0235) + (1 + s_0209 / Km0209_0235) * (1 + s_0456 / Km0456_0235) * (1 + s_1203 / Km1203_0235) - 1))-1.0 * (cell * Vmax_0236 * (s_0209 * s_1212 - s_0296 * s_1207 / Keq_0236) / (Km0209_0236 * Km1212_0236) / ((1 + s_0209 / Km0209_0236) * (1 + s_1212 / Km1212_0236) + (1 + s_0296 / Km0296_0236) * (1 + s_1207 / Km1207_0236) - 1)),
D(s_1084) ~ -1.0 * (cell * Vmax_0340 * (s_1084 * s_1445 - s_0475 / Keq_0340) / (Km1084_0340 * Km1445_0340) / ((1 + s_1084 / Km1084_0340) * (1 + s_1445 / Km1445_0340) + 1 + s_0475 / Km0475_0340 - 1))+1.0 * (cell * Vmax_0393 * ((s_1101)^(3) * (s_1212)^(6) * s_1449 - (s_0456)^(3) * (s_0529)^(3) * s_1084 * (s_1207)^(6) / Keq_0393) / ((Km1101_0393)^(3) * (Km1212_0393)^(6) * Km1449_0393) / ((1 + s_1101 / Km1101_0393)^(3) * (1 + s_1212 / Km1212_0393)^(6) * (1 + s_1449 / Km1449_0393) + (1 + s_0456 / Km0456_0393)^(3) * (1 + s_0529 / Km0529_0393)^(3) * (1 + s_1084 / Km1084_0393) * (1 + s_1207 / Km1207_0393)^(6) - 1))-1.0 * (cell * Vmax_0919 * (s_1084 * s_1366 - s_0481 / Keq_0919) / (Km1084_0919 * Km1366_0919) / ((1 + s_1084 / Km1084_0919) * (1 + s_1366 / Km1366_0919) + 1 + s_0481 / Km0481_0919 - 1)),
D(s_1577) ~ +1.0 * (cell * Vmax_0239 * (s_1212 * s_1275 * s_1576 - s_1207 * s_1577 / Keq_0239) / (Km1212_0239 * Km1275_0239 * Km1576_0239) / ((1 + s_1212 / Km1212_0239) * (1 + s_1275 / Km1275_0239) * (1 + s_1576 / Km1576_0239) + (1 + s_1207 / Km1207_0239) * (1 + s_1577 / Km1577_0239) - 1))-1.0 * (cell * Vmax_0240 * (s_1212 * s_1275 * s_1577 - s_1207 * s_1578 / Keq_0240) / (Km1212_0240 * Km1275_0240 * Km1577_0240) / ((1 + s_1212 / Km1212_0240) * (1 + s_1275 / Km1275_0240) * (1 + s_1577 / Km1577_0240) + (1 + s_1207 / Km1207_0240) * (1 + s_1578 / Km1578_0240) - 1)),
D(s_1269) ~ +1.0 * (cell * Vmax_0339 * (s_0061 * s_1275 - s_0837 * s_1269 / Keq_0339) / (Km0061_0339 * Km1275_0339) / ((1 + s_0061 / Km0061_0339) * (1 + s_1275 / Km1275_0339) + (1 + s_0837 / Km0837_0339) * (1 + s_1269 / Km1269_0339) - 1))-1.0 * (cell * Vmax_0820 * (s_1269 * s_1386 - s_0633 * s_1270 / Keq_0820) / (Km1269_0820 * Km1386_0820) / ((1 + s_1269 / Km1269_0820) * (1 + s_1386 / Km1386_0820) + (1 + s_0633 / Km0633_0820) * (1 + s_1270 / Km1270_0820) - 1)),
D(s_0359) ~ -1.0 * (cell * Vmax_0165 * (s_0359 * s_1203 - s_0680 * s_1198 / Keq_0165) / (Km0359_0165 * Km1203_0165) / ((1 + s_0359 / Km0359_0165) * (1 + s_1203 / Km1203_0165) + (1 + s_0680 / Km0680_0165) * (1 + s_1198 / Km1198_0165) - 1))-1.0 * (cell * Vmax_0173 * (s_0359 * s_1207 - s_0362 * s_1212 / Keq_0173) / (Km0359_0173 * Km1207_0173) / ((1 + s_0359 / Km0359_0173) * (1 + s_1207 / Km1207_0173) + (1 + s_0362 / Km0362_0173) * (1 + s_1212 / Km1212_0173) - 1))+1.0 * (cell * Vmax_0959 * (s_1399 - s_0359 * s_0456 / Keq_0959) / Km1399_0959 / (1 + s_1399 / Km1399_0959 + (1 + s_0359 / Km0359_0959) * (1 + s_0456 / Km0456_0959) - 1)),
D(s_0555) ~ -1.0 * (cell * Vmax_0450 * (s_0555 - s_0629 * s_0764 / Keq_0450) / Km0555_0450 / (1 + s_0555 / Km0555_0450 + (1 + s_0629 / Km0629_0450) * (1 + s_0764 / Km0764_0450) - 1))+1.0 * (cell * Vmax_0886 * (s_0434 * s_0557 - s_0394 * s_0555 / Keq_0886) / (Km0434_0886 * Km0557_0886) / ((1 + s_0434 / Km0434_0886) * (1 + s_0557 / Km0557_0886) + (1 + s_0394 / Km0394_0886) * (1 + s_0555 / Km0555_0886) - 1)),
D(s_0568) ~ -1.0 * (cell * Vmax_0195 * (s_0568 * s_1543 - s_0409 * s_1538 / Keq_0195) / (Km0568_0195 * Km1543_0195) / ((1 + s_0568 / Km0568_0195) * (1 + s_1543 / Km1543_0195) + (1 + s_0409 / Km0409_0195) * (1 + s_1538 / Km1538_0195) - 1))-1.0 * (cell * Vmax_0466 * (s_0568 * s_1207 - s_0335 * s_1212 / Keq_0466) / (Km0568_0466 * Km1207_0466) / ((1 + s_0568 / Km0568_0466) * (1 + s_1207 / Km1207_0466) + (1 + s_0335 / Km0335_0466) * (1 + s_1212 / Km1212_0466) - 1))-1.0 * (cell * Vmax_0467 * (s_0568 - s_0557 / Keq_0467) / Km0568_0467 / (1 + s_0568 / Km0568_0467 + 1 + s_0557 / Km0557_0467 - 1))+1.0 * (cell * Vmax_0534 * (s_0434 * s_0563 - s_0394 * s_0568 / Keq_0534) / (Km0434_0534 * Km0563_0534) / ((1 + s_0434 / Km0434_0534) * (1 + s_0563 / Km0563_0534) + (1 + s_0394 / Km0394_0534) * (1 + s_0568 / Km0568_0534) - 1))-1.0 * (cell * Vmax_0758 * (s_0568 - s_0126 / Keq_0758) / Km0568_0758 / (1 + s_0568 / Km0568_0758 + 1 + s_0126 / Km0126_0758 - 1))-1.0 * (cell * Vmax_0888 * (s_0568 - s_0567 / Keq_0888) / Km0568_0888 / (1 + s_0568 / Km0568_0888 + 1 + s_0567 / Km0567_0888 - 1)),
D(s_1194) ~ +1.0 * (cell * Vmax_0214 * (s_0455 * s_0973 - s_1194 * s_1322 / Keq_0214) / (Km0455_0214 * Km0973_0214) / ((1 + s_0455 / Km0455_0214) * (1 + s_0973 / Km0973_0214) + (1 + s_1194 / Km1194_0214) * (1 + s_1322 / Km1322_0214) - 1))-1.0 * (cell * Vmax_0349 * (s_1194 - s_0061 / Keq_0349) / Km1194_0349 / (1 + s_1194 / Km1194_0349 + 1 + s_0061 / Km0061_0349 - 1)),
D(s_0409) ~ +1.0 * (cell * Vmax_0195 * (s_0568 * s_1543 - s_0409 * s_1538 / Keq_0195) / (Km0568_0195 * Km1543_0195) / ((1 + s_0568 / Km0568_0195) * (1 + s_1543 / Km1543_0195) + (1 + s_0409 / Km0409_0195) * (1 + s_1538 / Km1538_0195) - 1))-1.0 * (cell * Vmax_1051 * (s_0409 - s_1322 * s_1520 / Keq_1051) / Km0409_1051 / (1 + s_0409 / Km0409_1051 + (1 + s_1322 / Km1322_1051) * (1 + s_1520 / Km1520_1051) - 1)),
D(s_1377) ~ +1.0 * (cell * Vmax_0278 * (s_0515 - s_1377 / Keq_0278) / Km0515_0278 / (1 + s_0515 / Km0515_0278 + 1 + s_1377 / Km1377_0278 - 1))-1.0 * (cell * Vmax_0938 * (s_1377 - s_0456 * s_0951 / Keq_0938) / Km1377_0938 / (1 + s_1377 / Km1377_0938 + (1 + s_0456 / Km0456_0938) * (1 + s_0951 / Km0951_0938) - 1))-1.0 * (cell * Vmax_0939 * (s_1207 * s_1377 - s_0204 * s_0456 * s_1212 / Keq_0939) / (Km1207_0939 * Km1377_0939) / ((1 + s_1207 / Km1207_0939) * (1 + s_1377 / Km1377_0939) + (1 + s_0204 / Km0204_0939) * (1 + s_0456 / Km0456_0939) * (1 + s_1212 / Km1212_0939) - 1)),
D(s_1195) ~ +1.0 * (cell * Vmax_0694 * (s_1048 * s_1275 - s_1195 / Keq_0694) / (Km1048_0694 * Km1275_0694) / ((1 + s_1048 / Km1048_0694) * (1 + s_1275 / Km1275_0694) + 1 + s_1195 / Km1195_0694 - 1))-1.0 * (cell * Vmax_0762 * (s_1195 - s_0722 * s_1020 / Keq_0762) / Km1195_0762 / (1 + s_1195 / Km1195_0762 + (1 + s_0722 / Km0722_0762) * (1 + s_1020 / Km1020_0762) - 1)),
D(s_1020) ~ -1.0 * (cell * Vmax_0670 * (s_1020 - s_0427 * s_0955 / Keq_0670) / Km1020_0670 / (1 + s_1020 / Km1020_0670 + (1 + s_0427 / Km0427_0670) * (1 + s_0955 / Km0955_0670) - 1))+1.0 * (cell * Vmax_0762 * (s_1195 - s_0722 * s_1020 / Keq_0762) / Km1195_0762 / (1 + s_1195 / Km1195_0762 + (1 + s_0722 / Km0722_0762) * (1 + s_1020 / Km1020_0762) - 1)),
D(s_0455) ~ -1.0 * (cell * Vmax_0214 * (s_0455 * s_0973 - s_1194 * s_1322 / Keq_0214) / (Km0455_0214 * Km0973_0214) / ((1 + s_0455 / Km0455_0214) * (1 + s_0973 / Km0973_0214) + (1 + s_1194 / Km1194_0214) * (1 + s_1322 / Km1322_0214) - 1))+1.0 * (cell * Vmax_0250 * ((s_0434)^(2) * s_0445 * s_0999 - (s_0394)^(2) * s_0455 * s_0991 * s_1322 / Keq_0250) / ((Km0434_0250)^(2) * Km0445_0250 * Km0999_0250) / ((1 + s_0434 / Km0434_0250)^(2) * (1 + s_0445 / Km0445_0250) * (1 + s_0999 / Km0999_0250) + (1 + s_0394 / Km0394_0250)^(2) * (1 + s_0455 / Km0455_0250) * (1 + s_0991 / Km0991_0250) * (1 + s_1322 / Km1322_0250) - 1))-1.0 * (cell * Vmax_0816 * (s_0455 * s_1266 - s_0979 * s_1322 / Keq_0816) / (Km0455_0816 * Km1266_0816) / ((1 + s_0455 / Km0455_0816) * (1 + s_1266 / Km1266_0816) + (1 + s_0979 / Km0979_0816) * (1 + s_1322 / Km1322_0816) - 1)),
D(s_0142) ~ -1.0 * (cell * Vmax_0014 * (s_0142 - s_0313 * s_0419 / Keq_0014) / Km0142_0014 / (1 + s_0142 / Km0142_0014 + (1 + s_0313 / Km0313_0014) * (1 + s_0419 / Km0419_0014) - 1))+1.0 * (cell * Vmax_0015 * (s_0141 * s_1212 - s_0142 * s_1207 / Keq_0015) / (Km0141_0015 * Km1212_0015) / ((1 + s_0141 / Km0141_0015) * (1 + s_1212 / Km1212_0015) + (1 + s_0142 / Km0142_0015) * (1 + s_1207 / Km1207_0015) - 1)),
D(s_1445) ~ +1.0 * (cell * Vmax_0041 * (s_0231 * s_1212 - s_1207 * s_1445 / Keq_0041) / (Km0231_0041 * Km1212_0041) / ((1 + s_0231 / Km0231_0041) * (1 + s_1212 / Km1212_0041) + (1 + s_1207 / Km1207_0041) * (1 + s_1445 / Km1445_0041) - 1))-1.0 * (cell * Vmax_0340 * (s_1084 * s_1445 - s_0475 / Keq_0340) / (Km1084_0340 * Km1445_0340) / ((1 + s_1084 / Km1084_0340) * (1 + s_1445 / Km1445_0340) + 1 + s_0475 / Km0475_0340 - 1))-1.0 * (cell * Vmax_0922 * (s_1212 * s_1275 * s_1445 - s_1207 * s_1366 / Keq_0922) / (Km1212_0922 * Km1275_0922 * Km1445_0922) / ((1 + s_1212 / Km1212_0922) * (1 + s_1275 / Km1275_0922) * (1 + s_1445 / Km1445_0922) + (1 + s_1207 / Km1207_0922) * (1 + s_1366 / Km1366_0922) - 1)),
D(s_1266) ~ -1.0 * (cell * Vmax_0816 * (s_0455 * s_1266 - s_0979 * s_1322 / Keq_0816) / (Km0455_0816 * Km1266_0816) / ((1 + s_0455 / Km0455_0816) * (1 + s_1266 / Km1266_0816) + (1 + s_0979 / Km0979_0816) * (1 + s_1322 / Km1322_0816) - 1))+1.0 * (cell * Vmax_0818 * (s_0991 * s_1182 - s_1192 * s_1266 / Keq_0818) / (Km0991_0818 * Km1182_0818) / ((1 + s_0991 / Km0991_0818) * (1 + s_1182 / Km1182_0818) + (1 + s_1192 / Km1192_0818) * (1 + s_1266 / Km1266_0818) - 1)),
D(s_1277) ~ -1.0 * (cell * Vmax_1979 * (s_1277 - s_1275) / Km1277_1979 / (1 + s_1277 / Km1277_1979 + 1 + s_1275 / Km1275_1979 - 1)),
D(s_0750) ~ +2.0 * (cell * Vmax_0481 * (s_0754 * s_1212 - (s_0750)^(2) * s_1207 / Keq_0481) / (Km0754_0481 * Km1212_0481) / ((1 + s_0754 / Km0754_0481) * (1 + s_1212 / Km1212_0481) + (1 + s_0750 / Km0750_0481)^(2) * (1 + s_1207 / Km1207_0481) - 1))-2.0 * (cell * Vmax_0483 * ((s_0750)^(2) * s_0837 - s_0754 / Keq_0483) / ((Km0750_0483)^(2) * Km0837_0483) / ((1 + s_0750 / Km0750_0483)^(2) * (1 + s_0837 / Km0837_0483) + 1 + s_0754 / Km0754_0483 - 1))+1.0 * (cell * Vmax_0553 * (s_0033 - s_0025 * s_0750 / Keq_0553) / Km0033_0553 / (1 + s_0033 / Km0033_0553 + (1 + s_0025 / Km0025_0553) * (1 + s_0750 / Km0750_0553) - 1))-1.0 * (cell * Vmax_0697 * (s_0750 * s_1151 - s_0033 / Keq_0697) / (Km0750_0697 * Km1151_0697) / ((1 + s_0750 / Km0750_0697) * (1 + s_1151 / Km1151_0697) + 1 + s_0033 / Km0033_0697 - 1)),
D(s_0324) ~ +1.0 * (cell * Vmax_0065 * (s_0261 * s_1360 - s_0324 * s_1322 / Keq_0065) / (Km0261_0065 * Km1360_0065) / ((1 + s_0261 / Km0261_0065) * (1 + s_1360 / Km1360_0065) + (1 + s_0324 / Km0324_0065) * (1 + s_1322 / Km1322_0065) - 1))-1.0 * (cell * Vmax_0279 * (s_0324 - s_0515 * s_1322 / Keq_0279) / Km0324_0279 / (1 + s_0324 / Km0324_0279 + (1 + s_0515 / Km0515_0279) * (1 + s_1322 / Km1322_0279) - 1)),
D(s_0516) ~ -1.0 * (cell * Vmax_0280 * (s_0516 - s_0940 / Keq_0280) / Km0516_0280 / (1 + s_0516 / Km0516_0280 + 1 + s_0940 / Km0940_0280 - 1))+1.0 * (cell * Vmax_0302 * (s_0522 - s_0516 / Keq_0302) / Km0522_0302 / (1 + s_0522 / Km0522_0302 + 1 + s_0516 / Km0516_0302 - 1)),
D(s_1011) ~ -1.0 * (cell * Vmax_0537 * (s_1011 - s_1010 * s_1322 / Keq_0537) / Km1011_0537 / (1 + s_1011 / Km1011_0537 + (1 + s_1010 / Km1010_0537) * (1 + s_1322 / Km1322_0537) - 1))+1.0 * (cell * Vmax_0538 * (s_0207 * s_0991 - s_0180 * s_1011 / Keq_0538) / (Km0207_0538 * Km0991_0538) / ((1 + s_0207 / Km0207_0538) * (1 + s_0991 / Km0991_0538) + (1 + s_0180 / Km0180_0538) * (1 + s_1011 / Km1011_0538) - 1)),
D(s_1360) ~ -1.0 * (cell * Vmax_0020 * (s_0551 * s_1360 - s_0349 * s_1322 / Keq_0020) / (Km0551_0020 * Km1360_0020) / ((1 + s_0551 / Km0551_0020) * (1 + s_1360 / Km1360_0020) + (1 + s_0349 / Km0349_0020) * (1 + s_1322 / Km1322_0020) - 1))-1.0 * (cell * Vmax_0065 * (s_0261 * s_1360 - s_0324 * s_1322 / Keq_0065) / (Km0261_0065 * Km1360_0065) / ((1 + s_0261 / Km0261_0065) * (1 + s_1360 / Km1360_0065) + (1 + s_0324 / Km0324_0065) * (1 + s_1322 / Km1322_0065) - 1))+1.0 * (cell * Vmax_0366 * (s_0188 - s_1360 / Keq_0366) / Km0188_0366 / (1 + s_0188 / Km0188_0366 + 1 + s_1360 / Km1360_0366 - 1))-1.0 * (cell * Vmax_0962 * (s_0394 * s_1360 - s_0434 * s_1399 / Keq_0962) / (Km0394_0962 * Km1360_0962) / ((1 + s_0394 / Km0394_0962) * (1 + s_1360 / Km1360_0962) + (1 + s_0434 / Km0434_0962) * (1 + s_1399 / Km1399_0962) - 1)),
D(s_1270) ~ +1.0 * (cell * Vmax_0820 * (s_1269 * s_1386 - s_0633 * s_1270 / Keq_0820) / (Km1269_0820 * Km1386_0820) / ((1 + s_1269 / Km1269_0820) * (1 + s_1386 / Km1386_0820) + (1 + s_0633 / Km0633_0820) * (1 + s_1270 / Km1270_0820) - 1))-1.0 * (cell * Vmax_0821 * (s_1270 - s_0456 * s_1545 / Keq_0821) / Km1270_0821 / (1 + s_1270 / Km1270_0821 + (1 + s_0456 / Km0456_0821) * (1 + s_1545 / Km1545_0821) - 1)),
D(s_0522) ~ +1.0 * (cell * Vmax_0300 * (s_0373 * s_1271 - s_0522 * s_0529 / Keq_0300) / (Km0373_0300 * Km1271_0300) / ((1 + s_0373 / Km0373_0300) * (1 + s_1271 / Km1271_0300) + (1 + s_0522 / Km0522_0300) * (1 + s_0529 / Km0529_0300) - 1))-1.0 * (cell * Vmax_0302 * (s_0522 - s_0516 / Keq_0302) / Km0522_0302 / (1 + s_0522 / Km0522_0302 + 1 + s_0516 / Km0516_0302 - 1)),
D(s_0573) ~ -1.0 * (cell * Vmax_0722 * (s_0573 * s_0785 - s_0633 * s_0743 / Keq_0722) / (Km0573_0722 * Km0785_0722) / ((1 + s_0573 / Km0573_0722) * (1 + s_0785 / Km0785_0722) + (1 + s_0633 / Km0633_0722) * (1 + s_0743 / Km0743_0722) - 1))+1.0 * (cell * Vmax_0902 * (s_0574 - s_0573 / Keq_0902) / Km0574_0902 / (1 + s_0574 / Km0574_0902 + 1 + s_0573 / Km0573_0902 - 1)),
D(s_0722) ~ +1.0 * (cell * Vmax_0038 * (s_0577 - s_0158 * s_0722 / Keq_0038) / Km0577_0038 / (1 + s_0577 / Km0577_0038 + (1 + s_0158 / Km0158_0038) * (1 + s_0722 / Km0722_0038) - 1))+1.0 * (cell * Vmax_0317 * (s_1059 * (s_1212)^(3) * (s_1275)^(3) - s_0262 * s_0722 * (s_1207)^(3) / Keq_0317) / (Km1059_0317 * (Km1212_0317)^(3) * (Km1275_0317)^(3)) / ((1 + s_1059 / Km1059_0317) * (1 + s_1212 / Km1212_0317)^(3) * (1 + s_1275 / Km1275_0317)^(3) + (1 + s_0262 / Km0262_0317) * (1 + s_0722 / Km0722_0317) * (1 + s_1207 / Km1207_0317)^(3) - 1))-1.0 * (cell * Vmax_0445 * (s_0722 * s_1198 - s_0456 * s_1203 / Keq_0445) / (Km0722_0445 * Km1198_0445) / ((1 + s_0722 / Km0722_0445) * (1 + s_1198 / Km1198_0445) + (1 + s_0456 / Km0456_0445) * (1 + s_1203 / Km1203_0445) - 1))+1.0 * (cell * Vmax_0446 * (s_0120 * s_0394 * s_1322 - s_0434 * s_0722 * s_1487 / Keq_0446) / (Km0120_0446 * Km0394_0446 * Km1322_0446) / ((1 + s_0120 / Km0120_0446) * (1 + s_0394 / Km0394_0446) * (1 + s_1322 / Km1322_0446) + (1 + s_0434 / Km0434_0446) * (1 + s_0722 / Km0722_0446) * (1 + s_1487 / Km1487_0446) - 1))+1.0 * (cell * Vmax_0525 * (s_0785 - s_0141 * s_0633 * s_0722 / Keq_0525) / Km0785_0525 / (1 + s_0785 / Km0785_0525 + (1 + s_0141 / Km0141_0525) * (1 + s_0633 / Km0633_0525) * (1 + s_0722 / Km0722_0525) - 1))+1.0 * (cell * Vmax_0762 * (s_1195 - s_0722 * s_1020 / Keq_0762) / Km1195_0762 / (1 + s_1195 / Km1195_0762 + (1 + s_0722 / Km0722_0762) * (1 + s_1020 / Km1020_0762) - 1)),
D(s_1521) ~ +1.0 * (cell * Vmax_2079 * s_1520 / Km1520_2079 / (1 + s_1520 / Km1520_2079)),
D(s_0326) ~ +1.0 * (cell * Vmax_0225 * (s_0434 * s_1386 - s_0326 * s_0633 / Keq_0225) / (Km0434_0225 * Km1386_0225) / ((1 + s_0434 / Km0434_0225) * (1 + s_1386 / Km1386_0225) + (1 + s_0326 / Km0326_0225) * (1 + s_0633 / Km0633_0225) - 1))-1.0 * (cell * Vmax_0910 * (s_0326 - s_0078 * s_0633 / Keq_0910) / Km0326_0910 / (1 + s_0326 / Km0326_0910 + (1 + s_0078 / Km0078_0910) * (1 + s_0633 / Km0633_0910) - 1)),
D(s_1449) ~ +1.0 * (cell * Vmax_0391 * (s_1101 * (s_1212)^(2) * s_1286 - s_0456 * s_0529 * (s_1207)^(2) * s_1449 / Keq_0391) / (Km1101_0391 * (Km1212_0391)^(2) * Km1286_0391) / ((1 + s_1101 / Km1101_0391) * (1 + s_1212 / Km1212_0391)^(2) * (1 + s_1286 / Km1286_0391) + (1 + s_0456 / Km0456_0391) * (1 + s_0529 / Km0529_0391) * (1 + s_1207 / Km1207_0391)^(2) * (1 + s_1449 / Km1449_0391) - 1))-1.0 * (cell * Vmax_0393 * ((s_1101)^(3) * (s_1212)^(6) * s_1449 - (s_0456)^(3) * (s_0529)^(3) * s_1084 * (s_1207)^(6) / Keq_0393) / ((Km1101_0393)^(3) * (Km1212_0393)^(6) * Km1449_0393) / ((1 + s_1101 / Km1101_0393)^(3) * (1 + s_1212 / Km1212_0393)^(6) * (1 + s_1449 / Km1449_0393) + (1 + s_0456 / Km0456_0393)^(3) * (1 + s_0529 / Km0529_0393)^(3) * (1 + s_1084 / Km1084_0393) * (1 + s_1207 / Km1207_0393)^(6) - 1))+1.0 * (cell * Vmax_0407 * (s_0423 * s_0633 * s_1454 - s_0434 * s_0529 * s_1449 / Keq_0407) / (Km0423_0407 * Km0633_0407 * Km1454_0407) / ((1 + s_0423 / Km0423_0407) * (1 + s_0633 / Km0633_0407) * (1 + s_1454 / Km1454_0407) + (1 + s_0434 / Km0434_0407) * (1 + s_0529 / Km0529_0407) * (1 + s_1449 / Km1449_0407) - 1)),
D(s_0211) ~ +1.0 * (cell * Vmax_0039 * (s_0210 - s_0211 / Keq_0039) / Km0210_0039 / (1 + s_0210 / Km0210_0039 + 1 + s_0211 / Km0211_0039 - 1))-1.0 * (cell * Vmax_0996 * (s_0211 * s_1212 - s_1207 * s_1429 / Keq_0996) / (Km0211_0996 * Km1212_0996) / ((1 + s_0211 / Km0211_0996) * (1 + s_1212 / Km1212_0996) + (1 + s_1207 / Km1207_0996) * (1 + s_1429 / Km1429_0996) - 1)),
D(s_0062) ~ +1.0 * (cell * Vmax_0688 * (s_1151 * s_1212 - s_0062 * s_1207 / Keq_0688) / (Km1151_0688 * Km1212_0688) / ((1 + s_1151 / Km1151_0688) * (1 + s_1212 / Km1212_0688) + (1 + s_0062 / Km0062_0688) * (1 + s_1207 / Km1207_0688) - 1))-1.0 * (cell * Vmax_0696 * (s_0062 * s_1198 - s_0063 * s_1203 / Keq_0696) / (Km0062_0696 * Km1198_0696) / ((1 + s_0062 / Km0062_0696) * (1 + s_1198 / Km1198_0696) + (1 + s_0063 / Km0063_0696) * (1 + s_1203 / Km1203_0696) - 1)),
D(s_1427) ~ -1.0 * (cell * Vmax_0887 * (s_0434 * s_1427 - s_0394 * s_1426 / Keq_0887) / (Km0434_0887 * Km1427_0887) / ((1 + s_0434 / Km0434_0887) * (1 + s_1427 / Km1427_0887) + (1 + s_0394 / Km0394_0887) * (1 + s_1426 / Km1426_0887) - 1))+1.0 * (cell * Vmax_1049 * (s_0581 * s_1408 - s_0764 * s_1427 / Keq_1049) / (Km0581_1049 * Km1408_1049) / ((1 + s_0581 / Km0581_1049) * (1 + s_1408 / Km1408_1049) + (1 + s_0764 / Km0764_1049) * (1 + s_1427 / Km1427_1049) - 1)),
D(s_0141) ~ -1.0 * (cell * Vmax_0015 * (s_0141 * s_1212 - s_0142 * s_1207 / Keq_0015) / (Km0141_0015 * Km1212_0015) / ((1 + s_0141 / Km0141_0015) * (1 + s_1212 / Km1212_0015) + (1 + s_0142 / Km0142_0015) * (1 + s_1207 / Km1207_0015) - 1))+1.0 * (cell * Vmax_0525 * (s_0785 - s_0141 * s_0633 * s_0722 / Keq_0525) / Km0785_0525 / (1 + s_0785 / Km0785_0525 + (1 + s_0141 / Km0141_0525) * (1 + s_0633 / Km0633_0525) * (1 + s_0722 / Km0722_0525) - 1)),
D(s_0773) ~ +1.0 * (cell * Vmax_0510 * (s_1543 - s_0773 * s_1538 / Keq_0510) / Km1543_0510 / (1 + s_1543 / Km1543_0510 + (1 + s_0773 / Km0773_0510) * (1 + s_1538 / Km1538_0510) - 1))-0.519 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_0981) ~ +1.0 * (cell * Vmax_0310 * (s_0980 - s_0178 * s_0419 * s_0981 / Keq_0310) / Km0980_0310 / (1 + s_0980 / Km0980_0310 + (1 + s_0178 / Km0178_0310) * (1 + s_0419 / Km0419_0310) * (1 + s_0981 / Km0981_0310) - 1))-1.0 * (cell * Vmax_0311 * (s_0981 * s_1233 - s_0362 * s_0980 / Keq_0311) / (Km0981_0311 * Km1233_0311) / ((1 + s_0981 / Km0981_0311) * (1 + s_1233 / Km1233_0311) + (1 + s_0362 / Km0362_0311) * (1 + s_0980 / Km0980_0311) - 1))+1.0 * (cell * Vmax_0312 * (s_0841 * s_1234 - s_0362 * s_0981 / Keq_0312) / (Km0841_0312 * Km1234_0312) / ((1 + s_0841 / Km0841_0312) * (1 + s_1234 / Km1234_0312) + (1 + s_0362 / Km0362_0312) * (1 + s_0981 / Km0981_0312) - 1))-0.0429 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_0955) ~ +1.0 * (cell * Vmax_0670 * (s_1020 - s_0427 * s_0955 / Keq_0670) / Km1020_0670 / (1 + s_1020 / Km1020_0670 + (1 + s_0427 / Km0427_0670) * (1 + s_0955 / Km0955_0670) - 1))+1.0 * (cell * Vmax_0674 * (s_0991 * s_1399 - s_0180 * s_0955 / Keq_0674) / (Km0991_0674 * Km1399_0674) / ((1 + s_0991 / Km0991_0674) * (1 + s_1399 / Km1399_0674) + (1 + s_0180 / Km0180_0674) * (1 + s_0955 / Km0955_0674) - 1))-0.357 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_1003) ~ +1.0 * (cell * Vmax_0502 * (s_1039 * s_1487 - s_0306 * s_1003 / Keq_0502) / (Km1039_0502 * Km1487_0502) / ((1 + s_1039 / Km1039_0502) * (1 + s_1487 / Km1487_0502) + (1 + s_0306 / Km0306_0502) * (1 + s_1003 / Km1003_0502) - 1))-1.0 * (cell * Vmax_0914 * (s_0327 * s_0434 * s_1003 - s_0325 * s_0394 * s_1322 / Keq_0914) / (Km0327_0914 * Km0434_0914 * Km1003_0914) / ((1 + s_0327 / Km0327_0914) * (1 + s_0434 / Km0434_0914) * (1 + s_1003 / Km1003_0914) + (1 + s_0325 / Km0325_0914) * (1 + s_0394 / Km0394_0914) * (1 + s_1322 / Km1322_0914) - 1))-0.325 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_0587) ~ +1.0 * (cell * Vmax_0976 * (s_0467 * s_1616 - s_0587 * s_1620 / Keq_0976) / (Km0467_0976 * Km1616_0976) / ((1 + s_0467 / Km0467_0976) * (1 + s_1616 / Km1616_0976) + (1 + s_0587 / Km0587_0976) * (1 + s_1620 / Km1620_0976) - 1))-1.0 * (cell * Vmax_1704 * (s_0394 * s_0587 - s_0434 * s_0589 / Keq_1704) / (Km0394_1704 * Km0587_1704) / ((1 + s_0394 / Km0394_1704) * (1 + s_0587 / Km0587_1704) + (1 + s_0434 / Km0434_1704) * (1 + s_0589 / Km0589_1704) - 1)),
D(s_0393) ~ -1.0 * (cell * Vmax_0152 * (s_0393 - s_0423 * s_0725 / Keq_0152) / Km0393_0152 / (1 + s_0393 / Km0393_0152 + (1 + s_0423 / Km0423_0152) * (1 + s_0725 / Km0725_0152) - 1))+1.0 * (cell * Vmax_0153 * (s_0785 * s_0849 * s_0973 - s_0393 * s_0739 * s_1322 / Keq_0153) / (Km0785_0153 * Km0849_0153 * Km0973_0153) / ((1 + s_0785 / Km0785_0153) * (1 + s_0849 / Km0849_0153) * (1 + s_0973 / Km0973_0153) + (1 + s_0393 / Km0393_0153) * (1 + s_0739 / Km0739_0153) * (1 + s_1322 / Km1322_0153) - 1)),
D(s_1538) ~ +1.0 * (cell * Vmax_0005 * (s_1543 - s_0002 * s_1538 / Keq_0005) / Km1543_0005 / (1 + s_1543 / Km1543_0005 + (1 + s_0002 / Km0002_0005) * (1 + s_1538 / Km1538_0005) - 1))+1.0 * (cell * Vmax_0195 * (s_0568 * s_1543 - s_0409 * s_1538 / Keq_0195) / (Km0568_0195 * Km1543_0195) / ((1 + s_0568 / Km0568_0195) * (1 + s_1543 / Km1543_0195) + (1 + s_0409 / Km0409_0195) * (1 + s_1538 / Km1538_0195) - 1))+1.0 * (cell * Vmax_0510 * (s_1543 - s_0773 * s_1538 / Keq_0510) / Km1543_0510 / (1 + s_1543 / Km1543_0510 + (1 + s_0773 / Km0773_0510) * (1 + s_1538 / Km1538_0510) - 1))-1.0 * (cell * Vmax_0811 * (s_0434 * s_1538 - s_0394 * s_1559 / Keq_0811) / (Km0434_0811 * Km1538_0811) / ((1 + s_0434 / Km0434_0811) * (1 + s_1538 / Km1538_0811) + (1 + s_0394 / Km0394_0811) * (1 + s_1559 / Km1559_0811) - 1))+1.0 * (cell * Vmax_1072 * (s_0434 * s_1545 - s_0394 * s_1538 / Keq_1072) / (Km0434_1072 * Km1545_1072) / ((1 + s_0434 / Km0434_1072) * (1 + s_1545 / Km1545_1072) + (1 + s_0394 / Km0394_1072) * (1 + s_1538 / Km1538_1072) - 1)),
D(s_0162) ~ -1.0 * (cell * Vmax_0023 * (s_0162 - s_0165 / Keq_0023) / Km0162_0023 / (1 + s_0162 / Km0162_0023 + 1 + s_0165 / Km0165_0023 - 1))+1.0 * (cell * Vmax_0024 * (s_0232 * s_0373 - s_0162 * s_0529 / Keq_0024) / (Km0232_0024 * Km0373_0024) / ((1 + s_0232 / Km0232_0024) * (1 + s_0373 / Km0373_0024) + (1 + s_0162 / Km0162_0024) * (1 + s_0529 / Km0529_0024) - 1)),
D(s_0180) ~ +1.0 * (cell * Vmax_0018 * (s_0176 * s_0991 - s_0180 * s_0953 / Keq_0018) / (Km0176_0018 * Km0991_0018) / ((1 + s_0176 / Km0176_0018) * (1 + s_0991 / Km0991_0018) + (1 + s_0180 / Km0180_0018) * (1 + s_0953 / Km0953_0018) - 1))+1.0 * (cell * Vmax_0118 * (s_0145 * s_0991 - s_0180 * s_1182 / Keq_0118) / (Km0145_0118 * Km0991_0118) / ((1 + s_0145 / Km0145_0118) * (1 + s_0991 / Km0991_0118) + (1 + s_0180 / Km0180_0118) * (1 + s_1182 / Km1182_0118) - 1))+1.0 * (cell * Vmax_0216 * (s_0991 * s_1271 - s_0180 * s_0973 / Keq_0216) / (Km0991_0216 * Km1271_0216) / ((1 + s_0991 / Km0991_0216) * (1 + s_1271 / Km1271_0216) + (1 + s_0180 / Km0180_0216) * (1 + s_0973 / Km0973_0216) - 1))-1.0 * (cell * Vmax_0470 * (s_0180 * s_0419 * s_1203 - s_0991 * s_1198 / Keq_0470) / (Km0180_0470 * Km0419_0470 * Km1203_0470) / ((1 + s_0180 / Km0180_0470) * (1 + s_0419 / Km0419_0470) * (1 + s_1203 / Km1203_0470) + (1 + s_0991 / Km0991_0470) * (1 + s_1198 / Km1198_0470) - 1))-1.0 * (cell * Vmax_0471 * (s_0180 * s_0419 * s_1212 - s_0991 * s_1207 / Keq_0471) / (Km0180_0471 * Km0419_0471 * Km1212_0471) / ((1 + s_0180 / Km0180_0471) * (1 + s_0419 / Km0419_0471) * (1 + s_1212 / Km1212_0471) + (1 + s_0991 / Km0991_0471) * (1 + s_1207 / Km1207_0471) - 1))+1.0 * (cell * Vmax_0538 * (s_0207 * s_0991 - s_0180 * s_1011 / Keq_0538) / (Km0207_0538 * Km0991_0538) / ((1 + s_0207 / Km0207_0538) * (1 + s_0991 / Km0991_0538) + (1 + s_0180 / Km0180_0538) * (1 + s_1011 / Km1011_0538) - 1))-1.0 * (cell * Vmax_0543 * (s_0180 * s_0373 - s_0529 * s_0835 / Keq_0543) / (Km0180_0543 * Km0373_0543) / ((1 + s_0180 / Km0180_0543) * (1 + s_0373 / Km0373_0543) + (1 + s_0529 / Km0529_0543) * (1 + s_0835 / Km0835_0543) - 1))+1.0 * (cell * Vmax_0658 * (s_0940 * s_1198 - s_0180 * s_0456 * s_1203 / Keq_0658) / (Km0940_0658 * Km1198_0658) / ((1 + s_0940 / Km0940_0658) * (1 + s_1198 / Km1198_0658) + (1 + s_0180 / Km0180_0658) * (1 + s_0456 / Km0456_0658) * (1 + s_1203 / Km1203_0658) - 1))+1.0 * (cell * Vmax_0661 * (s_0940 * s_1207 - s_0180 * s_0456 * s_1212 / Keq_0661) / (Km0940_0661 * Km1207_0661) / ((1 + s_0940 / Km0940_0661) * (1 + s_1207 / Km1207_0661) + (1 + s_0180 / Km0180_0661) * (1 + s_0456 / Km0456_0661) * (1 + s_1212 / Km1212_0661) - 1))+1.0 * (cell * Vmax_0663 * (s_0056 * s_0991 - s_0180 * s_1016 / Keq_0663) / (Km0056_0663 * Km0991_0663) / ((1 + s_0056 / Km0056_0663) * (1 + s_0991 / Km0991_0663) + (1 + s_0180 / Km0180_0663) * (1 + s_1016 / Km1016_0663) - 1))+1.0 * (cell * Vmax_0674 * (s_0991 * s_1399 - s_0180 * s_0955 / Keq_0674) / (Km0991_0674 * Km1399_0674) / ((1 + s_0991 / Km0991_0674) * (1 + s_1399 / Km1399_0674) + (1 + s_0180 / Km0180_0674) * (1 + s_0955 / Km0955_0674) - 1))+1.0 * (cell * Vmax_0699 * (s_0291 * s_0991 - s_0180 * s_1021 / Keq_0699) / (Km0291_0699 * Km0991_0699) / ((1 + s_0291 / Km0291_0699) * (1 + s_0991 / Km0991_0699) + (1 + s_0180 / Km0180_0699) * (1 + s_1021 / Km1021_0699) - 1))+1.0 * (cell * Vmax_0851 * (s_0951 * s_0991 - s_0180 * s_1032 / Keq_0851) / (Km0951_0851 * Km0991_0851) / ((1 + s_0951 / Km0951_0851) * (1 + s_0991 / Km0991_0851) + (1 + s_0180 / Km0180_0851) * (1 + s_1032 / Km1032_0851) - 1))+1.0 * (cell * Vmax_0918 * (s_0258 * s_0991 - s_0180 * s_0259 / Keq_0918) / (Km0258_0918 * Km0991_0918) / ((1 + s_0258 / Km0258_0918) * (1 + s_0991 / Km0991_0918) + (1 + s_0180 / Km0180_0918) * (1 + s_0259 / Km0259_0918) - 1))+1.0 * (cell * Vmax_0988 * (s_1038 * s_1198 - s_0180 * s_1025 * s_1203 / Keq_0988) / (Km1038_0988 * Km1198_0988) / ((1 + s_1038 / Km1038_0988) * (1 + s_1198 / Km1198_0988) + (1 + s_0180 / Km0180_0988) * (1 + s_1025 / Km1025_0988) * (1 + s_1203 / Km1203_0988) - 1))+1.0 * (cell * Vmax_1063 * (s_0204 * s_0991 - s_0180 * s_1051 / Keq_1063) / (Km0204_1063 * Km0991_1063) / ((1 + s_0204 / Km0204_1063) * (1 + s_0991 / Km0991_1063) + (1 + s_0180 / Km0180_1063) * (1 + s_1051 / Km1051_1063) - 1))+1.0 * (cell * Vmax_1087 * (s_0232 * s_0991 - s_0180 * s_1056 / Keq_1087) / (Km0232_1087 * Km0991_1087) / ((1 + s_0232 / Km0232_1087) * (1 + s_0991 / Km0991_1087) + (1 + s_0180 / Km0180_1087) * (1 + s_1056 / Km1056_1087) - 1)),
D(s_0574) ~ +1.0 * (cell * Vmax_0723 * (s_0557 - s_0574 / Keq_0723) / Km0557_0723 / (1 + s_0557 / Km0557_0723 + 1 + s_0574 / Km0574_0723 - 1))-1.0 * (cell * Vmax_0902 * (s_0574 - s_0573 / Keq_0902) / Km0574_0902 / (1 + s_0574 / Km0574_0902 + 1 + s_0573 / Km0573_0902 - 1)),
D(s_0745) ~ +1.0 * (cell * Vmax_0355 * (s_0943 * s_1376 - s_0633 * s_0745 / Keq_0355) / (Km0943_0355 * Km1376_0355) / ((1 + s_0943 / Km0943_0355) * (1 + s_1376 / Km1376_0355) + (1 + s_0633 / Km0633_0355) * (1 + s_0745 / Km0745_0355) - 1))-1.0 * (cell * Vmax_0462 * (s_0745 * s_0943 - s_0190 * s_0633 / Keq_0462) / (Km0745_0462 * Km0943_0462) / ((1 + s_0745 / Km0745_0462) * (1 + s_0943 / Km0943_0462) + (1 + s_0190 / Km0190_0462) * (1 + s_0633 / Km0633_0462) - 1)),
D(s_0335) ~ -1.0 * (cell * Vmax_0091 * (s_0335 - s_0340 / Keq_0091) / Km0335_0091 / (1 + s_0335 / Km0335_0091 + 1 + s_0340 / Km0340_0091 - 1))+1.0 * (cell * Vmax_0466 * (s_0568 * s_1207 - s_0335 * s_1212 / Keq_0466) / (Km0568_0466 * Km1207_0466) / ((1 + s_0568 / Km0568_0466) * (1 + s_1207 / Km1207_0466) + (1 + s_0335 / Km0335_0466) * (1 + s_1212 / Km1212_0466) - 1)),
D(s_0328) ~ +1.0 * (cell * Vmax_0967 * (s_0158 * s_0314 - s_0328 * s_1322 / Keq_0967) / (Km0158_0967 * Km0314_0967) / ((1 + s_0158 / Km0158_0967) * (1 + s_0314 / Km0314_0967) + (1 + s_0328 / Km0328_0967) * (1 + s_1322 / Km1322_0967) - 1))-2.0 * (cell * Vmax_0968 * ((s_0328)^(2) - s_0314 * s_1405 / Keq_0968) / (Km0328_0968)^(2) / ((1 + s_0328 / Km0328_0968)^(2) + (1 + s_0314 / Km0314_0968) * (1 + s_1405 / Km1405_0968) - 1)),
D(s_0367) ~ +1.0 * (cell * Vmax_0103 * ((s_0373)^(2) - s_0367 * s_0529 / Keq_0103) / (Km0373_0103)^(2) / ((1 + s_0373 / Km0373_0103)^(2) + (1 + s_0367 / Km0367_0103) * (1 + s_0529 / Km0529_0103) - 1))-1.0 * (cell * Vmax_0559 * (s_0367 * s_0373 - s_0218 * s_0529 / Keq_0559) / (Km0367_0559 * Km0373_0559) / ((1 + s_0367 / Km0367_0559) * (1 + s_0373 / Km0373_0559) + (1 + s_0218 / Km0218_0559) * (1 + s_0529 / Km0529_0559) - 1)),
D(s_0765) ~ +1.0 * (cell * Vmax_0489 * (s_0767 - s_0765 * s_1322 / Keq_0489) / Km0767_0489 / (1 + s_0767 / Km0767_0489 + (1 + s_0765 / Km0765_0489) * (1 + s_1322 / Km1322_0489) - 1))-1.0 * (cell * Vmax_1172 * s_0765 / Km0765_1172 / (1 + s_0765 / Km0765_1172)),
D(s_1416) ~ +1.0 * (cell * Vmax_0726 * (s_0434 * s_1029 - s_0633 * s_1322 * s_1416 / Keq_0726) / (Km0434_0726 * Km1029_0726) / ((1 + s_0434 / Km0434_0726) * (1 + s_1029 / Km1029_0726) + (1 + s_0633 / Km0633_0726) * (1 + s_1322 / Km1322_0726) * (1 + s_1416 / Km1416_0726) - 1))-1.0 * (cell * Vmax_0858 * (s_1351 * s_1416 - s_1343 * s_1413 / Keq_0858) / (Km1351_0858 * Km1416_0858) / ((1 + s_1351 / Km1351_0858) * (1 + s_1416 / Km1416_0858) + (1 + s_1343 / Km1343_0858) * (1 + s_1413 / Km1413_0858) - 1))-1.0 * (cell * Vmax_0900 * (s_1342 * s_1416 - s_1346 * s_1413 / Keq_0900) / (Km1342_0900 * Km1416_0900) / ((1 + s_1342 / Km1342_0900) * (1 + s_1416 / Km1416_0900) + (1 + s_1346 / Km1346_0900) * (1 + s_1413 / Km1413_0900) - 1))-1.0 * (cell * Vmax_0901 * (s_1343 * s_1416 - s_1342 * s_1413 / Keq_0901) / (Km1343_0901 * Km1416_0901) / ((1 + s_1343 / Km1343_0901) * (1 + s_1416 / Km1416_0901) + (1 + s_1342 / Km1342_0901) * (1 + s_1413 / Km1413_0901) - 1))-1.0 * (cell * Vmax_0986 * (s_1416 * s_1569 - s_0700 * s_1413 / Keq_0986) / (Km1416_0986 * Km1569_0986) / ((1 + s_1416 / Km1416_0986) * (1 + s_1569 / Km1569_0986) + (1 + s_0700 / Km0700_0986) * (1 + s_1413 / Km1413_0986) - 1)),
D(s_1468) ~ -1.0 * (cell * Vmax_1266 * (s_1468 - s_1467) / Km1468_1266 / (1 + s_1468 / Km1468_1266 + 1 + s_1467 / Km1467_1266 - 1)),
D(s_1198) ~ +1.0 * (cell * Vmax_0012 * (s_0991 * s_1203 - s_0118 * s_1198 / Keq_0012) / (Km0991_0012 * Km1203_0012) / ((1 + s_0991 / Km0991_0012) * (1 + s_1203 / Km1203_0012) + (1 + s_0118 / Km0118_0012) * (1 + s_1198 / Km1198_0012) - 1))-1.0 * (cell * Vmax_0061 * (s_0009 * s_1198 - s_0010 * s_1203 / Keq_0061) / (Km0009_0061 * Km1198_0061) / ((1 + s_0009 / Km0009_0061) * (1 + s_1198 / Km1198_0061) + (1 + s_0010 / Km0010_0061) * (1 + s_1203 / Km1203_0061) - 1))+1.0 * (cell * Vmax_0165 * (s_0359 * s_1203 - s_0680 * s_1198 / Keq_0165) / (Km0359_0165 * Km1203_0165) / ((1 + s_0359 / Km0359_0165) * (1 + s_1203 / Km1203_0165) + (1 + s_0680 / Km0680_0165) * (1 + s_1198 / Km1198_0165) - 1))-1.0 * (cell * Vmax_0235 * (s_0297 * s_1198 - s_0209 * s_0456 * s_1203 / Keq_0235) / (Km0297_0235 * Km1198_0235) / ((1 + s_0297 / Km0297_0235) * (1 + s_1198 / Km1198_0235) + (1 + s_0209 / Km0209_0235) * (1 + s_0456 / Km0456_0235) * (1 + s_1203 / Km1203_0235) - 1))-1.0 * (cell * Vmax_0445 * (s_0722 * s_1198 - s_0456 * s_1203 / Keq_0445) / (Km0722_0445 * Km1198_0445) / ((1 + s_0722 / Km0722_0445) * (1 + s_1198 / Km1198_0445) + (1 + s_0456 / Km0456_0445) * (1 + s_1203 / Km1203_0445) - 1))+1.0 * (cell * Vmax_0470 * (s_0180 * s_0419 * s_1203 - s_0991 * s_1198 / Keq_0470) / (Km0180_0470 * Km0419_0470 * Km1203_0470) / ((1 + s_0180 / Km0180_0470) * (1 + s_0419 / Km0419_0470) * (1 + s_1203 / Km1203_0470) + (1 + s_0991 / Km0991_0470) * (1 + s_1198 / Km1198_0470) - 1))-1.0 * (cell * Vmax_0486 * (s_0764 * s_1198 * s_1322 - s_0075 * s_1203 / Keq_0486) / (Km0764_0486 * Km1198_0486 * Km1322_0486) / ((1 + s_0764 / Km0764_0486) * (1 + s_1198 / Km1198_0486) * (1 + s_1322 / Km1322_0486) + (1 + s_0075 / Km0075_0486) * (1 + s_1203 / Km1203_0486) - 1))+1.0 * (cell * Vmax_0491 * (s_0629 * s_1203 - s_0767 * s_1198 / Keq_0491) / (Km0629_0491 * Km1203_0491) / ((1 + s_0629 / Km0629_0491) * (1 + s_1203 / Km1203_0491) + (1 + s_0767 / Km0767_0491) * (1 + s_1198 / Km1198_0491) - 1))-2.0 * (cell * Vmax_0536 * (s_1010 * (s_1198)^(2) - s_1006 * (s_1203)^(2) / Keq_0536) / (Km1010_0536 * (Km1198_0536)^(2)) / ((1 + s_1010 / Km1010_0536) * (1 + s_1198 / Km1198_0536)^(2) + (1 + s_1006 / Km1006_0536) * (1 + s_1203 / Km1203_0536)^(2) - 1))-1.0 * (cell * Vmax_0545 * (s_0836 * s_1198 - s_0176 * s_1203 * s_0456 / Keq_0545) / (Km0836_0545 * Km1198_0545) / ((1 + s_0836 / Km0836_0545) * (1 + s_1198 / Km1198_0545) + (1 + s_0176 / Km0176_0545) * (1 + s_1203 / Km1203_0545) * (1 + s_0456 / Km0456_0545) - 1))-1.0 * (cell * Vmax_0565 * (s_0849 * s_1198 - s_1203 * s_1565 / Keq_0565) / (Km0849_0565 * Km1198_0565) / ((1 + s_0849 / Km0849_0565) * (1 + s_1198 / Km1198_0565) + (1 + s_1203 / Km1203_0565) * (1 + s_1565 / Km1565_0565) - 1))-1.0 * (cell * Vmax_0658 * (s_0940 * s_1198 - s_0180 * s_0456 * s_1203 / Keq_0658) / (Km0940_0658 * Km1198_0658) / ((1 + s_0940 / Km0940_0658) * (1 + s_1198 / Km1198_0658) + (1 + s_0180 / Km0180_0658) * (1 + s_0456 / Km0456_0658) * (1 + s_1203 / Km1203_0658) - 1))-1.0 * (cell * Vmax_0696 * (s_0062 * s_1198 - s_0063 * s_1203 / Keq_0696) / (Km0062_0696 * Km1198_0696) / ((1 + s_0062 / Km0062_0696) * (1 + s_1198 / Km1198_0696) + (1 + s_0063 / Km0063_0696) * (1 + s_1203 / Km1203_0696) - 1))-1.0 * (cell * Vmax_0713 * (s_0066 * s_1198 - s_1203 * s_1271 / Keq_0713) / (Km0066_0713 * Km1198_0713) / ((1 + s_0066 / Km0066_0713) * (1 + s_1198 / Km1198_0713) + (1 + s_1203 / Km1203_0713) * (1 + s_1271 / Km1271_0713) - 1))-1.0 * (cell * Vmax_0731 * (s_0306 * s_1198 - s_0304 * s_1203 / Keq_0731) / (Km0306_0731 * Km1198_0731) / ((1 + s_0306 / Km0306_0731) * (1 + s_1198 / Km1198_0731) + (1 + s_0304 / Km0304_0731) * (1 + s_1203 / Km1203_0731) - 1))+1.0 * (cell * Vmax_0770 * (s_1203 * s_1537 - s_1198 * s_1535 / Keq_0770) / (Km1203_0770 * Km1537_0770) / ((1 + s_1203 / Km1203_0770) * (1 + s_1537 / Km1537_0770) + (1 + s_1198 / Km1198_0770) * (1 + s_1535 / Km1535_0770) - 1))-1.0 * (cell * Vmax_0891 * (s_0260 * s_1198 - s_0258 * s_1203 / Keq_0891) / (Km0260_0891 * Km1198_0891) / ((1 + s_0260 / Km0260_0891) * (1 + s_1198 / Km1198_0891) + (1 + s_0258 / Km0258_0891) * (1 + s_1203 / Km1203_0891) - 1))-1.0 * (cell * Vmax_0961 * (s_0529 * s_1198 * s_1399 - s_0373 * s_0456 * s_1203 / Keq_0961) / (Km0529_0961 * Km1198_0961 * Km1399_0961) / ((1 + s_0529 / Km0529_0961) * (1 + s_1198 / Km1198_0961) * (1 + s_1399 / Km1399_0961) + (1 + s_0373 / Km0373_0961) * (1 + s_0456 / Km0456_0961) * (1 + s_1203 / Km1203_0961) - 1))-1.0 * (cell * Vmax_0988 * (s_1038 * s_1198 - s_0180 * s_1025 * s_1203 / Keq_0988) / (Km1038_0988 * Km1198_0988) / ((1 + s_1038 / Km1038_0988) * (1 + s_1198 / Km1198_0988) + (1 + s_0180 / Km0180_0988) * (1 + s_1025 / Km1025_0988) * (1 + s_1203 / Km1203_0988) - 1))+1.0 * (cell * Vmax_1010 * (s_1203 * s_1275 * s_1447 - s_0037 * s_1198 / Keq_1010) / (Km1203_1010 * Km1275_1010 * Km1447_1010) / ((1 + s_1203 / Km1203_1010) * (1 + s_1275 / Km1275_1010) * (1 + s_1447 / Km1447_1010) + (1 + s_0037 / Km0037_1010) * (1 + s_1198 / Km1198_1010) - 1)),
D(s_1620) ~ +1.0 * (cell * Vmax_0550 * (s_0837 * s_1616 - s_1620 / Keq_0550) / (Km0837_0550 * Km1616_0550) / ((1 + s_0837 / Km0837_0550) * (1 + s_1616 / Km1616_0550) + 1 + s_1620 / Km1620_0550 - 1))+1.0 * (cell * Vmax_0883 * (s_0201 * s_1616 - s_0390 * s_1469 * s_1620 / Keq_0883) / (Km0201_0883 * Km1616_0883) / ((1 + s_0201 / Km0201_0883) * (1 + s_1616 / Km1616_0883) + (1 + s_0390 / Km0390_0883) * (1 + s_1469 / Km1469_0883) * (1 + s_1620 / Km1620_0883) - 1))+1.0 * (cell * Vmax_0970 * (s_0434 * s_1616 - s_0586 * s_1620 / Keq_0970) / (Km0434_0970 * Km1616_0970) / ((1 + s_0434 / Km0434_0970) * (1 + s_1616 / Km1616_0970) + (1 + s_0586 / Km0586_0970) * (1 + s_1620 / Km1620_0970) - 1))+1.0 * (cell * Vmax_0973 * (s_1559 * s_1616 - s_0656 * s_1620 / Keq_0973) / (Km1559_0973 * Km1616_0973) / ((1 + s_1559 / Km1559_0973) * (1 + s_1616 / Km1616_0973) + (1 + s_0656 / Km0656_0973) * (1 + s_1620 / Km1620_0973) - 1))+1.0 * (cell * Vmax_0974 * (s_0394 * s_1616 - s_0582 * s_1620 / Keq_0974) / (Km0394_0974 * Km1616_0974) / ((1 + s_0394 / Km0394_0974) * (1 + s_1616 / Km1616_0974) + (1 + s_0582 / Km0582_0974) * (1 + s_1620 / Km1620_0974) - 1))+1.0 * (cell * Vmax_0976 * (s_0467 * s_1616 - s_0587 * s_1620 / Keq_0976) / (Km0467_0976 * Km1616_0976) / ((1 + s_0467 / Km0467_0976) * (1 + s_1616 / Km1616_0976) + (1 + s_0587 / Km0587_0976) * (1 + s_1620 / Km1620_0976) - 1))+1.0 * (cell * Vmax_0978 * (s_0739 * s_1616 - s_0613 * s_1620 / Keq_0978) / (Km0739_0978 * Km1616_0978) / ((1 + s_0739 / Km0739_0978) * (1 + s_1616 / Km1616_0978) + (1 + s_0613 / Km0613_0978) * (1 + s_1620 / Km1620_0978) - 1))-1.0 * (cell * Vmax_1038 * (s_1212 * s_1620 - s_1207 * s_1616 / Keq_1038) / (Km1212_1038 * Km1620_1038) / ((1 + s_1212 / Km1212_1038) * (1 + s_1620 / Km1620_1038) + (1 + s_1207 / Km1207_1038) * (1 + s_1616 / Km1616_1038) - 1)),
D(s_0586) ~ -1.0 * (cell * Vmax_0529 * (s_0586 * s_0782 - s_0582 * s_0739 / Keq_0529) / (Km0586_0529 * Km0782_0529) / ((1 + s_0586 / Km0586_0529) * (1 + s_0782 / Km0782_0529) + (1 + s_0582 / Km0582_0529) * (1 + s_0739 / Km0739_0529) - 1))+1.0 * (cell * Vmax_0970 * (s_0434 * s_1616 - s_0586 * s_1620 / Keq_0970) / (Km0434_0970 * Km1616_0970) / ((1 + s_0434 / Km0434_0970) * (1 + s_1616 / Km1616_0970) + (1 + s_0586 / Km0586_0970) * (1 + s_1620 / Km1620_0970) - 1)),
D(s_0258) ~ +1.0 * (cell * Vmax_0891 * (s_0260 * s_1198 - s_0258 * s_1203 / Keq_0891) / (Km0260_0891 * Km1198_0891) / ((1 + s_0260 / Km0260_0891) * (1 + s_1198 / Km1198_0891) + (1 + s_0258 / Km0258_0891) * (1 + s_1203 / Km1203_0891) - 1))-1.0 * (cell * Vmax_0918 * (s_0258 * s_0991 - s_0180 * s_0259 / Keq_0918) / (Km0258_0918 * Km0991_0918) / ((1 + s_0258 / Km0258_0918) * (1 + s_0991 / Km0991_0918) + (1 + s_0180 / Km0180_0918) * (1 + s_0259 / Km0259_0918) - 1)),
D(s_0261) ~ -1.0 * (cell * Vmax_0065 * (s_0261 * s_1360 - s_0324 * s_1322 / Keq_0065) / (Km0261_0065 * Km1360_0065) / ((1 + s_0261 / Km0261_0065) * (1 + s_1360 / Km1360_0065) + (1 + s_0324 / Km0324_0065) * (1 + s_1322 / Km1322_0065) - 1))+1.0 * (cell * Vmax_0997 * (s_0434 * s_1429 - s_0261 * s_0394 / Keq_0997) / (Km0434_0997 * Km1429_0997) / ((1 + s_0434 / Km0434_0997) * (1 + s_1429 / Km1429_0997) + (1 + s_0261 / Km0261_0997) * (1 + s_0394 / Km0394_0997) - 1)),
D(s_0380) ~ -1.0 * (cell * Vmax_0008 * (s_0082 * s_0380 - s_0529 * s_1331 / Keq_0008) / (Km0082_0008 * Km0380_0008) / ((1 + s_0082 / Km0082_0008) * (1 + s_0380 / Km0380_0008) + (1 + s_0529 / Km0529_0008) * (1 + s_1331 / Km1331_0008) - 1))+1.0 * (cell * Vmax_0336 * (s_0529 * s_1524 - s_0380 * s_0619 / Keq_0336) / (Km0529_0336 * Km1524_0336) / ((1 + s_0529 / Km0529_0336) * (1 + s_1524 / Km1524_0336) + (1 + s_0380 / Km0380_0336) * (1 + s_0619 / Km0619_0336) - 1))-1.0 * (cell * Vmax_0495 * (s_0380 * s_0767 - s_0082 * s_0529 / Keq_0495) / (Km0380_0495 * Km0767_0495) / ((1 + s_0380 / Km0380_0495) * (1 + s_0767 / Km0767_0495) + (1 + s_0082 / Km0082_0495) * (1 + s_0529 / Km0529_0495) - 1)),
D(s_0210) ~ -1.0 * (cell * Vmax_0039 * (s_0210 - s_0211 / Keq_0039) / Km0210_0039 / (1 + s_0210 / Km0210_0039 + 1 + s_0211 / Km0211_0039 - 1))+1.0 * (cell * Vmax_0040 * (s_0349 - s_0210 * s_1322 / Keq_0040) / Km0349_0040 / (1 + s_0349 / Km0349_0040 + (1 + s_0210 / Km0210_0040) * (1 + s_1322 / Km1322_0040) - 1)),
D(s_0120) ~ -1.0 * (cell * Vmax_0446 * (s_0120 * s_0394 * s_1322 - s_0434 * s_0722 * s_1487 / Keq_0446) / (Km0120_0446 * Km0394_0446 * Km1322_0446) / ((1 + s_0120 / Km0120_0446) * (1 + s_0394 / Km0394_0446) * (1 + s_1322 / Km1322_0446) + (1 + s_0434 / Km0434_0446) * (1 + s_0722 / Km0722_0446) * (1 + s_1487 / Km1487_0446) - 1))-1.0 * (cell * Vmax_0499 * (s_0120 * s_0325 - s_0301 * s_1487 / Keq_0499) / (Km0120_0499 * Km0325_0499) / ((1 + s_0120 / Km0120_0499) * (1 + s_0325 / Km0325_0499) + (1 + s_0301 / Km0301_0499) * (1 + s_1487 / Km1487_0499) - 1))+1.0 * (cell * Vmax_0724 * (s_0304 - s_0120 / Keq_0724) / Km0304_0724 / (1 + s_0304 / Km0304_0724 + 1 + s_0120 / Km0120_0724 - 1))-1.0 * (cell * Vmax_0912 * (s_0120 * s_0403 - s_1365 * s_1487 / Keq_0912) / (Km0120_0912 * Km0403_0912) / ((1 + s_0120 / Km0120_0912) * (1 + s_0403 / Km0403_0912) + (1 + s_1365 / Km1365_0912) * (1 + s_1487 / Km1487_0912) - 1)),
D(s_0965) ~ +1.0 * (cell * Vmax_0207 * (s_0015 - s_0725 * s_0965 / Keq_0207) / Km0015_0207 / (1 + s_0015 / Km0015_0207 + (1 + s_0725 / Km0725_0207) * (1 + s_0965 / Km0965_0207) - 1))-0.136 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_0122) ~ +1.0 * (cell * Vmax_0231 * (s_0262 * s_1212 - s_0122 * s_1207 / Keq_0231) / (Km0262_0231 * Km1212_0231) / ((1 + s_0262 / Km0262_0231) * (1 + s_1212 / Km1212_0231) + (1 + s_0122 / Km0122_0231) * (1 + s_1207 / Km1207_0231) - 1))-1.0 * (cell * Vmax_0241 * (s_0122 * (s_1212)^(3) * (s_1275)^(3) - s_0297 * (s_1207)^(3) / Keq_0241) / (Km0122_0241 * (Km1212_0241)^(3) * (Km1275_0241)^(3)) / ((1 + s_0122 / Km0122_0241) * (1 + s_1212 / Km1212_0241)^(3) * (1 + s_1275 / Km1275_0241)^(3) + (1 + s_0297 / Km0297_0241) * (1 + s_1207 / Km1207_0241)^(3) - 1))-5.6e-5 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_0602) ~ +1.0 * (cell * Vmax_0397 * (s_1101 * (s_1212)^(2) * s_1255 - s_0456 * s_0529 * s_0602 * (s_1207)^(2) / Keq_0397) / (Km1101_0397 * (Km1212_0397)^(2) * Km1255_0397) / ((1 + s_1101 / Km1101_0397) * (1 + s_1212 / Km1212_0397)^(2) * (1 + s_1255 / Km1255_0397) + (1 + s_0456 / Km0456_0397) * (1 + s_0529 / Km0529_0397) * (1 + s_0602 / Km0602_0397) * (1 + s_1207 / Km1207_0397)^(2) - 1))-1.0 * (cell * Vmax_0399 * (s_0423 * s_0602 * s_0633 - s_0434 * s_0529 * s_0595 / Keq_0399) / (Km0423_0399 * Km0602_0399 * Km0633_0399) / ((1 + s_0423 / Km0423_0399) * (1 + s_0602 / Km0602_0399) * (1 + s_0633 / Km0633_0399) + (1 + s_0434 / Km0434_0399) * (1 + s_0529 / Km0529_0399) * (1 + s_0595 / Km0595_0399) - 1))-1.0 * (cell * Vmax_0432 * (s_0602 * s_1101 * (s_1212)^(2) - s_0456 * s_0529 * s_1073 * (s_1207)^(2) / Keq_0432) / (Km0602_0432 * Km1101_0432 * (Km1212_0432)^(2)) / ((1 + s_0602 / Km0602_0432) * (1 + s_1101 / Km1101_0432) * (1 + s_1212 / Km1212_0432)^(2) + (1 + s_0456 / Km0456_0432) * (1 + s_0529 / Km0529_0432) * (1 + s_1073 / Km1073_0432) * (1 + s_1207 / Km1207_0432)^(2) - 1)),
D(s_0849) ~ -1.0 * (cell * Vmax_0153 * (s_0785 * s_0849 * s_0973 - s_0393 * s_0739 * s_1322 / Keq_0153) / (Km0785_0153 * Km0849_0153 * Km0973_0153) / ((1 + s_0785 / Km0785_0153) * (1 + s_0849 / Km0849_0153) * (1 + s_0973 / Km0973_0153) + (1 + s_0393 / Km0393_0153) * (1 + s_0739 / Km0739_0153) * (1 + s_1322 / Km1322_0153) - 1))-1.0 * (cell * Vmax_0565 * (s_0849 * s_1198 - s_1203 * s_1565 / Keq_0565) / (Km0849_0565 * Km1198_0565) / ((1 + s_0849 / Km0849_0565) * (1 + s_1198 / Km1198_0565) + (1 + s_1203 / Km1203_0565) * (1 + s_1565 / Km1565_0565) - 1))+1.0 * (cell * Vmax_0570 * (s_1365 - s_0849 / Keq_0570) / Km1365_0570 / (1 + s_1365 / Km1365_0570 + 1 + s_0849 / Km0849_0570 - 1)),
D(s_0589) ~ +1.0 * (cell * Vmax_0326 * (s_0419 * s_0654 - s_0589 / Keq_0326) / (Km0419_0326 * Km0654_0326) / ((1 + s_0419 / Km0419_0326) * (1 + s_0654 / Km0654_0326) + 1 + s_0589 / Km0589_0326 - 1))+1.0 * (cell * Vmax_1704 * (s_0394 * s_0587 - s_0434 * s_0589 / Keq_1704) / (Km0394_1704 * Km0587_1704) / ((1 + s_0394 / Km0394_1704) * (1 + s_0587 / Km0587_1704) + (1 + s_0434 / Km0434_1704) * (1 + s_0589 / Km0589_1704) - 1))-0.00243 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_1331) ~ +1.0 * (cell * Vmax_0008 * (s_0082 * s_0380 - s_0529 * s_1331 / Keq_0008) / (Km0082_0008 * Km0380_0008) / ((1 + s_0082 / Km0082_0008) * (1 + s_0380 / Km0380_0008) + (1 + s_0529 / Km0529_0008) * (1 + s_1331 / Km1331_0008) - 1))-1.0 * (cell * Vmax_0257 * (s_0539 * s_1331 - s_0471 * s_0633 / Keq_0257) / (Km0539_0257 * Km1331_0257) / ((1 + s_0539 / Km0539_0257) * (1 + s_1331 / Km1331_0257) + (1 + s_0471 / Km0471_0257) * (1 + s_0633 / Km0633_0257) - 1))-1.0 * (cell * Vmax_0337 * (s_1331 - s_0619 * s_1322 / Keq_0337) / Km1331_0337 / (1 + s_1331 / Km1331_0337 + (1 + s_0619 / Km0619_0337) * (1 + s_1322 / Km1322_0337) - 1)),
D(s_0841) ~ -1.0 * (cell * Vmax_0312 * (s_0841 * s_1234 - s_0362 * s_0981 / Keq_0312) / (Km0841_0312 * Km1234_0312) / ((1 + s_0841 / Km0841_0312) * (1 + s_1234 / Km1234_0312) + (1 + s_0362 / Km0362_0312) * (1 + s_0981 / Km0981_0312) - 1))-1.0 * (cell * Vmax_0813 * (s_0841 * s_1233 - s_0362 * s_1012 / Keq_0813) / (Km0841_0813 * Km1233_0813) / ((1 + s_0841 / Km0841_0813) * (1 + s_1233 / Km1233_0813) + (1 + s_0362 / Km0362_0813) * (1 + s_1012 / Km1012_0813) - 1))+1.0 * (cell * Vmax_1027 * ((s_1212)^(3) * s_1469 - s_0841 * (s_1207)^(3) / Keq_1027) / ((Km1212_1027)^(3) * Km1469_1027) / ((1 + s_1212 / Km1212_1027)^(3) * (1 + s_1469 / Km1469_1027) + (1 + s_0841 / Km0841_1027) * (1 + s_1207 / Km1207_1027)^(3) - 1)),
D(s_0445) ~ -1.0 * (cell * Vmax_0108 * (s_0373 * s_0434 * s_0445 - s_0394 * s_1101 * s_1322 / Keq_0108) / (Km0373_0108 * Km0434_0108 * Km0445_0108) / ((1 + s_0373 / Km0373_0108) * (1 + s_0434 / Km0434_0108) * (1 + s_0445 / Km0445_0108) + (1 + s_0394 / Km0394_0108) * (1 + s_1101 / Km1101_0108) * (1 + s_1322 / Km1322_0108) - 1))-1.0 * (cell * Vmax_0250 * ((s_0434)^(2) * s_0445 * s_0999 - (s_0394)^(2) * s_0455 * s_0991 * s_1322 / Keq_0250) / ((Km0434_0250)^(2) * Km0445_0250 * Km0999_0250) / ((1 + s_0434 / Km0434_0250)^(2) * (1 + s_0445 / Km0445_0250) * (1 + s_0999 / Km0999_0250) + (1 + s_0394 / Km0394_0250)^(2) * (1 + s_0455 / Km0455_0250) * (1 + s_0991 / Km0991_0250) * (1 + s_1322 / Km1322_0250) - 1))-1.0 * (cell * Vmax_0958 * (s_0434 * s_0445 * s_1399 - s_0394 * s_1271 * s_1322 / Keq_0958) / (Km0434_0958 * Km0445_0958 * Km1399_0958) / ((1 + s_0434 / Km0434_0958) * (1 + s_0445 / Km0445_0958) * (1 + s_1399 / Km1399_0958) + (1 + s_0394 / Km0394_0958) * (1 + s_1271 / Km1271_0958) * (1 + s_1322 / Km1322_0958) - 1))+1.0 * (cell * Vmax_1664 * (s_0456 - s_0445 / Keq_1664) / Km0456_1664 / (1 + s_0456 / Km0456_1664 + 1 + s_0445 / Km0445_1664 - 1)),
D(s_1365) ~ -1.0 * (cell * Vmax_0570 * (s_1365 - s_0849 / Keq_0570) / Km1365_0570 / (1 + s_1365 / Km1365_0570 + 1 + s_0849 / Km0849_0570 - 1))+1.0 * (cell * Vmax_0912 * (s_0120 * s_0403 - s_1365 * s_1487 / Keq_0912) / (Km0120_0912 * Km0403_0912) / ((1 + s_0120 / Km0120_0912) * (1 + s_0403 / Km0403_0912) + (1 + s_1365 / Km1365_0912) * (1 + s_1487 / Km1487_0912) - 1)),
D(s_0666) ~ +1.0 * (cell * Vmax_0244 * (s_0662 * s_1212 - s_0666 * s_1207 / Keq_0244) / (Km0662_0244 * Km1212_0244) / ((1 + s_0662 / Km0662_0244) * (1 + s_1212 / Km1212_0244) + (1 + s_0666 / Km0666_0244) * (1 + s_1207 / Km1207_0244) - 1))-1.0 * (cell * Vmax_1014 * (s_0666 * s_0595 - s_0672 / Keq_1014) / (Km0666_1014 * Km0595_1014) / ((1 + s_0666 / Km0666_1014) * (1 + s_0595 / Km0595_1014) + 1 + s_0672 / Km0672_1014 - 1))-0.0056 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_0077) ~ -1.0 * (cell * Vmax_0007 * (s_0077 - s_0312 / Keq_0007) / Km0077_0007 / (1 + s_0077 / Km0077_0007 + 1 + s_0312 / Km0312_0007 - 1))+1.0 * (cell * Vmax_0909 * (s_0078 - s_0077 / Keq_0909) / Km0078_0909 / (1 + s_0078 / Km0078_0909 + 1 + s_0077 / Km0077_0909 - 1)),
D(s_1192) ~ -1.0 * (cell * Vmax_0115 * (s_0434 * s_1192 - s_0394 * s_1191 / Keq_0115) / (Km0434_0115 * Km1192_0115) / ((1 + s_0434 / Km0434_0115) * (1 + s_1192 / Km1192_0115) + (1 + s_0394 / Km0394_0115) * (1 + s_1191 / Km1191_0115) - 1))+1.0 * (cell * Vmax_0818 * (s_0991 * s_1182 - s_1192 * s_1266 / Keq_0818) / (Km0991_0818 * Km1182_0818) / ((1 + s_0991 / Km0991_0818) * (1 + s_1182 / Km1182_0818) + (1 + s_1192 / Km1192_0818) * (1 + s_1266 / Km1266_0818) - 1)),
D(s_0312) ~ +1.0 * (cell * Vmax_0007 * (s_0077 - s_0312 / Keq_0007) / Km0077_0007 / (1 + s_0077 / Km0077_0007 + 1 + s_0312 / Km0312_0007 - 1))-1.0 * (cell * Vmax_0563 * (s_0312 * s_0999 - s_0403 * s_0550 * s_0991 / Keq_0563) / (Km0312_0563 * Km0999_0563) / ((1 + s_0312 / Km0312_0563) * (1 + s_0999 / Km0999_0563) + (1 + s_0403 / Km0403_0563) * (1 + s_0550 / Km0550_0563) * (1 + s_0991 / Km0991_0563) - 1)),
D(s_1203) ~ -1.0 * (cell * Vmax_0012 * (s_0991 * s_1203 - s_0118 * s_1198 / Keq_0012) / (Km0991_0012 * Km1203_0012) / ((1 + s_0991 / Km0991_0012) * (1 + s_1203 / Km1203_0012) + (1 + s_0118 / Km0118_0012) * (1 + s_1198 / Km1198_0012) - 1))+1.0 * (cell * Vmax_0061 * (s_0009 * s_1198 - s_0010 * s_1203 / Keq_0061) / (Km0009_0061 * Km1198_0061) / ((1 + s_0009 / Km0009_0061) * (1 + s_1198 / Km1198_0061) + (1 + s_0010 / Km0010_0061) * (1 + s_1203 / Km1203_0061) - 1))-1.0 * (cell * Vmax_0165 * (s_0359 * s_1203 - s_0680 * s_1198 / Keq_0165) / (Km0359_0165 * Km1203_0165) / ((1 + s_0359 / Km0359_0165) * (1 + s_1203 / Km1203_0165) + (1 + s_0680 / Km0680_0165) * (1 + s_1198 / Km1198_0165) - 1))+1.0 * (cell * Vmax_0235 * (s_0297 * s_1198 - s_0209 * s_0456 * s_1203 / Keq_0235) / (Km0297_0235 * Km1198_0235) / ((1 + s_0297 / Km0297_0235) * (1 + s_1198 / Km1198_0235) + (1 + s_0209 / Km0209_0235) * (1 + s_0456 / Km0456_0235) * (1 + s_1203 / Km1203_0235) - 1))+1.0 * (cell * Vmax_0445 * (s_0722 * s_1198 - s_0456 * s_1203 / Keq_0445) / (Km0722_0445 * Km1198_0445) / ((1 + s_0722 / Km0722_0445) * (1 + s_1198 / Km1198_0445) + (1 + s_0456 / Km0456_0445) * (1 + s_1203 / Km1203_0445) - 1))-1.0 * (cell * Vmax_0470 * (s_0180 * s_0419 * s_1203 - s_0991 * s_1198 / Keq_0470) / (Km0180_0470 * Km0419_0470 * Km1203_0470) / ((1 + s_0180 / Km0180_0470) * (1 + s_0419 / Km0419_0470) * (1 + s_1203 / Km1203_0470) + (1 + s_0991 / Km0991_0470) * (1 + s_1198 / Km1198_0470) - 1))+1.0 * (cell * Vmax_0486 * (s_0764 * s_1198 * s_1322 - s_0075 * s_1203 / Keq_0486) / (Km0764_0486 * Km1198_0486 * Km1322_0486) / ((1 + s_0764 / Km0764_0486) * (1 + s_1198 / Km1198_0486) * (1 + s_1322 / Km1322_0486) + (1 + s_0075 / Km0075_0486) * (1 + s_1203 / Km1203_0486) - 1))-1.0 * (cell * Vmax_0491 * (s_0629 * s_1203 - s_0767 * s_1198 / Keq_0491) / (Km0629_0491 * Km1203_0491) / ((1 + s_0629 / Km0629_0491) * (1 + s_1203 / Km1203_0491) + (1 + s_0767 / Km0767_0491) * (1 + s_1198 / Km1198_0491) - 1))+2.0 * (cell * Vmax_0536 * (s_1010 * (s_1198)^(2) - s_1006 * (s_1203)^(2) / Keq_0536) / (Km1010_0536 * (Km1198_0536)^(2)) / ((1 + s_1010 / Km1010_0536) * (1 + s_1198 / Km1198_0536)^(2) + (1 + s_1006 / Km1006_0536) * (1 + s_1203 / Km1203_0536)^(2) - 1))+1.0 * (cell * Vmax_0545 * (s_0836 * s_1198 - s_0176 * s_1203 * s_0456 / Keq_0545) / (Km0836_0545 * Km1198_0545) / ((1 + s_0836 / Km0836_0545) * (1 + s_1198 / Km1198_0545) + (1 + s_0176 / Km0176_0545) * (1 + s_1203 / Km1203_0545) * (1 + s_0456 / Km0456_0545) - 1))+1.0 * (cell * Vmax_0565 * (s_0849 * s_1198 - s_1203 * s_1565 / Keq_0565) / (Km0849_0565 * Km1198_0565) / ((1 + s_0849 / Km0849_0565) * (1 + s_1198 / Km1198_0565) + (1 + s_1203 / Km1203_0565) * (1 + s_1565 / Km1565_0565) - 1))+1.0 * (cell * Vmax_0658 * (s_0940 * s_1198 - s_0180 * s_0456 * s_1203 / Keq_0658) / (Km0940_0658 * Km1198_0658) / ((1 + s_0940 / Km0940_0658) * (1 + s_1198 / Km1198_0658) + (1 + s_0180 / Km0180_0658) * (1 + s_0456 / Km0456_0658) * (1 + s_1203 / Km1203_0658) - 1))+1.0 * (cell * Vmax_0696 * (s_0062 * s_1198 - s_0063 * s_1203 / Keq_0696) / (Km0062_0696 * Km1198_0696) / ((1 + s_0062 / Km0062_0696) * (1 + s_1198 / Km1198_0696) + (1 + s_0063 / Km0063_0696) * (1 + s_1203 / Km1203_0696) - 1))+1.0 * (cell * Vmax_0713 * (s_0066 * s_1198 - s_1203 * s_1271 / Keq_0713) / (Km0066_0713 * Km1198_0713) / ((1 + s_0066 / Km0066_0713) * (1 + s_1198 / Km1198_0713) + (1 + s_1203 / Km1203_0713) * (1 + s_1271 / Km1271_0713) - 1))+1.0 * (cell * Vmax_0731 * (s_0306 * s_1198 - s_0304 * s_1203 / Keq_0731) / (Km0306_0731 * Km1198_0731) / ((1 + s_0306 / Km0306_0731) * (1 + s_1198 / Km1198_0731) + (1 + s_0304 / Km0304_0731) * (1 + s_1203 / Km1203_0731) - 1))-1.0 * (cell * Vmax_0770 * (s_1203 * s_1537 - s_1198 * s_1535 / Keq_0770) / (Km1203_0770 * Km1537_0770) / ((1 + s_1203 / Km1203_0770) * (1 + s_1537 / Km1537_0770) + (1 + s_1198 / Km1198_0770) * (1 + s_1535 / Km1535_0770) - 1))+1.0 * (cell * Vmax_0891 * (s_0260 * s_1198 - s_0258 * s_1203 / Keq_0891) / (Km0260_0891 * Km1198_0891) / ((1 + s_0260 / Km0260_0891) * (1 + s_1198 / Km1198_0891) + (1 + s_0258 / Km0258_0891) * (1 + s_1203 / Km1203_0891) - 1))+1.0 * (cell * Vmax_0961 * (s_0529 * s_1198 * s_1399 - s_0373 * s_0456 * s_1203 / Keq_0961) / (Km0529_0961 * Km1198_0961 * Km1399_0961) / ((1 + s_0529 / Km0529_0961) * (1 + s_1198 / Km1198_0961) * (1 + s_1399 / Km1399_0961) + (1 + s_0373 / Km0373_0961) * (1 + s_0456 / Km0456_0961) * (1 + s_1203 / Km1203_0961) - 1))+1.0 * (cell * Vmax_0988 * (s_1038 * s_1198 - s_0180 * s_1025 * s_1203 / Keq_0988) / (Km1038_0988 * Km1198_0988) / ((1 + s_1038 / Km1038_0988) * (1 + s_1198 / Km1198_0988) + (1 + s_0180 / Km0180_0988) * (1 + s_1025 / Km1025_0988) * (1 + s_1203 / Km1203_0988) - 1))-1.0 * (cell * Vmax_1010 * (s_1203 * s_1275 * s_1447 - s_0037 * s_1198 / Keq_1010) / (Km1203_1010 * Km1275_1010 * Km1447_1010) / ((1 + s_1203 / Km1203_1010) * (1 + s_1275 / Km1275_1010) * (1 + s_1447 / Km1447_1010) + (1 + s_0037 / Km0037_1010) * (1 + s_1198 / Km1198_1010) - 1)),
D(s_1337) ~ -1.0 * (cell * Vmax_0877 * (s_1337 - s_0456 * s_1351 / Keq_0877) / Km1337_0877 / (1 + s_1337 / Km1337_0877 + (1 + s_0456 / Km0456_0877) * (1 + s_1351 / Km1351_0877) - 1))+1.0 * (cell * Vmax_0880 * (s_0471 * s_1039 - s_0526 * s_1337 / Keq_0880) / (Km0471_0880 * Km1039_0880) / ((1 + s_0471 / Km0471_0880) * (1 + s_1039 / Km1039_0880) + (1 + s_0526 / Km0526_0880) * (1 + s_1337 / Km1337_0880) - 1))-0.000373 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_0837) ~ +1.0 * (cell * Vmax_0339 * (s_0061 * s_1275 - s_0837 * s_1269 / Keq_0339) / (Km0061_0339 * Km1275_0339) / ((1 + s_0061 / Km0061_0339) * (1 + s_1275 / Km1275_0339) + (1 + s_0837 / Km0837_0339) * (1 + s_1269 / Km1269_0339) - 1))-1.0 * (cell * Vmax_0483 * ((s_0750)^(2) * s_0837 - s_0754 / Keq_0483) / ((Km0750_0483)^(2) * Km0837_0483) / ((1 + s_0750 / Km0750_0483)^(2) * (1 + s_0837 / Km0837_0483) + 1 + s_0754 / Km0754_0483 - 1))-1.0 * (cell * Vmax_0550 * (s_0837 * s_1616 - s_1620 / Keq_0550) / (Km0837_0550 * Km1616_0550) / ((1 + s_0837 / Km0837_0550) * (1 + s_1616 / Km1616_0550) + 1 + s_1620 / Km1620_0550 - 1)),
D(s_1579) ~ +1.0 * (cell * Vmax_0234 * (s_1207 * s_1578 - s_0456 * s_1212 * s_1579 / Keq_0234) / (Km1207_0234 * Km1578_0234) / ((1 + s_1207 / Km1207_0234) * (1 + s_1578 / Km1578_0234) + (1 + s_0456 / Km0456_0234) * (1 + s_1212 / Km1212_0234) * (1 + s_1579 / Km1579_0234) - 1))-1.0 * (cell * Vmax_0237 * (s_1212 * s_1579 - s_1207 * s_1569 / Keq_0237) / (Km1212_0237 * Km1579_0237) / ((1 + s_1212 / Km1212_0237) * (1 + s_1579 / Km1579_0237) + (1 + s_1207 / Km1207_0237) * (1 + s_1569 / Km1569_0237) - 1)),
D(s_1469) ~ +1.0 * (cell * Vmax_0883 * (s_0201 * s_1616 - s_0390 * s_1469 * s_1620 / Keq_0883) / (Km0201_0883 * Km1616_0883) / ((1 + s_0201 / Km0201_0883) * (1 + s_1616 / Km1616_0883) + (1 + s_0390 / Km0390_0883) * (1 + s_1469 / Km1469_0883) * (1 + s_1620 / Km1620_0883) - 1))-1.0 * (cell * Vmax_1027 * ((s_1212)^(3) * s_1469 - s_0841 * (s_1207)^(3) / Keq_1027) / ((Km1212_1027)^(3) * Km1469_1027) / ((1 + s_1212 / Km1212_1027)^(3) * (1 + s_1469 / Km1469_1027) + (1 + s_0841 / Km0841_1027) * (1 + s_1207 / Km1207_1027)^(3) - 1)),
D(s_0458) ~ +1.0 * (cell * Vmax_1697 * s_0456 / Km0456_1697 / (1 + s_0456 / Km0456_1697)),
D(s_0075) ~ +1.0 * (cell * Vmax_0486 * (s_0764 * s_1198 * s_1322 - s_0075 * s_1203 / Keq_0486) / (Km0764_0486 * Km1198_0486 * Km1322_0486) / ((1 + s_0764 / Km0764_0486) * (1 + s_1198 / Km1198_0486) * (1 + s_1322 / Km1322_0486) + (1 + s_0075 / Km0075_0486) * (1 + s_1203 / Km1203_0486) - 1))-1.0 * (cell * Vmax_0892 * (s_0075 * s_0394 - s_0260 * s_0434 / Keq_0892) / (Km0075_0892 * Km0394_0892) / ((1 + s_0075 / Km0075_0892) * (1 + s_0394 / Km0394_0892) + (1 + s_0260 / Km0260_0892) * (1 + s_0434 / Km0434_0892) - 1)),
D(s_0633) ~ +1.0 * (cell * Vmax_0202 * (s_0427 * s_1386 - s_0633 * s_1187 / Keq_0202) / (Km0427_0202 * Km1386_0202) / ((1 + s_0427 / Km0427_0202) * (1 + s_1386 / Km1386_0202) + (1 + s_0633 / Km0633_0202) * (1 + s_1187 / Km1187_0202) - 1))+1.0 * (cell * Vmax_0208 * (s_0434 * s_0973 * s_0979 - s_0015 * s_0423 * s_0633 / Keq_0208) / (Km0434_0208 * Km0973_0208 * Km0979_0208) / ((1 + s_0434 / Km0434_0208) * (1 + s_0973 / Km0973_0208) * (1 + s_0979 / Km0979_0208) + (1 + s_0015 / Km0015_0208) * (1 + s_0423 / Km0423_0208) * (1 + s_0633 / Km0633_0208) - 1))+1.0 * (cell * Vmax_0211 * (s_0434 * s_0973 * s_0999 - s_0423 * s_0633 * s_0969 * s_0991 / Keq_0211) / (Km0434_0211 * Km0973_0211 * Km0999_0211) / ((1 + s_0434 / Km0434_0211) * (1 + s_0973 / Km0973_0211) * (1 + s_0999 / Km0999_0211) + (1 + s_0423 / Km0423_0211) * (1 + s_0633 / Km0633_0211) * (1 + s_0969 / Km0969_0211) * (1 + s_0991 / Km0991_0211) - 1))+1.0 * (cell * Vmax_0225 * (s_0434 * s_1386 - s_0326 * s_0633 / Keq_0225) / (Km0434_0225 * Km1386_0225) / ((1 + s_0434 / Km0434_0225) * (1 + s_1386 / Km1386_0225) + (1 + s_0326 / Km0326_0225) * (1 + s_0633 / Km0633_0225) - 1))+1.0 * (cell * Vmax_0257 * (s_0539 * s_1331 - s_0471 * s_0633 / Keq_0257) / (Km0539_0257 * Km1331_0257) / ((1 + s_0539 / Km0539_0257) * (1 + s_1331 / Km1331_0257) + (1 + s_0471 / Km0471_0257) * (1 + s_0633 / Km0633_0257) - 1))+1.0 * (cell * Vmax_0355 * (s_0943 * s_1376 - s_0633 * s_0745 / Keq_0355) / (Km0943_0355 * Km1376_0355) / ((1 + s_0943 / Km0943_0355) * (1 + s_1376 / Km1376_0355) + (1 + s_0633 / Km0633_0355) * (1 + s_0745 / Km0745_0355) - 1))+1.0 * (cell * Vmax_0364 * (s_0656 - s_0633 * s_0654 / Keq_0364) / Km0656_0364 / (1 + s_0656 / Km0656_0364 + (1 + s_0633 / Km0633_0364) * (1 + s_0654 / Km0654_0364) - 1))-1.0 * (cell * Vmax_0399 * (s_0423 * s_0602 * s_0633 - s_0434 * s_0529 * s_0595 / Keq_0399) / (Km0423_0399 * Km0602_0399 * Km0633_0399) / ((1 + s_0423 / Km0423_0399) * (1 + s_0602 / Km0602_0399) * (1 + s_0633 / Km0633_0399) + (1 + s_0434 / Km0434_0399) * (1 + s_0529 / Km0529_0399) * (1 + s_0595 / Km0595_0399) - 1))-1.0 * (cell * Vmax_0407 * (s_0423 * s_0633 * s_1454 - s_0434 * s_0529 * s_1449 / Keq_0407) / (Km0423_0407 * Km0633_0407 * Km1454_0407) / ((1 + s_0423 / Km0423_0407) * (1 + s_0633 / Km0633_0407) * (1 + s_1454 / Km1454_0407) + (1 + s_0434 / Km0434_0407) * (1 + s_0529 / Km0529_0407) * (1 + s_1449 / Km1449_0407) - 1))+1.0 * (cell * Vmax_0462 * (s_0745 * s_0943 - s_0190 * s_0633 / Keq_0462) / (Km0745_0462 * Km0943_0462) / ((1 + s_0745 / Km0745_0462) * (1 + s_0943 / Km0943_0462) + (1 + s_0190 / Km0190_0462) * (1 + s_0633 / Km0633_0462) - 1))+1.0 * (cell * Vmax_0514 * (s_0434 * s_0999 * s_1565 - s_0423 * s_0633 * s_0782 * s_0991 / Keq_0514) / (Km0434_0514 * Km0999_0514 * Km1565_0514) / ((1 + s_0434 / Km0434_0514) * (1 + s_0999 / Km0999_0514) * (1 + s_1565 / Km1565_0514) + (1 + s_0423 / Km0423_0514) * (1 + s_0633 / Km0633_0514) * (1 + s_0782 / Km0782_0514) * (1 + s_0991 / Km0991_0514) - 1))+1.0 * (cell * Vmax_0525 * (s_0785 - s_0141 * s_0633 * s_0722 / Keq_0525) / Km0785_0525 / (1 + s_0785 / Km0785_0525 + (1 + s_0141 / Km0141_0525) * (1 + s_0633 / Km0633_0525) * (1 + s_0722 / Km0722_0525) - 1))-1.0 * (cell * Vmax_0568 * (s_0633 - (s_1322)^(2) / Keq_0568) / Km0633_0568 / (1 + s_0633 / Km0633_0568 + (1 + s_1322 / Km1322_0568)^(2) - 1))+1.0 * (cell * Vmax_0722 * (s_0573 * s_0785 - s_0633 * s_0743 / Keq_0722) / (Km0573_0722 * Km0785_0722) / ((1 + s_0573 / Km0573_0722) * (1 + s_0785 / Km0785_0722) + (1 + s_0633 / Km0633_0722) * (1 + s_0743 / Km0743_0722) - 1))+1.0 * (cell * Vmax_0726 * (s_0434 * s_1029 - s_0633 * s_1322 * s_1416 / Keq_0726) / (Km0434_0726 * Km1029_0726) / ((1 + s_0434 / Km0434_0726) * (1 + s_1029 / Km1029_0726) + (1 + s_0633 / Km0633_0726) * (1 + s_1322 / Km1322_0726) * (1 + s_1416 / Km1416_0726) - 1))+1.0 * (cell * Vmax_0820 * (s_1269 * s_1386 - s_0633 * s_1270 / Keq_0820) / (Km1269_0820 * Km1386_0820) / ((1 + s_1269 / Km1269_0820) * (1 + s_1386 / Km1386_0820) + (1 + s_0633 / Km0633_0820) * (1 + s_1270 / Km1270_0820) - 1))+1.0 * (cell * Vmax_0910 * (s_0326 - s_0078 * s_0633 / Keq_0910) / Km0326_0910 / (1 + s_0326 / Km0326_0910 + (1 + s_0078 / Km0078_0910) * (1 + s_0633 / Km0633_0910) - 1))+1.0 * (cell * Vmax_0915 * (s_0999 * s_1386 - s_0327 * s_0633 * s_0991 / Keq_0915) / (Km0999_0915 * Km1386_0915) / ((1 + s_0999 / Km0999_0915) * (1 + s_1386 / Km1386_0915) + (1 + s_0327 / Km0327_0915) * (1 + s_0633 / Km0633_0915) * (1 + s_0991 / Km0991_0915) - 1))+2.0 * (cell * Vmax_1012 * ((s_0190)^(2) * s_1212 - (s_0633)^(2) * s_1207 * s_1447 / Keq_1012) / ((Km0190_1012)^(2) * Km1212_1012) / ((1 + s_0190 / Km0190_1012)^(2) * (1 + s_1212 / Km1212_1012) + (1 + s_0633 / Km0633_1012)^(2) * (1 + s_1207 / Km1207_1012) * (1 + s_1447 / Km1447_1012) - 1))+1.0 * (cell * Vmax_1084 * (s_0567 * s_1559 - s_0633 * s_1543 / Keq_1084) / (Km0567_1084 * Km1559_1084) / ((1 + s_0567 / Km0567_1084) * (1 + s_1559 / Km1559_1084) + (1 + s_0633 / Km0633_1084) * (1 + s_1543 / Km1543_1084) - 1)),
D(s_0434) ~ -1.0 * (cell * Vmax_0079 * (s_0301 * s_0434 * s_0999 - s_0302 * s_0394 * s_0991 * s_1322 / Keq_0079) / (Km0301_0079 * Km0434_0079 * Km0999_0079) / ((1 + s_0301 / Km0301_0079) * (1 + s_0434 / Km0434_0079) * (1 + s_0999 / Km0999_0079) + (1 + s_0302 / Km0302_0079) * (1 + s_0394 / Km0394_0079) * (1 + s_0991 / Km0991_0079) * (1 + s_1322 / Km1322_0079) - 1))-1.0 * (cell * Vmax_0108 * (s_0373 * s_0434 * s_0445 - s_0394 * s_1101 * s_1322 / Keq_0108) / (Km0373_0108 * Km0434_0108 * Km0445_0108) / ((1 + s_0373 / Km0373_0108) * (1 + s_0434 / Km0434_0108) * (1 + s_0445 / Km0445_0108) + (1 + s_0394 / Km0394_0108) * (1 + s_1101 / Km1101_0108) * (1 + s_1322 / Km1322_0108) - 1))-1.0 * (cell * Vmax_0115 * (s_0434 * s_1192 - s_0394 * s_1191 / Keq_0115) / (Km0434_0115 * Km1192_0115) / ((1 + s_0434 / Km0434_0115) * (1 + s_1192 / Km1192_0115) + (1 + s_0394 / Km0394_0115) * (1 + s_1191 / Km1191_0115) - 1))-1.0 * (cell * Vmax_0142 * (s_0386 * s_0434 - s_0394 * s_0423 / Keq_0142) / (Km0386_0142 * Km0434_0142) / ((1 + s_0386 / Km0386_0142) * (1 + s_0434 / Km0434_0142) + (1 + s_0394 / Km0394_0142) * (1 + s_0423 / Km0423_0142) - 1))-1.0 * (cell * Vmax_0148 * (s_0423 * s_0434 - (s_0394)^(2) / Keq_0148) / (Km0423_0148 * Km0434_0148) / ((1 + s_0423 / Km0423_0148) * (1 + s_0434 / Km0434_0148) + (1 + s_0394 / Km0394_0148)^(2) - 1))-1.0 * (cell * Vmax_0154 * (s_0298 * s_0434 - s_0201 * s_0394 / Keq_0154) / (Km0298_0154 * Km0434_0154) / ((1 + s_0298 / Km0298_0154) * (1 + s_0434 / Km0434_0154) + (1 + s_0201 / Km0201_0154) * (1 + s_0394 / Km0394_0154) - 1))-1.0 * (cell * Vmax_0208 * (s_0434 * s_0973 * s_0979 - s_0015 * s_0423 * s_0633 / Keq_0208) / (Km0434_0208 * Km0973_0208 * Km0979_0208) / ((1 + s_0434 / Km0434_0208) * (1 + s_0973 / Km0973_0208) * (1 + s_0979 / Km0979_0208) + (1 + s_0015 / Km0015_0208) * (1 + s_0423 / Km0423_0208) * (1 + s_0633 / Km0633_0208) - 1))-1.0 * (cell * Vmax_0211 * (s_0434 * s_0973 * s_0999 - s_0423 * s_0633 * s_0969 * s_0991 / Keq_0211) / (Km0434_0211 * Km0973_0211 * Km0999_0211) / ((1 + s_0434 / Km0434_0211) * (1 + s_0973 / Km0973_0211) * (1 + s_0999 / Km0999_0211) + (1 + s_0423 / Km0423_0211) * (1 + s_0633 / Km0633_0211) * (1 + s_0969 / Km0969_0211) * (1 + s_0991 / Km0991_0211) - 1))-1.0 * (cell * Vmax_0215 * (s_0434 * s_0973 - s_0295 * s_0394 / Keq_0215) / (Km0434_0215 * Km0973_0215) / ((1 + s_0434 / Km0434_0215) * (1 + s_0973 / Km0973_0215) + (1 + s_0295 / Km0295_0215) * (1 + s_0394 / Km0394_0215) - 1))-1.0 * (cell * Vmax_0225 * (s_0434 * s_1386 - s_0326 * s_0633 / Keq_0225) / (Km0434_0225 * Km1386_0225) / ((1 + s_0434 / Km0434_0225) * (1 + s_1386 / Km1386_0225) + (1 + s_0326 / Km0326_0225) * (1 + s_0633 / Km0633_0225) - 1))+1.0 * (cell * Vmax_0226 * (s_0394 * s_1322 - s_0434 / Keq_0226) / (Km0394_0226 * Km1322_0226) / ((1 + s_0394 / Km0394_0226) * (1 + s_1322 / Km1322_0226) + 1 + s_0434 / Km0434_0226 - 1))-2.0 * (cell * Vmax_0250 * ((s_0434)^(2) * s_0445 * s_0999 - (s_0394)^(2) * s_0455 * s_0991 * s_1322 / Keq_0250) / ((Km0434_0250)^(2) * Km0445_0250 * Km0999_0250) / ((1 + s_0434 / Km0434_0250)^(2) * (1 + s_0445 / Km0445_0250) * (1 + s_0999 / Km0999_0250) + (1 + s_0394 / Km0394_0250)^(2) * (1 + s_0455 / Km0455_0250) * (1 + s_0991 / Km0991_0250) * (1 + s_1322 / Km1322_0250) - 1))-1.0 * (cell * Vmax_0307 * (s_0419 * s_0434 * s_1559 - s_0394 * s_0539 * s_1322 / Keq_0307) / (Km0419_0307 * Km0434_0307 * Km1559_0307) / ((1 + s_0419 / Km0419_0307) * (1 + s_0434 / Km0434_0307) * (1 + s_1559 / Km1559_0307) + (1 + s_0394 / Km0394_0307) * (1 + s_0539 / Km0539_0307) * (1 + s_1322 / Km1322_0307) - 1))+1.0 * (cell * Vmax_0330 * (s_0394 * s_0613 - s_0434 * s_0615 / Keq_0330) / (Km0394_0330 * Km0613_0330) / ((1 + s_0394 / Km0394_0330) * (1 + s_0613 / Km0613_0330) + (1 + s_0434 / Km0434_0330) * (1 + s_0615 / Km0615_0330) - 1))+1.0 * (cell * Vmax_0399 * (s_0423 * s_0602 * s_0633 - s_0434 * s_0529 * s_0595 / Keq_0399) / (Km0423_0399 * Km0602_0399 * Km0633_0399) / ((1 + s_0423 / Km0423_0399) * (1 + s_0602 / Km0602_0399) * (1 + s_0633 / Km0633_0399) + (1 + s_0434 / Km0434_0399) * (1 + s_0529 / Km0529_0399) * (1 + s_0595 / Km0595_0399) - 1))+1.0 * (cell * Vmax_0407 * (s_0423 * s_0633 * s_1454 - s_0434 * s_0529 * s_1449 / Keq_0407) / (Km0423_0407 * Km0633_0407 * Km1454_0407) / ((1 + s_0423 / Km0423_0407) * (1 + s_0633 / Km0633_0407) * (1 + s_1454 / Km1454_0407) + (1 + s_0434 / Km0434_0407) * (1 + s_0529 / Km0529_0407) * (1 + s_1449 / Km1449_0407) - 1))+1.0 * (cell * Vmax_0446 * (s_0120 * s_0394 * s_1322 - s_0434 * s_0722 * s_1487 / Keq_0446) / (Km0120_0446 * Km0394_0446 * Km1322_0446) / ((1 + s_0120 / Km0120_0446) * (1 + s_0394 / Km0394_0446) * (1 + s_1322 / Km1322_0446) + (1 + s_0434 / Km0434_0446) * (1 + s_0722 / Km0722_0446) * (1 + s_1487 / Km1487_0446) - 1))-1.0 * (cell * Vmax_0476 * (s_0419 * s_0434 * s_0991 - s_0394 * s_0999 * s_1322 / Keq_0476) / (Km0419_0476 * Km0434_0476 * Km0991_0476) / ((1 + s_0419 / Km0419_0476) * (1 + s_0434 / Km0434_0476) * (1 + s_0991 / Km0991_0476) + (1 + s_0394 / Km0394_0476) * (1 + s_0999 / Km0999_0476) * (1 + s_1322 / Km1322_0476) - 1))-1.0 * (cell * Vmax_0514 * (s_0434 * s_0999 * s_1565 - s_0423 * s_0633 * s_0782 * s_0991 / Keq_0514) / (Km0434_0514 * Km0999_0514 * Km1565_0514) / ((1 + s_0434 / Km0434_0514) * (1 + s_0999 / Km0999_0514) * (1 + s_1565 / Km1565_0514) + (1 + s_0423 / Km0423_0514) * (1 + s_0633 / Km0633_0514) * (1 + s_0782 / Km0782_0514) * (1 + s_0991 / Km0991_0514) - 1))-1.0 * (cell * Vmax_0528 * (s_0434 * s_0782 - s_0394 * s_0739 / Keq_0528) / (Km0434_0528 * Km0782_0528) / ((1 + s_0434 / Km0434_0528) * (1 + s_0782 / Km0782_0528) + (1 + s_0394 / Km0394_0528) * (1 + s_0739 / Km0739_0528) - 1))-1.0 * (cell * Vmax_0534 * (s_0434 * s_0563 - s_0394 * s_0568 / Keq_0534) / (Km0434_0534 * Km0563_0534) / ((1 + s_0434 / Km0434_0534) * (1 + s_0563 / Km0563_0534) + (1 + s_0394 / Km0394_0534) * (1 + s_0568 / Km0568_0534) - 1))-1.0 * (cell * Vmax_0548 * (s_0434 * s_1014 - s_0394 * s_1238 / Keq_0548) / (Km0434_0548 * Km1014_0548) / ((1 + s_0434 / Km0434_0548) * (1 + s_1014 / Km1014_0548) + (1 + s_0394 / Km0394_0548) * (1 + s_1238 / Km1238_0548) - 1))-1.0 * (cell * Vmax_0726 * (s_0434 * s_1029 - s_0633 * s_1322 * s_1416 / Keq_0726) / (Km0434_0726 * Km1029_0726) / ((1 + s_0434 / Km0434_0726) * (1 + s_1029 / Km1029_0726) + (1 + s_0633 / Km0633_0726) * (1 + s_1322 / Km1322_0726) * (1 + s_1416 / Km1416_0726) - 1))-1.0 * (cell * Vmax_0739 * (s_0018 * s_0434 - s_0394 * s_0456 * s_0943 * s_1322 / Keq_0739) / (Km0018_0739 * Km0434_0739) / ((1 + s_0018 / Km0018_0739) * (1 + s_0434 / Km0434_0739) + (1 + s_0394 / Km0394_0739) * (1 + s_0456 / Km0456_0739) * (1 + s_0943 / Km0943_0739) * (1 + s_1322 / Km1322_0739) - 1))-1.0 * (cell * Vmax_0800 * (s_0434 * s_0739 - s_0394 * s_0785 / Keq_0800) / (Km0434_0800 * Km0739_0800) / ((1 + s_0434 / Km0434_0800) * (1 + s_0739 / Km0739_0800) + (1 + s_0394 / Km0394_0800) * (1 + s_0785 / Km0785_0800) - 1))-1.0 * (cell * Vmax_0811 * (s_0434 * s_1538 - s_0394 * s_1559 / Keq_0811) / (Km0434_0811 * Km1538_0811) / ((1 + s_0434 / Km0434_0811) * (1 + s_1538 / Km1538_0811) + (1 + s_0394 / Km0394_0811) * (1 + s_1559 / Km1559_0811) - 1))-1.0 * (cell * Vmax_0855 * (s_0302 * s_0434 - s_0300 * s_0394 * s_1322 / Keq_0855) / (Km0302_0855 * Km0434_0855) / ((1 + s_0302 / Km0302_0855) * (1 + s_0434 / Km0434_0855) + (1 + s_0300 / Km0300_0855) * (1 + s_0394 / Km0394_0855) * (1 + s_1322 / Km1322_0855) - 1))-1.0 * (cell * Vmax_0886 * (s_0434 * s_0557 - s_0394 * s_0555 / Keq_0886) / (Km0434_0886 * Km0557_0886) / ((1 + s_0434 / Km0434_0886) * (1 + s_0557 / Km0557_0886) + (1 + s_0394 / Km0394_0886) * (1 + s_0555 / Km0555_0886) - 1))-1.0 * (cell * Vmax_0887 * (s_0434 * s_1427 - s_0394 * s_1426 / Keq_0887) / (Km0434_0887 * Km1427_0887) / ((1 + s_0434 / Km0434_0887) * (1 + s_1427 / Km1427_0887) + (1 + s_0394 / Km0394_0887) * (1 + s_1426 / Km1426_0887) - 1))+1.0 * (cell * Vmax_0892 * (s_0075 * s_0394 - s_0260 * s_0434 / Keq_0892) / (Km0075_0892 * Km0394_0892) / ((1 + s_0075 / Km0075_0892) * (1 + s_0394 / Km0394_0892) + (1 + s_0260 / Km0260_0892) * (1 + s_0434 / Km0434_0892) - 1))-1.0 * (cell * Vmax_0904 * (s_0019 * s_0434 - s_0018 * s_0394 / Keq_0904) / (Km0019_0904 * Km0434_0904) / ((1 + s_0019 / Km0019_0904) * (1 + s_0434 / Km0434_0904) + (1 + s_0018 / Km0018_0904) * (1 + s_0394 / Km0394_0904) - 1))-1.0 * (cell * Vmax_0908 * (s_0434 * s_0973 * s_1364 - s_0299 * s_0394 * s_1322 / Keq_0908) / (Km0434_0908 * Km0973_0908 * Km1364_0908) / ((1 + s_0434 / Km0434_0908) * (1 + s_0973 / Km0973_0908) * (1 + s_1364 / Km1364_0908) + (1 + s_0299 / Km0299_0908) * (1 + s_0394 / Km0394_0908) * (1 + s_1322 / Km1322_0908) - 1))-1.0 * (cell * Vmax_0911 * (s_0300 * s_0456 * s_0434 - s_1364 * s_0394 * s_1322 / Keq_0911) / (Km0300_0911 * Km0456_0911 * Km0434_0911) / ((1 + s_0300 / Km0300_0911) * (1 + s_0456 / Km0456_0911) * (1 + s_0434 / Km0434_0911) + (1 + s_1364 / Km1364_0911) * (1 + s_0394 / Km0394_0911) * (1 + s_1322 / Km1322_0911) - 1))-1.0 * (cell * Vmax_0914 * (s_0327 * s_0434 * s_1003 - s_0325 * s_0394 * s_1322 / Keq_0914) / (Km0327_0914 * Km0434_0914 * Km1003_0914) / ((1 + s_0327 / Km0327_0914) * (1 + s_0434 / Km0434_0914) * (1 + s_1003 / Km1003_0914) + (1 + s_0325 / Km0325_0914) * (1 + s_0394 / Km0394_0914) * (1 + s_1322 / Km1322_0914) - 1))-1.0 * (cell * Vmax_0916 * (s_0434 * s_1408 - s_0423 * s_1386 / Keq_0916) / (Km0434_0916 * Km1408_0916) / ((1 + s_0434 / Km0434_0916) * (1 + s_1408 / Km1408_0916) + (1 + s_0423 / Km0423_0916) * (1 + s_1386 / Km1386_0916) - 1))-1.0 * (cell * Vmax_0958 * (s_0434 * s_0445 * s_1399 - s_0394 * s_1271 * s_1322 / Keq_0958) / (Km0434_0958 * Km0445_0958 * Km1399_0958) / ((1 + s_0434 / Km0434_0958) * (1 + s_0445 / Km0445_0958) * (1 + s_1399 / Km1399_0958) + (1 + s_0394 / Km0394_0958) * (1 + s_1271 / Km1271_0958) * (1 + s_1322 / Km1322_0958) - 1))+1.0 * (cell * Vmax_0962 * (s_0394 * s_1360 - s_0434 * s_1399 / Keq_0962) / (Km0394_0962 * Km1360_0962) / ((1 + s_0394 / Km0394_0962) * (1 + s_1360 / Km1360_0962) + (1 + s_0434 / Km0434_0962) * (1 + s_1399 / Km1399_0962) - 1))-1.0 * (cell * Vmax_0970 * (s_0434 * s_1616 - s_0586 * s_1620 / Keq_0970) / (Km0434_0970 * Km1616_0970) / ((1 + s_0434 / Km0434_0970) * (1 + s_1616 / Km1616_0970) + (1 + s_0586 / Km0586_0970) * (1 + s_1620 / Km1620_0970) - 1))-1.0 * (cell * Vmax_0997 * (s_0434 * s_1429 - s_0261 * s_0394 / Keq_0997) / (Km0434_0997 * Km1429_0997) / ((1 + s_0434 / Km0434_0997) * (1 + s_1429 / Km1429_0997) + (1 + s_0261 / Km0261_0997) * (1 + s_0394 / Km0394_0997) - 1))-1.0 * (cell * Vmax_1072 * (s_0434 * s_1545 - s_0394 * s_1538 / Keq_1072) / (Km0434_1072 * Km1545_1072) / ((1 + s_0434 / Km0434_1072) * (1 + s_1545 / Km1545_1072) + (1 + s_0394 / Km0394_1072) * (1 + s_1538 / Km1538_1072) - 1))+1.0 * (cell * Vmax_1704 * (s_0394 * s_0587 - s_0434 * s_0589 / Keq_1704) / (Km0394_1704 * Km0587_1704) / ((1 + s_0394 / Km0394_1704) * (1 + s_0587 / Km0587_1704) + (1 + s_0434 / Km0434_1704) * (1 + s_0589 / Km0589_1704) - 1))+1.0 * (cell * Vmax_1729 * (s_0394 * s_0582 - s_0434 * s_0584 / Keq_1729) / (Km0394_1729 * Km0582_1729) / ((1 + s_0394 / Km0394_1729) * (1 + s_0582 / Km0582_1729) + (1 + s_0434 / Km0434_1729) * (1 + s_0584 / Km0584_1729) - 1))-59.3 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_0296) ~ +1.0 * (cell * Vmax_0236 * (s_0209 * s_1212 - s_0296 * s_1207 / Keq_0236) / (Km0209_0236 * Km1212_0236) / ((1 + s_0209 / Km0209_0236) * (1 + s_1212 / Km1212_0236) + (1 + s_0296 / Km0296_0236) * (1 + s_1207 / Km1207_0236) - 1))-1.0 * (cell * Vmax_0238 * (s_0296 * s_1212 * s_1275 - s_1207 * s_1576 / Keq_0238) / (Km0296_0238 * Km1212_0238 * Km1275_0238) / ((1 + s_0296 / Km0296_0238) * (1 + s_1212 / Km1212_0238) * (1 + s_1275 / Km1275_0238) + (1 + s_1207 / Km1207_0238) * (1 + s_1576 / Km1576_0238) - 1)),
D(s_0619) ~ +1.0 * (cell * Vmax_0336 * (s_0529 * s_1524 - s_0380 * s_0619 / Keq_0336) / (Km0529_0336 * Km1524_0336) / ((1 + s_0529 / Km0529_0336) * (1 + s_1524 / Km1524_0336) + (1 + s_0380 / Km0380_0336) * (1 + s_0619 / Km0619_0336) - 1))+1.0 * (cell * Vmax_0337 * (s_1331 - s_0619 * s_1322 / Keq_0337) / Km1331_0337 / (1 + s_1331 / Km1331_0337 + (1 + s_0619 / Km0619_0337) * (1 + s_1322 / Km1322_0337) - 1))+1.0 * (cell * Vmax_0594 * (s_0089 * s_0499 - s_0619 * s_0918 / Keq_0594) / (Km0089_0594 * Km0499_0594) / ((1 + s_0089 / Km0089_0594) * (1 + s_0499 / Km0499_0594) + (1 + s_0619 / Km0619_0594) * (1 + s_0918 / Km0918_0594) - 1))-1.0 * (cell * Vmax_1052 * (s_0619 * s_0595 - s_1524 / Keq_1052) / (Km0619_1052 * Km0595_1052) / ((1 + s_0619 / Km0619_1052) * (1 + s_0595 / Km0595_1052) + 1 + s_1524 / Km1524_1052 - 1)),
D(s_0188) ~ -1.0 * (cell * Vmax_0366 * (s_0188 - s_1360 / Keq_0366) / Km0188_0366 / (1 + s_0188 / Km0188_0366 + 1 + s_1360 / Km1360_0366 - 1))+1.0 * (cell * Vmax_0893 * (s_0260 - s_0188 / Keq_0893) / Km0260_0893 / (1 + s_0260 / Km0260_0893 + 1 + s_0188 / Km0188_0893 - 1)),
D(s_1535) ~ -1.0 * (cell * Vmax_0439 * ((s_0709)^(2) * s_1535 - (s_0710)^(2) * s_1537 / Keq_0439) / ((Km0709_0439)^(2) * Km1535_0439) / ((1 + s_0709 / Km0709_0439)^(2) * (1 + s_1535 / Km1535_0439) + (1 + s_0710 / Km0710_0439)^(2) * (1 + s_1537 / Km1537_0439) - 1))+1.0 * (cell * Vmax_0770 * (s_1203 * s_1537 - s_1198 * s_1535 / Keq_0770) / (Km1203_0770 * Km1537_0770) / ((1 + s_1203 / Km1203_0770) * (1 + s_1537 / Km1537_0770) + (1 + s_1198 / Km1198_0770) * (1 + s_1535 / Km1535_0770) - 1)),
D(s_0649) ~ +1.0 * (cell * Vmax_1045 * (s_0306 * s_0654 - s_0625 * s_0649 / Keq_1045) / (Km0306_1045 * Km0654_1045) / ((1 + s_0306 / Km0306_1045) * (1 + s_0654 / Km0654_1045) + (1 + s_0625 / Km0625_1045) * (1 + s_0649 / Km0649_1045) - 1))-0.00359 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_0078) ~ -1.0 * (cell * Vmax_0909 * (s_0078 - s_0077 / Keq_0909) / Km0078_0909 / (1 + s_0078 / Km0078_0909 + 1 + s_0077 / Km0077_0909 - 1))+1.0 * (cell * Vmax_0910 * (s_0326 - s_0078 * s_0633 / Keq_0910) / Km0326_0910 / (1 + s_0326 / Km0326_0910 + (1 + s_0078 / Km0078_0910) * (1 + s_0633 / Km0633_0910) - 1)),
D(s_1405) ~ +1.0 * (cell * Vmax_0968 * ((s_0328)^(2) - s_0314 * s_1405 / Keq_0968) / (Km0328_0968)^(2) / ((1 + s_0328 / Km0328_0968)^(2) + (1 + s_0314 / Km0314_0968) * (1 + s_1405 / Km1405_0968) - 1))-0.0009 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_1376) ~ -1.0 * (cell * Vmax_0355 * (s_0943 * s_1376 - s_0633 * s_0745 / Keq_0355) / (Km0943_0355 * Km1376_0355) / ((1 + s_0943 / Km0943_0355) * (1 + s_1376 / Km1376_0355) + (1 + s_0633 / Km0633_0355) * (1 + s_0745 / Km0745_0355) - 1))+1.0 * (cell * Vmax_0667 * (s_0943 - s_1376 / Keq_0667) / Km0943_0667 / (1 + s_0943 / Km0943_0667 + 1 + s_1376 / Km1376_0667 - 1)),
D(s_0301) ~ -1.0 * (cell * Vmax_0079 * (s_0301 * s_0434 * s_0999 - s_0302 * s_0394 * s_0991 * s_1322 / Keq_0079) / (Km0301_0079 * Km0434_0079 * Km0999_0079) / ((1 + s_0301 / Km0301_0079) * (1 + s_0434 / Km0434_0079) * (1 + s_0999 / Km0999_0079) + (1 + s_0302 / Km0302_0079) * (1 + s_0394 / Km0394_0079) * (1 + s_0991 / Km0991_0079) * (1 + s_1322 / Km1322_0079) - 1))+1.0 * (cell * Vmax_0499 * (s_0120 * s_0325 - s_0301 * s_1487 / Keq_0499) / (Km0120_0499 * Km0325_0499) / ((1 + s_0120 / Km0120_0499) * (1 + s_0325 / Km0325_0499) + (1 + s_0301 / Km0301_0499) * (1 + s_1487 / Km1487_0499) - 1)),
D(s_0700) ~ -1.0 * (cell * Vmax_0243 * (s_0700 - s_0657 / Keq_0243) / Km0700_0243 / (1 + s_0700 / Km0700_0243 + 1 + s_0657 / Km0657_0243 - 1))+1.0 * (cell * Vmax_0986 * (s_1416 * s_1569 - s_0700 * s_1413 / Keq_0986) / (Km1416_0986 * Km1569_0986) / ((1 + s_1416 / Km1416_0986) * (1 + s_1569 / Km1569_0986) + (1 + s_0700 / Km0700_0986) * (1 + s_1413 / Km1413_0986) - 1))-0.000114 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_0314) ~ -1.0 * (cell * Vmax_0967 * (s_0158 * s_0314 - s_0328 * s_1322 / Keq_0967) / (Km0158_0967 * Km0314_0967) / ((1 + s_0158 / Km0158_0967) * (1 + s_0314 / Km0314_0967) + (1 + s_0328 / Km0328_0967) * (1 + s_1322 / Km1322_0967) - 1))+1.0 * (cell * Vmax_0968 * ((s_0328)^(2) - s_0314 * s_1405 / Keq_0968) / (Km0328_0968)^(2) / ((1 + s_0328 / Km0328_0968)^(2) + (1 + s_0314 / Km0314_0968) * (1 + s_1405 / Km1405_0968) - 1))+1.0 * (cell * Vmax_2030 * (s_0313 - s_0314 * s_1322 / Keq_2030) / Km0313_2030 / (1 + s_0313 / Km0313_2030 + (1 + s_0314 / Km0314_2030) * (1 + s_1322 / Km1322_2030) - 1)),
D(s_1032) ~ +1.0 * (cell * Vmax_0851 * (s_0951 * s_0991 - s_0180 * s_1032 / Keq_0851) / (Km0951_0851 * Km0991_0851) / ((1 + s_0951 / Km0951_0851) * (1 + s_0991 / Km0991_0851) + (1 + s_0180 / Km0180_0851) * (1 + s_1032 / Km1032_0851) - 1))-0.114 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_1021) ~ +1.0 * (cell * Vmax_0699 * (s_0291 * s_0991 - s_0180 * s_1021 / Keq_0699) / (Km0291_0699 * Km0991_0699) / ((1 + s_0291 / Km0291_0699) * (1 + s_0991 / Km0991_0699) + (1 + s_0180 / Km0180_0699) * (1 + s_1021 / Km1021_0699) - 1))-0.25 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_1467) ~ -1.0 * (cell * Vmax_1026 * (s_0394 * s_1467 - s_0298 * s_1322 / Keq_1026) / (Km0394_1026 * Km1467_1026) / ((1 + s_0394 / Km0394_1026) * (1 + s_1467 / Km1467_1026) + (1 + s_0298 / Km0298_1026) * (1 + s_1322 / Km1322_1026) - 1))+1.0 * (cell * Vmax_1266 * (s_1468 - s_1467) / Km1468_1266 / (1 + s_1468 / Km1468_1266 + 1 + s_1467 / Km1467_1266 - 1))-0.02 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_0086) ~ +1.0 * (cell * Vmax_0566 * (s_0076 - s_0086 * s_0456 / Keq_0566) / Km0076_0566 / (1 + s_0076 / Km0076_0566 + (1 + s_0086 / Km0086_0566) * (1 + s_0456 / Km0456_0566) - 1))-1.0 * (cell * Vmax_1055 * (s_0086 * s_1039 - s_0764 * s_1048 / Keq_1055) / (Km0086_1055 * Km1039_1055) / ((1 + s_0086 / Km0086_1055) * (1 + s_1039 / Km1039_1055) + (1 + s_0764 / Km0764_1055) * (1 + s_1048 / Km1048_1055) - 1)),
D(s_0158) ~ +1.0 * (cell * Vmax_0038 * (s_0577 - s_0158 * s_0722 / Keq_0038) / Km0577_0038 / (1 + s_0577 / Km0577_0038 + (1 + s_0158 / Km0158_0038) * (1 + s_0722 / Km0722_0038) - 1))-1.0 * (cell * Vmax_0967 * (s_0158 * s_0314 - s_0328 * s_1322 / Keq_0967) / (Km0158_0967 * Km0314_0967) / ((1 + s_0158 / Km0158_0967) * (1 + s_0314 / Km0314_0967) + (1 + s_0328 / Km0328_0967) * (1 + s_1322 / Km1322_0967) - 1)),
D(s_0672) ~ +1.0 * (cell * Vmax_1014 * (s_0666 * s_0595 - s_0672 / Keq_1014) / (Km0666_1014 * Km0595_1014) / ((1 + s_0666 / Km0666_1014) * (1 + s_0595 / Km0595_1014) + 1 + s_0672 / Km0672_1014 - 1))-0.000812 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_0456) ~ +1.0 * (cell * Vmax_0016 * (s_0178 * s_1399 - s_0039 * s_0456 / Keq_0016) / (Km0178_0016 * Km1399_0016) / ((1 + s_0178 / Km0178_0016) * (1 + s_1399 / Km1399_0016) + (1 + s_0039 / Km0039_0016) * (1 + s_0456 / Km0456_0016) - 1))+1.0 * (cell * Vmax_0029 * (s_0010 - s_0291 * s_0456 / Keq_0029) / Km0010_0029 / (1 + s_0010 / Km0010_0029 + (1 + s_0291 / Km0291_0029) * (1 + s_0456 / Km0456_0029) - 1))+1.0 * (cell * Vmax_0097 * ((s_1399)^(2) - s_0146 * s_0456 / Keq_0097) / (Km1399_0097)^(2) / ((1 + s_1399 / Km1399_0097)^(2) + (1 + s_0146 / Km0146_0097) * (1 + s_0456 / Km0456_0097) - 1))+1.0 * (cell * Vmax_0234 * (s_1207 * s_1578 - s_0456 * s_1212 * s_1579 / Keq_0234) / (Km1207_0234 * Km1578_0234) / ((1 + s_1207 / Km1207_0234) * (1 + s_1578 / Km1578_0234) + (1 + s_0456 / Km0456_0234) * (1 + s_1212 / Km1212_0234) * (1 + s_1579 / Km1579_0234) - 1))+1.0 * (cell * Vmax_0235 * (s_0297 * s_1198 - s_0209 * s_0456 * s_1203 / Keq_0235) / (Km0297_0235 * Km1198_0235) / ((1 + s_0297 / Km0297_0235) * (1 + s_1198 / Km1198_0235) + (1 + s_0209 / Km0209_0235) * (1 + s_0456 / Km0456_0235) * (1 + s_1203 / Km1203_0235) - 1))+1.0 * (cell * Vmax_0386 * (s_0595 * s_1101 * (s_1212)^(2) - s_0456 * s_0529 * s_1065 * (s_1207)^(2) / Keq_0386) / (Km0595_0386 * Km1101_0386 * (Km1212_0386)^(2)) / ((1 + s_0595 / Km0595_0386) * (1 + s_1101 / Km1101_0386) * (1 + s_1212 / Km1212_0386)^(2) + (1 + s_0456 / Km0456_0386) * (1 + s_0529 / Km0529_0386) * (1 + s_1065 / Km1065_0386) * (1 + s_1207 / Km1207_0386)^(2) - 1))+1.0 * (cell * Vmax_0387 * (s_1065 * s_1101 * (s_1212)^(2) - s_0456 * s_0529 * s_1161 * (s_1207)^(2) / Keq_0387) / (Km1065_0387 * Km1101_0387 * (Km1212_0387)^(2)) / ((1 + s_1065 / Km1065_0387) * (1 + s_1101 / Km1101_0387) * (1 + s_1212 / Km1212_0387)^(2) + (1 + s_0456 / Km0456_0387) * (1 + s_0529 / Km0529_0387) * (1 + s_1161 / Km1161_0387) * (1 + s_1207 / Km1207_0387)^(2) - 1))+1.0 * (cell * Vmax_0389 * (s_1101 * s_1161 * (s_1212)^(2) - s_0456 * s_0529 * (s_1207)^(2) * s_1286 / Keq_0389) / (Km1101_0389 * Km1161_0389 * (Km1212_0389)^(2)) / ((1 + s_1101 / Km1101_0389) * (1 + s_1161 / Km1161_0389) * (1 + s_1212 / Km1212_0389)^(2) + (1 + s_0456 / Km0456_0389) * (1 + s_0529 / Km0529_0389) * (1 + s_1207 / Km1207_0389)^(2) * (1 + s_1286 / Km1286_0389) - 1))+1.0 * (cell * Vmax_0391 * (s_1101 * (s_1212)^(2) * s_1286 - s_0456 * s_0529 * (s_1207)^(2) * s_1449 / Keq_0391) / (Km1101_0391 * (Km1212_0391)^(2) * Km1286_0391) / ((1 + s_1101 / Km1101_0391) * (1 + s_1212 / Km1212_0391)^(2) * (1 + s_1286 / Km1286_0391) + (1 + s_0456 / Km0456_0391) * (1 + s_0529 / Km0529_0391) * (1 + s_1207 / Km1207_0391)^(2) * (1 + s_1449 / Km1449_0391) - 1))+3.0 * (cell * Vmax_0393 * ((s_1101)^(3) * (s_1212)^(6) * s_1449 - (s_0456)^(3) * (s_0529)^(3) * s_1084 * (s_1207)^(6) / Keq_0393) / ((Km1101_0393)^(3) * (Km1212_0393)^(6) * Km1449_0393) / ((1 + s_1101 / Km1101_0393)^(3) * (1 + s_1212 / Km1212_0393)^(6) * (1 + s_1449 / Km1449_0393) + (1 + s_0456 / Km0456_0393)^(3) * (1 + s_0529 / Km0529_0393)^(3) * (1 + s_1084 / Km1084_0393) * (1 + s_1207 / Km1207_0393)^(6) - 1))+1.0 * (cell * Vmax_0397 * (s_1101 * (s_1212)^(2) * s_1255 - s_0456 * s_0529 * s_0602 * (s_1207)^(2) / Keq_0397) / (Km1101_0397 * (Km1212_0397)^(2) * Km1255_0397) / ((1 + s_1101 / Km1101_0397) * (1 + s_1212 / Km1212_0397)^(2) * (1 + s_1255 / Km1255_0397) + (1 + s_0456 / Km0456_0397) * (1 + s_0529 / Km0529_0397) * (1 + s_0602 / Km0602_0397) * (1 + s_1207 / Km1207_0397)^(2) - 1))+3.0 * (cell * Vmax_0398 * (s_0373 * (s_1101)^(3) * (s_1212)^(6) - (s_0456)^(3) * (s_0529)^(3) * (s_1207)^(6) * s_1255 / Keq_0398) / (Km0373_0398 * (Km1101_0398)^(3) * (Km1212_0398)^(6)) / ((1 + s_0373 / Km0373_0398) * (1 + s_1101 / Km1101_0398)^(3) * (1 + s_1212 / Km1212_0398)^(6) + (1 + s_0456 / Km0456_0398)^(3) * (1 + s_0529 / Km0529_0398)^(3) * (1 + s_1207 / Km1207_0398)^(6) * (1 + s_1255 / Km1255_0398) - 1))+1.0 * (cell * Vmax_0432 * (s_0602 * s_1101 * (s_1212)^(2) - s_0456 * s_0529 * s_1073 * (s_1207)^(2) / Keq_0432) / (Km0602_0432 * Km1101_0432 * (Km1212_0432)^(2)) / ((1 + s_0602 / Km0602_0432) * (1 + s_1101 / Km1101_0432) * (1 + s_1212 / Km1212_0432)^(2) + (1 + s_0456 / Km0456_0432) * (1 + s_0529 / Km0529_0432) * (1 + s_1073 / Km1073_0432) * (1 + s_1207 / Km1207_0432)^(2) - 1))+1.0 * (cell * Vmax_0433 * (s_1073 * s_1101 * (s_1212)^(2) - s_0456 * s_0529 * s_1176 * (s_1207)^(2) / Keq_0433) / (Km1073_0433 * Km1101_0433 * (Km1212_0433)^(2)) / ((1 + s_1073 / Km1073_0433) * (1 + s_1101 / Km1101_0433) * (1 + s_1212 / Km1212_0433)^(2) + (1 + s_0456 / Km0456_0433) * (1 + s_0529 / Km0529_0433) * (1 + s_1176 / Km1176_0433) * (1 + s_1207 / Km1207_0433)^(2) - 1))+1.0 * (cell * Vmax_0434 * (s_1101 * s_1176 * (s_1212)^(2) - s_0456 * s_0529 * (s_1207)^(2) * s_1302 / Keq_0434) / (Km1101_0434 * Km1176_0434 * (Km1212_0434)^(2)) / ((1 + s_1101 / Km1101_0434) * (1 + s_1176 / Km1176_0434) * (1 + s_1212 / Km1212_0434)^(2) + (1 + s_0456 / Km0456_0434) * (1 + s_0529 / Km0529_0434) * (1 + s_1207 / Km1207_0434)^(2) * (1 + s_1302 / Km1302_0434) - 1))+1.0 * (cell * Vmax_0435 * (s_1101 * (s_1212)^(2) * s_1302 - s_0456 * s_0529 * (s_1207)^(2) * s_1454 / Keq_0435) / (Km1101_0435 * (Km1212_0435)^(2) * Km1302_0435) / ((1 + s_1101 / Km1101_0435) * (1 + s_1212 / Km1212_0435)^(2) * (1 + s_1302 / Km1302_0435) + (1 + s_0456 / Km0456_0435) * (1 + s_0529 / Km0529_0435) * (1 + s_1207 / Km1207_0435)^(2) * (1 + s_1454 / Km1454_0435) - 1))+1.0 * (cell * Vmax_0445 * (s_0722 * s_1198 - s_0456 * s_1203 / Keq_0445) / (Km0722_0445 * Km1198_0445) / ((1 + s_0722 / Km0722_0445) * (1 + s_1198 / Km1198_0445) + (1 + s_0456 / Km0456_0445) * (1 + s_1203 / Km1203_0445) - 1))+1.0 * (cell * Vmax_0545 * (s_0836 * s_1198 - s_0176 * s_1203 * s_0456 / Keq_0545) / (Km0836_0545 * Km1198_0545) / ((1 + s_0836 / Km0836_0545) * (1 + s_1198 / Km1198_0545) + (1 + s_0176 / Km0176_0545) * (1 + s_1203 / Km1203_0545) * (1 + s_0456 / Km0456_0545) - 1))+1.0 * (cell * Vmax_0566 * (s_0076 - s_0086 * s_0456 / Keq_0566) / Km0076_0566 / (1 + s_0076 / Km0076_0566 + (1 + s_0086 / Km0086_0566) * (1 + s_0456 / Km0456_0566) - 1))+1.0 * (cell * Vmax_0658 * (s_0940 * s_1198 - s_0180 * s_0456 * s_1203 / Keq_0658) / (Km0940_0658 * Km1198_0658) / ((1 + s_0940 / Km0940_0658) * (1 + s_1198 / Km1198_0658) + (1 + s_0180 / Km0180_0658) * (1 + s_0456 / Km0456_0658) * (1 + s_1203 / Km1203_0658) - 1))+1.0 * (cell * Vmax_0661 * (s_0940 * s_1207 - s_0180 * s_0456 * s_1212 / Keq_0661) / (Km0940_0661 * Km1207_0661) / ((1 + s_0940 / Km0940_0661) * (1 + s_1207 / Km1207_0661) + (1 + s_0180 / Km0180_0661) * (1 + s_0456 / Km0456_0661) * (1 + s_1212 / Km1212_0661) - 1))+1.0 * (cell * Vmax_0739 * (s_0018 * s_0434 - s_0394 * s_0456 * s_0943 * s_1322 / Keq_0739) / (Km0018_0739 * Km0434_0739) / ((1 + s_0018 / Km0018_0739) * (1 + s_0434 / Km0434_0739) + (1 + s_0394 / Km0394_0739) * (1 + s_0456 / Km0456_0739) * (1 + s_0943 / Km0943_0739) * (1 + s_1322 / Km1322_0739) - 1))+1.0 * (cell * Vmax_0821 * (s_1270 - s_0456 * s_1545 / Keq_0821) / Km1270_0821 / (1 + s_1270 / Km1270_0821 + (1 + s_0456 / Km0456_0821) * (1 + s_1545 / Km1545_0821) - 1))+1.0 * (cell * Vmax_0877 * (s_1337 - s_0456 * s_1351 / Keq_0877) / Km1337_0877 / (1 + s_1337 / Km1337_0877 + (1 + s_0456 / Km0456_0877) * (1 + s_1351 / Km1351_0877) - 1))+1.0 * (cell * Vmax_0889 * (s_0340 * s_1207 - s_0456 * s_0577 * s_1212 / Keq_0889) / (Km0340_0889 * Km1207_0889) / ((1 + s_0340 / Km0340_0889) * (1 + s_1207 / Km1207_0889) + (1 + s_0456 / Km0456_0889) * (1 + s_0577 / Km0577_0889) * (1 + s_1212 / Km1212_0889) - 1))-1.0 * (cell * Vmax_0911 * (s_0300 * s_0456 * s_0434 - s_1364 * s_0394 * s_1322 / Keq_0911) / (Km0300_0911 * Km0456_0911 * Km0434_0911) / ((1 + s_0300 / Km0300_0911) * (1 + s_0456 / Km0456_0911) * (1 + s_0434 / Km0434_0911) + (1 + s_1364 / Km1364_0911) * (1 + s_0394 / Km0394_0911) * (1 + s_1322 / Km1322_0911) - 1))+1.0 * (cell * Vmax_0938 * (s_1377 - s_0456 * s_0951 / Keq_0938) / Km1377_0938 / (1 + s_1377 / Km1377_0938 + (1 + s_0456 / Km0456_0938) * (1 + s_0951 / Km0951_0938) - 1))+1.0 * (cell * Vmax_0939 * (s_1207 * s_1377 - s_0204 * s_0456 * s_1212 / Keq_0939) / (Km1207_0939 * Km1377_0939) / ((1 + s_1207 / Km1207_0939) * (1 + s_1377 / Km1377_0939) + (1 + s_0204 / Km0204_0939) * (1 + s_0456 / Km0456_0939) * (1 + s_1212 / Km1212_0939) - 1))+1.0 * (cell * Vmax_0959 * (s_1399 - s_0359 * s_0456 / Keq_0959) / Km1399_0959 / (1 + s_1399 / Km1399_0959 + (1 + s_0359 / Km0359_0959) * (1 + s_0456 / Km0456_0959) - 1))+1.0 * (cell * Vmax_0961 * (s_0529 * s_1198 * s_1399 - s_0373 * s_0456 * s_1203 / Keq_0961) / (Km0529_0961 * Km1198_0961 * Km1399_0961) / ((1 + s_0529 / Km0529_0961) * (1 + s_1198 / Km1198_0961) * (1 + s_1399 / Km1399_0961) + (1 + s_0373 / Km0373_0961) * (1 + s_0456 / Km0456_0961) * (1 + s_1203 / Km1203_0961) - 1))+1.0 * (cell * Vmax_0993 * (s_1039 * s_1302 - s_0231 * s_0456 * s_0529 / Keq_0993) / (Km1039_0993 * Km1302_0993) / ((1 + s_1039 / Km1039_0993) * (1 + s_1302 / Km1302_0993) + (1 + s_0231 / Km0231_0993) * (1 + s_0456 / Km0456_0993) * (1 + s_0529 / Km0529_0993) - 1))-1.0 * (cell * Vmax_1664 * (s_0456 - s_0445 / Keq_1664) / Km0456_1664 / (1 + s_0456 / Km0456_1664 + 1 + s_0445 / Km0445_1664 - 1))-1.0 * (cell * Vmax_1697 * s_0456 / Km0456_1697 / (1 + s_0456 / Km0456_1697)),
D(s_1569) ~ +1.0 * (cell * Vmax_0237 * (s_1212 * s_1579 - s_1207 * s_1569 / Keq_0237) / (Km1212_0237 * Km1579_0237) / ((1 + s_1212 / Km1212_0237) * (1 + s_1579 / Km1579_0237) + (1 + s_1207 / Km1207_0237) * (1 + s_1569 / Km1569_0237) - 1))-1.0 * (cell * Vmax_0986 * (s_1416 * s_1569 - s_0700 * s_1413 / Keq_0986) / (Km1416_0986 * Km1569_0986) / ((1 + s_1416 / Km1416_0986) * (1 + s_1569 / Km1569_0986) + (1 + s_0700 / Km0700_0986) * (1 + s_1413 / Km1413_0986) - 1))-1.5e-5 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0)),
D(s_1322) ~ +1.0 * (cell * Vmax_0020 * (s_0551 * s_1360 - s_0349 * s_1322 / Keq_0020) / (Km0551_0020 * Km1360_0020) / ((1 + s_0551 / Km0551_0020) * (1 + s_1360 / Km1360_0020) + (1 + s_0349 / Km0349_0020) * (1 + s_1322 / Km1322_0020) - 1))+1.0 * (cell * Vmax_0032 * (s_0390 - s_0423 * s_1322 / Keq_0032) / Km0390_0032 / (1 + s_0390 / Km0390_0032 + (1 + s_0423 / Km0423_0032) * (1 + s_1322 / Km1322_0032) - 1))+1.0 * (cell * Vmax_0040 * (s_0349 - s_0210 * s_1322 / Keq_0040) / Km0349_0040 / (1 + s_0349 / Km0349_0040 + (1 + s_0210 / Km0210_0040) * (1 + s_1322 / Km1322_0040) - 1))+1.0 * (cell * Vmax_0065 * (s_0261 * s_1360 - s_0324 * s_1322 / Keq_0065) / (Km0261_0065 * Km1360_0065) / ((1 + s_0261 / Km0261_0065) * (1 + s_1360 / Km1360_0065) + (1 + s_0324 / Km0324_0065) * (1 + s_1322 / Km1322_0065) - 1))+1.0 * (cell * Vmax_0079 * (s_0301 * s_0434 * s_0999 - s_0302 * s_0394 * s_0991 * s_1322 / Keq_0079) / (Km0301_0079 * Km0434_0079 * Km0999_0079) / ((1 + s_0301 / Km0301_0079) * (1 + s_0434 / Km0434_0079) * (1 + s_0999 / Km0999_0079) + (1 + s_0302 / Km0302_0079) * (1 + s_0394 / Km0394_0079) * (1 + s_0991 / Km0991_0079) * (1 + s_1322 / Km1322_0079) - 1))+1.0 * (cell * Vmax_0108 * (s_0373 * s_0434 * s_0445 - s_0394 * s_1101 * s_1322 / Keq_0108) / (Km0373_0108 * Km0434_0108 * Km0445_0108) / ((1 + s_0373 / Km0373_0108) * (1 + s_0434 / Km0434_0108) * (1 + s_0445 / Km0445_0108) + (1 + s_0394 / Km0394_0108) * (1 + s_1101 / Km1101_0108) * (1 + s_1322 / Km1322_0108) - 1))+1.0 * (cell * Vmax_0153 * (s_0785 * s_0849 * s_0973 - s_0393 * s_0739 * s_1322 / Keq_0153) / (Km0785_0153 * Km0849_0153 * Km0973_0153) / ((1 + s_0785 / Km0785_0153) * (1 + s_0849 / Km0849_0153) * (1 + s_0973 / Km0973_0153) + (1 + s_0393 / Km0393_0153) * (1 + s_0739 / Km0739_0153) * (1 + s_1322 / Km1322_0153) - 1))+1.0 * (cell * Vmax_0214 * (s_0455 * s_0973 - s_1194 * s_1322 / Keq_0214) / (Km0455_0214 * Km0973_0214) / ((1 + s_0455 / Km0455_0214) * (1 + s_0973 / Km0973_0214) + (1 + s_1194 / Km1194_0214) * (1 + s_1322 / Km1322_0214) - 1))+1.0 * (cell * Vmax_0219 * (s_0295 * s_1212 - s_0978 * s_1207 * s_1322 / Keq_0219) / (Km0295_0219 * Km1212_0219) / ((1 + s_0295 / Km0295_0219) * (1 + s_1212 / Km1212_0219) + (1 + s_0978 / Km0978_0219) * (1 + s_1207 / Km1207_0219) * (1 + s_1322 / Km1322_0219) - 1))-1.0 * (cell * Vmax_0226 * (s_0394 * s_1322 - s_0434 / Keq_0226) / (Km0394_0226 * Km1322_0226) / ((1 + s_0394 / Km0394_0226) * (1 + s_1322 / Km1322_0226) + 1 + s_0434 / Km0434_0226 - 1))+1.0 * (cell * Vmax_0250 * ((s_0434)^(2) * s_0445 * s_0999 - (s_0394)^(2) * s_0455 * s_0991 * s_1322 / Keq_0250) / ((Km0434_0250)^(2) * Km0445_0250 * Km0999_0250) / ((1 + s_0434 / Km0434_0250)^(2) * (1 + s_0445 / Km0445_0250) * (1 + s_0999 / Km0999_0250) + (1 + s_0394 / Km0394_0250)^(2) * (1 + s_0455 / Km0455_0250) * (1 + s_0991 / Km0991_0250) * (1 + s_1322 / Km1322_0250) - 1))+1.0 * (cell * Vmax_0279 * (s_0324 - s_0515 * s_1322 / Keq_0279) / Km0324_0279 / (1 + s_0324 / Km0324_0279 + (1 + s_0515 / Km0515_0279) * (1 + s_1322 / Km1322_0279) - 1))+1.0 * (cell * Vmax_0307 * (s_0419 * s_0434 * s_1559 - s_0394 * s_0539 * s_1322 / Keq_0307) / (Km0419_0307 * Km0434_0307 * Km1559_0307) / ((1 + s_0419 / Km0419_0307) * (1 + s_0434 / Km0434_0307) * (1 + s_1559 / Km1559_0307) + (1 + s_0394 / Km0394_0307) * (1 + s_0539 / Km0539_0307) * (1 + s_1322 / Km1322_0307) - 1))+1.0 * (cell * Vmax_0337 * (s_1331 - s_0619 * s_1322 / Keq_0337) / Km1331_0337 / (1 + s_1331 / Km1331_0337 + (1 + s_0619 / Km0619_0337) * (1 + s_1322 / Km1322_0337) - 1))-1.0 * (cell * Vmax_0446 * (s_0120 * s_0394 * s_1322 - s_0434 * s_0722 * s_1487 / Keq_0446) / (Km0120_0446 * Km0394_0446 * Km1322_0446) / ((1 + s_0120 / Km0120_0446) * (1 + s_0394 / Km0394_0446) * (1 + s_1322 / Km1322_0446) + (1 + s_0434 / Km0434_0446) * (1 + s_0722 / Km0722_0446) * (1 + s_1487 / Km1487_0446) - 1))+1.0 * (cell * Vmax_0476 * (s_0419 * s_0434 * s_0991 - s_0394 * s_0999 * s_1322 / Keq_0476) / (Km0419_0476 * Km0434_0476 * Km0991_0476) / ((1 + s_0419 / Km0419_0476) * (1 + s_0434 / Km0434_0476) * (1 + s_0991 / Km0991_0476) + (1 + s_0394 / Km0394_0476) * (1 + s_0999 / Km0999_0476) * (1 + s_1322 / Km1322_0476) - 1))-1.0 * (cell * Vmax_0486 * (s_0764 * s_1198 * s_1322 - s_0075 * s_1203 / Keq_0486) / (Km0764_0486 * Km1198_0486 * Km1322_0486) / ((1 + s_0764 / Km0764_0486) * (1 + s_1198 / Km1198_0486) * (1 + s_1322 / Km1322_0486) + (1 + s_0075 / Km0075_0486) * (1 + s_1203 / Km1203_0486) - 1))+1.0 * (cell * Vmax_0489 * (s_0767 - s_0765 * s_1322 / Keq_0489) / Km0767_0489 / (1 + s_0767 / Km0767_0489 + (1 + s_0765 / Km0765_0489) * (1 + s_1322 / Km1322_0489) - 1))+1.0 * (cell * Vmax_0537 * (s_1011 - s_1010 * s_1322 / Keq_0537) / Km1011_0537 / (1 + s_1011 / Km1011_0537 + (1 + s_1010 / Km1010_0537) * (1 + s_1322 / Km1322_0537) - 1))+2.0 * (cell * Vmax_0568 * (s_0633 - (s_1322)^(2) / Keq_0568) / Km0633_0568 / (1 + s_0633 / Km0633_0568 + (1 + s_1322 / Km1322_0568)^(2) - 1))+1.0 * (cell * Vmax_0726 * (s_0434 * s_1029 - s_0633 * s_1322 * s_1416 / Keq_0726) / (Km0434_0726 * Km1029_0726) / ((1 + s_0434 / Km0434_0726) * (1 + s_1029 / Km1029_0726) + (1 + s_0633 / Km0633_0726) * (1 + s_1322 / Km1322_0726) * (1 + s_1416 / Km1416_0726) - 1))+1.0 * (cell * Vmax_0739 * (s_0018 * s_0434 - s_0394 * s_0456 * s_0943 * s_1322 / Keq_0739) / (Km0018_0739 * Km0434_0739) / ((1 + s_0018 / Km0018_0739) * (1 + s_0434 / Km0434_0739) + (1 + s_0394 / Km0394_0739) * (1 + s_0456 / Km0456_0739) * (1 + s_0943 / Km0943_0739) * (1 + s_1322 / Km1322_0739) - 1))+1.0 * (cell * Vmax_0757 * (s_0126 - s_1153 * s_1322 / Keq_0757) / Km0126_0757 / (1 + s_0126 / Km0126_0757 + (1 + s_1153 / Km1153_0757) * (1 + s_1322 / Km1322_0757) - 1))+1.0 * (cell * Vmax_0759 * (s_1191 * s_1212 - s_0145 * s_1207 * s_1322 / Keq_0759) / (Km1191_0759 * Km1212_0759) / ((1 + s_1191 / Km1191_0759) * (1 + s_1212 / Km1212_0759) + (1 + s_0145 / Km0145_0759) * (1 + s_1207 / Km1207_0759) * (1 + s_1322 / Km1322_0759) - 1))+1.0 * (cell * Vmax_0792 * (s_0467 - s_0526 * s_1322 / Keq_0792) / Km0467_0792 / (1 + s_0467 / Km0467_0792 + (1 + s_0526 / Km0526_0792) * (1 + s_1322 / Km1322_0792) - 1))+1.0 * (cell * Vmax_0806 * (s_0539 - s_0467 * s_1322 / Keq_0806) / Km0539_0806 / (1 + s_0539 / Km0539_0806 + (1 + s_0467 / Km0467_0806) * (1 + s_1322 / Km1322_0806) - 1))+1.0 * (cell * Vmax_0816 * (s_0455 * s_1266 - s_0979 * s_1322 / Keq_0816) / (Km0455_0816 * Km1266_0816) / ((1 + s_0455 / Km0455_0816) * (1 + s_1266 / Km1266_0816) + (1 + s_0979 / Km0979_0816) * (1 + s_1322 / Km1322_0816) - 1))+1.0 * (cell * Vmax_0855 * (s_0302 * s_0434 - s_0300 * s_0394 * s_1322 / Keq_0855) / (Km0302_0855 * Km0434_0855) / ((1 + s_0302 / Km0302_0855) * (1 + s_0434 / Km0434_0855) + (1 + s_0300 / Km0300_0855) * (1 + s_0394 / Km0394_0855) * (1 + s_1322 / Km1322_0855) - 1))+1.0 * (cell * Vmax_0908 * (s_0434 * s_0973 * s_1364 - s_0299 * s_0394 * s_1322 / Keq_0908) / (Km0434_0908 * Km0973_0908 * Km1364_0908) / ((1 + s_0434 / Km0434_0908) * (1 + s_0973 / Km0973_0908) * (1 + s_1364 / Km1364_0908) + (1 + s_0299 / Km0299_0908) * (1 + s_0394 / Km0394_0908) * (1 + s_1322 / Km1322_0908) - 1))+1.0 * (cell * Vmax_0911 * (s_0300 * s_0456 * s_0434 - s_1364 * s_0394 * s_1322 / Keq_0911) / (Km0300_0911 * Km0456_0911 * Km0434_0911) / ((1 + s_0300 / Km0300_0911) * (1 + s_0456 / Km0456_0911) * (1 + s_0434 / Km0434_0911) + (1 + s_1364 / Km1364_0911) * (1 + s_0394 / Km0394_0911) * (1 + s_1322 / Km1322_0911) - 1))+1.0 * (cell * Vmax_0914 * (s_0327 * s_0434 * s_1003 - s_0325 * s_0394 * s_1322 / Keq_0914) / (Km0327_0914 * Km0434_0914 * Km1003_0914) / ((1 + s_0327 / Km0327_0914) * (1 + s_0434 / Km0434_0914) * (1 + s_1003 / Km1003_0914) + (1 + s_0325 / Km0325_0914) * (1 + s_0394 / Km0394_0914) * (1 + s_1322 / Km1322_0914) - 1))+1.0 * (cell * Vmax_0917 * (s_0259 - s_1039 * s_1322 / Keq_0917) / Km0259_0917 / (1 + s_0259 / Km0259_0917 + (1 + s_1039 / Km1039_0917) * (1 + s_1322 / Km1322_0917) - 1))+1.0 * (cell * Vmax_0958 * (s_0434 * s_0445 * s_1399 - s_0394 * s_1271 * s_1322 / Keq_0958) / (Km0434_0958 * Km0445_0958 * Km1399_0958) / ((1 + s_0434 / Km0434_0958) * (1 + s_0445 / Km0445_0958) * (1 + s_1399 / Km1399_0958) + (1 + s_0394 / Km0394_0958) * (1 + s_1271 / Km1271_0958) * (1 + s_1322 / Km1322_0958) - 1))+1.0 * (cell * Vmax_0967 * (s_0158 * s_0314 - s_0328 * s_1322 / Keq_0967) / (Km0158_0967 * Km0314_0967) / ((1 + s_0158 / Km0158_0967) * (1 + s_0314 / Km0314_0967) + (1 + s_0328 / Km0328_0967) * (1 + s_1322 / Km1322_0967) - 1))+1.0 * (cell * Vmax_1026 * (s_0394 * s_1467 - s_0298 * s_1322 / Keq_1026) / (Km0394_1026 * Km1467_1026) / ((1 + s_0394 / Km0394_1026) * (1 + s_1467 / Km1467_1026) + (1 + s_0298 / Km0298_1026) * (1 + s_1322 / Km1322_1026) - 1))+1.0 * (cell * Vmax_1041 * (s_1238 - s_1045 * s_1322 / Keq_1041) / Km1238_1041 / (1 + s_1238 / Km1238_1041 + (1 + s_1045 / Km1045_1041) * (1 + s_1322 / Km1322_1041) - 1))+1.0 * (cell * Vmax_1051 * (s_0409 - s_1322 * s_1520 / Keq_1051) / Km0409_1051 / (1 + s_0409 / Km0409_1051 + (1 + s_1322 / Km1322_1051) * (1 + s_1520 / Km1520_1051) - 1))+1.0 * (cell * Vmax_1244 * (s_1324 - s_1322) / Km1324_1244 / (1 + s_1324 / Km1324_1244 + 1 + s_1322 / Km1322_1244 - 1))+1.0 * (cell * Vmax_1936 * (s_0629 - s_1151 * s_1322 / Keq_1936) / Km0629_1936 / (1 + s_0629 / Km0629_1936 + (1 + s_1151 / Km1151_1936) * (1 + s_1322 / Km1322_1936) - 1))+1.0 * (cell * Vmax_2030 * (s_0313 - s_0314 * s_1322 / Keq_2030) / Km0313_2030 / (1 + s_0313 / Km0313_2030 + (1 + s_0314 / Km0314_2030) * (1 + s_1322 / Km1322_2030) - 1))+59.3 * (cell * max(V0_2111 * (1 + ep0002_2111 * log(s_0002 / ic0002_2111) + ep0423_2111 * log(s_0423 / ic0423_2111) + ep0434_2111 * log(s_0434 / ic0434_2111) + ep0526_2111 * log(s_0526 / ic0526_2111) + ep0584_2111 * log(s_0584 / ic0584_2111) + ep0589_2111 * log(s_0589 / ic0589_2111) + ep0615_2111 * log(s_0615 / ic0615_2111) + ep0649_2111 * log(s_0649 / ic0649_2111) + ep0773_2111 * log(s_0773 / ic0773_2111) + ep0782_2111 * log(s_0782 / ic0782_2111) + ep0955_2111 * log(s_0955 / ic0955_2111) + ep0965_2111 * log(s_0965 / ic0965_2111) + ep0969_2111 * log(s_0969 / ic0969_2111) + ep0973_2111 * log(s_0973 / ic0973_2111) + ep0981_2111 * log(s_0981 / ic0981_2111) + ep0991_2111 * log(s_0991 / ic0991_2111) + ep0999_2111 * log(s_0999 / ic0999_2111) + ep1003_2111 * log(s_1003 / ic1003_2111) + ep1006_2111 * log(s_1006 / ic1006_2111) + ep1016_2111 * log(s_1016 / ic1016_2111) + ep1021_2111 * log(s_1021 / ic1021_2111) + ep1025_2111 * log(s_1025 / ic1025_2111) + ep1029_2111 * log(s_1029 / ic1029_2111) + ep1032_2111 * log(s_1032 / ic1032_2111) + ep1035_2111 * log(s_1035 / ic1035_2111) + ep1039_2111 * log(s_1039 / ic1039_2111) + ep1045_2111 * log(s_1045 / ic1045_2111) + ep1048_2111 * log(s_1048 / ic1048_2111) + ep1051_2111 * log(s_1051 / ic1051_2111) + ep1056_2111 * log(s_1056 / ic1056_2111) + ep1107_2111 * log(s_1107 / ic1107_2111) + ep1405_2111 * log(s_1405 / ic1405_2111) + ep1467_2111 * log(s_1467 / ic1467_2111) + ep1520_2111 * log(s_1520 / ic1520_2111) + ep1545_2111 * log(s_1545 / ic1545_2111) + ep0089_2111 * log(s_0089 / ic0089_2111) + ep0122_2111 * log(s_0122 / ic0122_2111) + ep0918_2111 * log(s_0918 / ic0918_2111) + ep0657_2111 * log(s_0657 / ic0657_2111) + ep0662_2111 * log(s_0662 / ic0662_2111) + ep0666_2111 * log(s_0666 / ic0666_2111) + ep0672_2111 * log(s_0672 / ic0672_2111) + ep0595_2111 * log(s_0595 / ic0595_2111) + ep0700_2111 * log(s_0700 / ic0700_2111) + ep1059_2111 * log(s_1059 / ic1059_2111) + ep1337_2111 * log(s_1337 / ic1337_2111) + ep1346_2111 * log(s_1346 / ic1346_2111) + ep1351_2111 * log(s_1351 / ic1351_2111) + ep1524_2111 * log(s_1524 / ic1524_2111) + ep1569_2111 * log(s_1569 / ic1569_2111)), 0))]

@named sys = ODESystem(eqs)

### Initial species concentrations ###
initialSpeciesValues = [
s_0176 => 0.1,
s_0557 => 0.0589,
s_0467 => 0.1,
s_0089 => 0.1,
s_0581 => 0.1,
s_1207 => 0.1,
s_0657 => 0.1,
s_0979 => 0.1,
s_0725 => 0.1,
s_0709 => 0.1,
s_0061 => 0.1,
s_1426 => 0.1,
s_0403 => 0.1,
s_0082 => 0.1,
s_1576 => 0.1,
s_0680 => 55.5,
s_1182 => 0.1,
s_0039 => 0.1,
s_0232 => 0.1,
s_0969 => 0.1,
s_0980 => 0.1,
s_1578 => 0.1,
s_1487 => 0.1,
s_0259 => 0.00298,
s_0475 => 0.1,
s_1520 => 0.00385,
s_1010 => 0.1,
s_1161 => 0.1,
s_0656 => 0.1,
s_1212 => 0.1,
s_0373 => 0.1,
s_0551 => 0.1,
s_0118 => 0.1,
s_1537 => 0.1,
s_0056 => 0.1,
s_1275 => 0.1,
s_0764 => 0.079,
s_0662 => 0.1,
s_0362 => 55.8,
s_1255 => 0.1,
s_1447 => 0.1,
s_0302 => 0.1,
s_0297 => 0.1,
s_0262 => 0.1,
s_0951 => 0.1,
s_0322 => 0.1,
s_0349 => 0.1,
s_0427 => 0.1,
s_1364 => 0.1,
s_0973 => 0.1,
s_0499 => 0.1,
s_1543 => 0.467,
s_0364 => 0.0,
s_0299 => 0.1,
s_1454 => 0.1,
s_0978 => 0.1,
s_0754 => 0.1,
s_0615 => 0.1,
s_0654 => 0.1,
s_0567 => 0.135,
s_1233 => 0.1,
s_1271 => 0.1,
s_0028 => 0.1,
s_0002 => 0.1,
s_1056 => 0.1,
s_0577 => 0.1,
s_1012 => 0.1,
s_0645 => 0.1,
s_0529 => 0.1,
s_1524 => 0.1,
s_0313 => 0.1,
s_0613 => 0.1,
s_1324 => 1.0,
s_0304 => 0.1,
s_1176 => 0.1,
s_1399 => 0.527,
s_1565 => 0.049,
s_0563 => 1.57,
s_0327 => 0.1,
s_1029 => 0.1,
s_0037 => 0.1,
s_0009 => 0.1,
s_0386 => 0.1,
s_1038 => 0.1,
s_0629 => 0.29,
s_0260 => 0.117,
s_1366 => 0.1,
s_0390 => 0.1,
s_0231 => 0.1,
s_1045 => 0.177,
s_1048 => 0.1,
s_0836 => 0.1,
s_0918 => 0.1,
s_1408 => 0.1,
s_0015 => 0.1,
s_1073 => 0.1,
s_1234 => 0.1,
s_1351 => 0.1,
s_0018 => 0.1,
s_1065 => 0.1,
s_1429 => 0.1,
s_1413 => 0.1,
s_0782 => 0.1,
s_0325 => 0.1,
s_0298 => 0.1,
s_0526 => 0.1,
s_1151 => 0.1,
s_0165 => 0.1,
s_0291 => 0.1,
s_0953 => 0.1,
s_0419 => 0.1,
s_1107 => 0.1,
s_0300 => 0.1,
s_1238 => 0.1,
s_0550 => 0.1,
s_0008 => 0.1,
s_0340 => 0.1,
s_1153 => 0.1,
s_1343 => 0.1,
s_0991 => 0.298,
s_0739 => 0.1,
s_1101 => 0.1,
s_0033 => 0.1,
s_0565 => 74.0,
s_0025 => 0.1,
s_0178 => 0.1,
s_1025 => 0.1,
s_0493 => 0.1,
s_0943 => 0.1,
s_0016 => 0.1,
s_0204 => 0.1,
s_0010 => 0.1,
s_0999 => 0.1,
s_0423 => 0.44,
s_0959 => 0.1,
s_0076 => 0.1,
s_0584 => 0.1,
s_0644 => 0.1,
s_0066 => 0.1,
s_1014 => 0.1,
s_0481 => 0.1,
s_0218 => 0.1,
s_0063 => 0.1,
s_0295 => 0.1,
s_1006 => 0.1,
s_0019 => 0.1,
s_0766 => 0.0,
s_0940 => 0.1,
s_0582 => 0.1,
s_0595 => 0.1,
s_0306 => 0.1,
s_1059 => 0.1,
s_1559 => 0.649,
s_0625 => 0.1,
s_0126 => 0.1,
s_1346 => 0.1,
s_1616 => 0.1,
s_0454 => 0.1,
s_1051 => 0.1,
s_0835 => 0.1,
s_1191 => 0.1,
s_1386 => 0.1,
s_1545 => 0.1,
s_0710 => 0.1,
s_0201 => 0.1,
s_0145 => 0.1,
s_0190 => 0.1,
s_1302 => 0.1,
s_0539 => 0.1,
s_0681 => 0.0,
s_0664 => 0.1,
s_0394 => 1.29,
s_0767 => 0.0685,
s_1286 => 0.1,
s_0146 => 0.1,
s_0420 => 1.0,
s_1016 => 0.1,
s_1187 => 0.1,
s_0785 => 0.975,
s_1342 => 0.1,
s_0471 => 0.1,
s_1035 => 0.1,
s_1039 => 0.2,
s_0207 => 0.1,
s_0515 => 0.1,
s_0743 => 0.1,
s_0209 => 0.1,
s_1084 => 0.1,
s_1577 => 0.1,
s_1269 => 0.1,
s_0359 => 0.178,
s_0555 => 1.15,
s_0568 => 0.193,
s_1194 => 0.1,
s_0409 => 0.02,
s_1377 => 0.1,
s_1195 => 0.1,
s_1020 => 0.1,
s_0455 => 0.1,
s_0142 => 0.1,
s_1445 => 0.1,
s_1266 => 0.1,
s_1277 => 1.0,
s_0750 => 0.1,
s_0324 => 0.1,
s_0516 => 0.1,
s_1011 => 0.1,
s_1360 => 0.153,
s_1270 => 0.1,
s_0522 => 0.1,
s_0573 => 0.1,
s_0722 => 0.1,
s_1521 => 0.0,
s_0326 => 0.1,
s_1449 => 0.1,
s_0211 => 0.1,
s_0062 => 0.1,
s_1427 => 0.1,
s_0141 => 0.1,
s_0773 => 0.1,
s_0981 => 0.1,
s_0955 => 0.00953,
s_1003 => 0.195,
s_0587 => 0.1,
s_0393 => 0.1,
s_1538 => 0.282,
s_0162 => 0.1,
s_0180 => 0.175,
s_0574 => 0.1,
s_0745 => 0.1,
s_0335 => 0.1,
s_0328 => 0.1,
s_0367 => 0.1,
s_0765 => 0.15,
s_1416 => 0.1,
s_1468 => 1.0,
s_1198 => 1.5,
s_1620 => 0.1,
s_0586 => 0.175,
s_0258 => 0.1,
s_0261 => 0.1,
s_0380 => 0.1,
s_0210 => 0.1,
s_0120 => 0.1,
s_0965 => 0.1,
s_0122 => 0.1,
s_0602 => 0.1,
s_0849 => 0.162,
s_0589 => 0.1,
s_1331 => 0.1,
s_0841 => 0.1,
s_0445 => 0.1,
s_1365 => 0.1,
s_0666 => 0.1,
s_0077 => 0.1,
s_1192 => 0.1,
s_0312 => 0.1,
s_1203 => 0.0867,
s_1337 => 0.1,
s_0837 => 0.1,
s_1579 => 0.1,
s_1469 => 0.1,
s_0458 => 0.0,
s_0075 => 0.000737,
s_0633 => 0.1,
s_0434 => 4.29,
s_0296 => 0.1,
s_0619 => 0.1,
s_0188 => 0.0169,
s_1535 => 0.1,
s_0649 => 0.1,
s_0078 => 0.1,
s_1405 => 0.1,
s_1376 => 0.1,
s_0301 => 0.1,
s_0700 => 0.1,
s_0314 => 0.1,
s_1032 => 0.1,
s_1021 => 0.1,
s_1467 => 0.1,
s_0086 => 0.1,
s_0158 => 0.1,
s_0672 => 0.1,
s_0456 => 0.1,
s_1569 => 0.1,
s_1322 => 0.1]

### True parameter values ###
trueParameterValues = [
Keq_0148 => 1.76319135410045,
Km0456_0432 => 0.1,
Km0456_0387 => 0.1,
Km0529_0386 => 0.1,
Vmax_0300 => 2.80055040594531,
Km0940_0658 => 0.1,
Km1203_0012 => 0.0867,
Vmax_0901 => 0.00775537035492324,
Km0456_0016 => 0.1,
ep1405_2111 => 0.0009,
Km1468_1266 => 1.0,
Vmax_0732 => 0.491365993648085,
Km0259_0917 => 0.00298,
Keq_0361 => 2.0,
Km0722_0038 => 0.1,
Keq_0153 => 0.126622348844571,
Km0302_0079 => 0.1,
Km0210_0040 => 0.1,
Vmax_0877 => 0.00688019835306556,
Km1207_0238 => 0.1,
Keq_0976 => 2.0,
Km0991_0203 => 0.298,
Km1212_0889 => 0.1,
Vmax_0800 => 2.56220740937548,
Vmax_0014 => 0.00173110945422394,
Keq_0079 => 0.179216783216783,
Km0141_0015 => 0.1,
Vmax_0242 => 0.027661975004893,
Keq_0902 => 2.0,
Keq_0041 => 2.0,
Km0515_0203 => 0.1,
Km0201_0154 => 0.1,
Keq_0004 => 10.54,
Km0529_0435 => 0.1,
ep0434_2111 => 59.3,
Km1351_0877 => 0.1,
Km0327_0914 => 0.1,
Km1616_1038 => 0.1,
Km0367_0559 => 0.1,
Km0180_0216 => 0.175,
Vmax_0563 => 0.317370066607722,
ep1048_2111 => 0.028,
Vmax_0757 => 0.00397890699428027,
Km0999_0203 => 0.1,
Km1203_0491 => 0.0867,
Km1198_0545 => 1.5,
Km0633_1012 => 0.1,
Keq_0257 => 2.0,
Km1207_0547 => 0.1,
Keq_0724 => 2.0,
Km1203_0165 => 0.0867,
Km1275_0259 => 0.1,
Km0991_0699 => 0.298,
Km1207_0344 => 0.1,
Km1322_1026 => 0.1,
Keq_0732 => 2.0,
Km0455_0250 => 0.1,
Km0231_0041 => 0.1,
Keq_0997 => 0.601398601398601,
Keq_0491 => 8.17324901563059,
Km0959_0989 => 0.1,
Keq_0007 => 2.0,
Km0991_0012 => 0.298,
Km1207_0219 => 0.1,
Km0722_0445 => 0.1,
Km0322_0727 => 0.1,
Km0076_0913 => 0.1,
Km0577_0038 => 0.1,
Km0394_0908 => 1.29,
Km1447_1012 => 0.1,
Vmax_0307 => 0.295529235661274,
Keq_0855 => 0.0601398601398601,
ep0973_2111 => 0.172,
Keq_0060 => 2.0,
Km0456_1664 => 0.1,
Km1413_0144 => 0.1,
Vmax_0851 => 0.306983409881117,
Km0419_0471 => 0.1,
Vmax_0366 => 17.5300909501109,
Keq_0434 => 0.2,
Km1198_0770 => 1.5,
Vmax_0495 => 0.0168598520111548,
Km1270_0821 => 0.1,
Km0456_0911 => 0.1,
Km0180_0918 => 0.175,
Km0373_0549 => 0.1,
Keq_1704 => 6.65116279069767,
Keq_0698 => 2.0,
Vmax_0267 => 0.00227924602834291,
ep0969_2111 => 0.172,
Keq_0311 => 1116.0,
Km0481_0267 => 0.1,
Km0529_0398 => 0.1,
Km1212_0242 => 0.1,
Km1469_0883 => 0.1,
Km0359_0173 => 0.178,
Km0725_0152 => 0.1,
Km0969_0211 => 0.1,
Km0349_0040 => 0.1,
Vmax_0731 => 0.49136599365637,
Km1416_0901 => 0.1,
ep1021_2111 => 0.25,
Km0991_0538 => 0.298,
Vmax_0486 => 68.0634738370639,
Km1207_0759 => 0.1,
Km1203_0486 => 0.0867,
Km0456_0235 => 0.1,
ep0672_2111 => 0.000812,
Keq_0688 => 2.0,
Vmax_0208 => 0.784769619248969,
Km0061_0339 => 0.1,
Vmax_0984 => 3.48816888553771,
Km0782_0528 => 0.1,
Keq_0352 => 2.0,
Km0434_0208 => 4.29,
Km0373_0559 => 0.1,
Keq_0916 => 0.205128205128205,
Km0568_0466 => 0.193,
Km0394_0914 => 1.29,
Km1322_0759 => 0.1,
Km0568_0534 => 0.193,
Km1207_0096 => 0.1,
Keq_0450 => 0.0398434782608696,
Vmax_1010 => 0.0144932330391067,
Km0434_0407 => 4.29,
Keq_0215 => 0.601398601398601,
Km1003_0502 => 0.195,
Km0066_0713 => 0.1,
Vmax_0362 => 1.57915651324206,
Keq_0759 => 0.2,
Km1620_0974 => 0.1,
Km0633_0514 => 0.1,
Keq_1049 => 1.58,
Km0386_0142 => 0.1,
Vmax_0988 => 1.01135261225661,
Km0529_0389 => 0.1,
Vmax_0762 => 0.25293465060724,
Vmax_1038 => 0.448222706797439,
Km1073_0433 => 0.1,
Km0573_0902 => 0.1,
Km0973_0153 => 0.1,
Vmax_0203 => 0.118484824866883,
Km0394_0892 => 1.29,
Km0710_0004 => 0.1,
Km1286_0391 => 0.1,
ep0782_2111 => 0.051,
Km1399_0001 => 0.527,
Km1469_1027 => 0.1,
Km1351_0858 => 0.1,
Km0394_0079 => 1.29,
Km1012_0309 => 0.1,
Km1212_0317 => 0.1,
Km1386_0916 => 0.1,
Km0420_1115 => 1.0,
Km0973_0214 => 0.1,
ep0584_2111 => 0.00359,
Keq_0892 => 1055.88337382853,
ic0981_2111 => 0.1,
Km1212_0481 => 0.1,
Vmax_1055 => 0.429507944856334,
Km0529_0543 => 0.1,
Km1207_0231 => 0.1,
Km1010_0537 => 0.1,
Km0394_0887 => 1.29,
Keq_0207 => 0.2,
Km0619_0337 => 0.1,
Km1275_0238 => 0.1,
Keq_0910 => 0.2,
Km1620_0550 => 0.1,
Keq_0502 => 1.95,
Km0335_0091 => 0.1,
ic0991_2111 => 0.298,
Km0314_0967 => 0.1,
Vmax_0012 => 0.347375963815168,
Km1187_0202 => 0.1,
Vmax_0142 => 0.0414346818236141,
Km0455_0214 => 0.1,
Km0581_0984 => 0.1,
ic0969_2111 => 0.1,
Keq_0893 => 0.288888888888889,
Km0180_0674 => 0.175,
Km0434_0886 => 4.29,
Vmax_0658 => 2.20043246181825,
Km0434_1704 => 4.29,
Keq_0901 => 2.0,
Km1212_0732 => 0.1,
Vmax_0986 => 0.0181685707585649,
ic1051_2111 => 0.1,
Km0577_0982 => 0.1,
Km0529_0387 => 0.1,
Vmax_0386 => 0.00486929837500336,
Km0118_0957 => 0.1,
Vmax_1026 => 0.250164550684725,
Vmax_0996 => 0.64224160751708,
Km0394_0528 => 1.29,
Keq_0889 => 0.2,
Keq_0014 => 0.2,
Vmax_0018 => 0.643588025978902,
Km0991_0216 => 0.298,
Km1454_0435 => 0.1,
Km0951_0938 => 0.1,
Km0522_0300 => 0.1,
Km0209_0235 => 0.1,
Km1207_0558 => 0.1,
Km1212_0432 => 0.1,
Km1616_0550 => 0.1,
Km0394_0148 => 1.29,
Km0359_0165 => 0.178,
Km0767_0491 => 0.0685,
Keq_0432 => 0.2,
Vmax_1011 => 0.0144932330443849,
Km0434_0211 => 4.29,
ep0657_2111 => 9.6e-5,
Keq_1729 => 6.65116279069767,
Vmax_0911 => 0.628508139179901,
ep0955_2111 => 0.357,
Vmax_0438 => 133.133343979178,
Km0633_0355 => 0.1,
Keq_0312 => 1116.0,
Keq_0891 => 0.0988034188034188,
Km0176_0545 => 0.1,
Km0629_0491 => 0.29,
Keq_0108 => 0.601398601398602,
ic1045_2111 => 0.177,
Km0299_0908 => 0.1,
Km1399_0097 => 0.527,
Km0568_0758 => 0.193,
ep1051_2111 => 0.0965,
Km0078_0909 => 0.1,
Km0633_0407 => 0.1,
Km0158_0967 => 0.1,
Km1207_0688 => 0.1,
Km0427_0203 => 0.1,
Km1207_0387 => 0.1,
Km1360_0962 => 0.153,
ep1029_2111 => 0.05,
Km0849_0570 => 0.162,
Km0180_0988 => 0.175,
Km0595_1052 => 0.1,
Km1565_0565 => 0.049,
Km1376_0355 => 0.1,
Km0999_0250 => 0.1,
Km0326_0910 => 0.1,
Km1346_0900 => 0.1,
Keq_0888 => 1.39896373056995,
Km0178_0016 => 0.1,
Vmax_0910 => 0.144259121185328,
Km1447_1010 => 0.1,
Km0991_0211 => 0.298,
Km1487_0502 => 0.1,
Km0456_0959 => 0.1,
Km0394_0226 => 1.29,
Km0991_0563 => 0.298,
Km1275_0694 => 0.1,
Km0434_0958 => 4.29,
Km1399_0962 => 0.527,
Km1364_0908 => 0.1,
Km0456_0097 => 0.1,
Vmax_0970 => 0.00448357348657146,
Vmax_0216 => 3.39440173383776,
Keq_0040 => 0.2,
Km1203_0545 => 0.0867,
Km0126_0758 => 0.1,
Keq_0974 => 0.155038759689922,
ep0773_2111 => 0.519,
Vmax_0096 => 1.36526832289795,
Vmax_0231 => 0.0183597621805093,
Km1487_0912 => 0.1,
Km1198_0445 => 1.5,
Km1538_0005 => 0.282,
Vmax_0491 => 0.452259852011614,
Vmax_0806 => 0.00787919276762292,
Km1376_0667 => 0.1,
Km1203_0658 => 0.0867,
Km1266_0818 => 0.1,
Km1212_0240 => 0.1,
Vmax_0564 => 0.0865554727111968,
Keq_0758 => 1.03626943005181,
Vmax_0887 => 4.39065117021629,
Km0662_0233 => 0.1,
Keq_0466 => 1.03626943005181,
Km0978_0547 => 0.1,
Km1271_0300 => 0.1,
Km0089_0874 => 0.1,
Vmax_0007 => 0.0865554727111968,
Km1039_1055 => 0.2,
Km0010_0029 => 0.1,
Km0529_0111 => 0.1,
Keq_0310 => 0.02,
Km0456_0658 => 0.1,
Km0232_1087 => 0.1,
Km1275_0339 => 0.1,
Km0529_0399 => 0.1,
Km0180_0658 => 0.175,
Km0999_0079 => 0.1,
Km0434_0904 => 4.29,
Km1331_0337 => 0.1,
ic1006_2111 => 0.1,
Km0394_0886 => 1.29,
Km0033_0697 => 0.1,
Km0145_0118 => 0.1,
Km0061_0349 => 0.1,
Km1322_0967 => 0.1,
ep1056_2111 => 0.257,
Km1212_0996 => 0.1,
Km0434_0446 => 4.29,
Keq_0792 => 0.2,
Vmax_0439 => 0.948504939784632,
Km1203_0061 => 0.0867,
Keq_0481 => 0.2,
Vmax_0024 => 0.673209232198198,
Keq_0967 => 2.0,
Km0009_0060 => 0.1,
Km0764_1054 => 0.079,
Km0078_0910 => 0.1,
Keq_0061 => 0.1156,
Km1386_0915 => 0.1,
Km0633_0211 => 0.1,
Vmax_1051 => 0.122808845809894,
Km0577_0889 => 0.1,
Vmax_0699 => 0.673209232195505,
Keq_0570 => 3.24,
Km1487_0499 => 0.1,
Vmax_0538 => 0.201962769658651,
Km0445_1664 => 0.1,
Keq_0486 => 0.0107844556962025,
Km1101_0393 => 0.1,
Km1207_0435 => 0.1,
Keq_0818 => 0.671140939597315,
Vmax_0874 => 0.00557046979199238,
Km0312_0007 => 0.1,
Km0471_0880 => 0.1,
Km0304_0724 => 0.1,
Km0951_0851 => 0.1,
Keq_1063 => 1.1744966442953,
Keq_0984 => 2.0,
Km1012_0144 => 0.1,
Km0767_0489 => 0.0685,
Keq_0911 => 0.601398601398601,
Vmax_0023 => 0.288518242370656,
Km0393_0152 => 0.1,
Km1275_1979 => 0.1,
Km0340_0889 => 0.1,
Km1207_1012 => 0.1,
Vmax_0939 => 0.408349485701936,
Km0625_1045 => 0.1,
ic1059_2111 => 0.1,
Vmax_0909 => 0.0865554727111968,
Vmax_0713 => 1.00849435820325,
Km0456_0393 => 0.1,
Km0773_0510 => 0.1,
Km0633_0257 => 0.1,
Vmax_0041 => 0.00145042929074613,
Km1014_0548 => 0.1,
ic1021_2111 => 0.1,
Vmax_0243 => 0.00765496600640478,
Km1212_0435 => 0.1,
Keq_0970 => 0.0815850815850816,
Km1543_0195 => 0.467,
Km1449_0407 => 0.1,
Km1101_0433 => 0.1,
Km0991_0470 => 0.298,
Km1569_0237 => 0.1,
Km1255_0397 => 0.1,
Km1025_0988 => 0.1,
Km1032_0851 => 0.1,
Vmax_0886 => 35.0101324198437,
Km1559_0811 => 0.649,
Keq_0694 => 20.0,
Km0373_0992 => 0.1,
Km0335_0466 => 0.1,
Km1161_0389 => 0.1,
Km0619_0336 => 0.1,
Km0555_0450 => 1.15,
Vmax_0091 => 5.91025985202532,
Km1012_0813 => 0.1,
Km0089_0594 => 0.1,
Km1207_0233 => 0.1,
Km0427_0670 => 0.1,
Km0394_0811 => 1.29,
Km1101_0435 => 0.1,
ic0965_2111 => 0.1,
ic1524_2111 => 0.1,
Km0423_0208 => 0.44,
Km0056_0353 => 0.1,
Km0991_0250 => 0.298,
Keq_0471 => 34.0571428571428,
ep1035_2111 => 0.129,
Keq_0739 => 0.00601398601398602,
Km1212_0922 => 0.1,
Km0481_0259 => 0.1,
Km1198_0235 => 1.5,
Km1207_0432 => 0.1,
Km0743_0722 => 0.1,
Vmax_0353 => 0.19850055075103,
ic0434_2111 => 4.29,
Km0434_0115 => 4.29,
Keq_0909 => 2.0,
Keq_0317 => 200.0,
Km0999_0211 => 0.1,
Km1238_0548 => 0.1,
Vmax_0922 => 0.00113962301414956,
Km0394_0958 => 1.29,
Keq_0024 => 2.0,
Km1084_0393 => 0.1,
ic1545_2111 => 0.1,
Vmax_0029 => 0.480863737284427,
Keq_0536 => 0.00668168,
Vmax_0467 => 14.3453751324234,
Km0454_0542 => 0.1,
Vmax_0250 => 4.68320502869806,
ic0999_2111 => 0.1,
Km1365_0570 => 0.1,
Km0423_0399 => 0.44,
Km1101_0432 => 0.1,
Vmax_0309 => 0.0412581086575084,
ic0649_2111 => 0.1,
Keq_0307 => 0.0926654239443145,
Vmax_0688 => 13.9503755002146,
Km1212_0398 => 0.1,
Km0190_1012 => 0.1,
Km0991_0915 => 0.298,
Km1386_0225 => 0.1,
Km0539_0257 => 0.1,
Keq_0096 => 2.0,
Vmax_0391 => 0.00486929832974676,
Km1454_0407 => 0.1,
Keq_0027 => 2.0,
Km1426_0887 => 0.1,
Vmax_0239 => 0.0286140852053522,
Km0386_0144 => 0.1,
Km0662_0244 => 0.1,
Km0582_0974 => 0.1,
Vmax_0548 => 0.530488874972376,
Keq_0918 => 0.035,
Km0326_0225 => 0.1,
Keq_0731 => 0.1156,
Km0551_0990 => 0.1,
Km0633_0910 => 0.1,
Km1543_1084 => 0.467,
ep1016_2111 => 0.172,
Km1207_0259 => 0.1,
Km1322_0040 => 0.1,
Km0672_1014 => 0.1,
Vmax_0697 => 18.0455211578358,
Km1322_0911 => 0.1,
Km0393_0153 => 0.1,
Km0434_0997 => 4.29,
Km1207_0239 => 0.1,
Km0180_0699 => 0.175,
Vmax_1041 => 0.37892062498052,
Km0529_0008 => 0.1,
Keq_0912 => 2.0,
Keq_0669 => 2.0,
Vmax_0678 => 0.643588025981477,
Vmax_1729 => 0.00966728457436275,
Km1212_0241 => 0.1,
Keq_0877 => 0.2,
Km1207_0241 => 0.1,
Km1322_0757 => 0.1,
Km1331_0008 => 0.1,
Km1212_0434 => 0.1,
ep1337_2111 => 0.000373,
Vmax_0339 => 0.331272798979851,
Km0615_0330 => 0.1,
Keq_0697 => 20.0,
Km1207_0237 => 0.1,
Km1212_0269 => 0.1,
ic1025_2111 => 0.1,
Km1207_0397 => 0.1,
Km0207_0564 => 0.1,
Km0434_0250 => 4.29,
Km0146_0097 => 0.1,
Km0434_0726 => 4.29,
Km0991_1087 => 0.298,
Km0953_0678 => 0.1,
Km0587_0976 => 0.1,
Km0016_0096 => 0.1,
Km0434_0215 => 4.29,
ep1003_2111 => 0.325,
Keq_1010 => 346.020761245675,
Km1212_0015 => 0.1,
Km1520_2079 => 0.00385,
Vmax_0398 => 133.509944653837,
Km0304_0732 => 0.1,
Km0394_0115 => 1.29,
Km0015_0207 => 0.1,
Km1322_1051 => 0.1,
Km0456_1697 => 0.1,
ep0965_2111 => 0.136,
Vmax_0154 => 0.250164550684684,
Km0394_0108 => 1.29,
Km0529_0549 => 0.1,
Km0943_0462 => 0.1,
Km0991_1063 => 0.298,
Keq_0514 => 0.124751439037153,
Km0529_0993 => 0.1,
Vmax_0280 => 1.20023588826227,
Keq_0259 => 20.0,
Km1322_0307 => 0.1,
Km0471_0874 => 0.1,
Keq_0900 => 2.0,
Keq_0887 => 0.601398601398601,
Vmax_0040 => 0.458744005369343,
Km0434_0476 => 4.29,
Vmax_0008 => 0.0168598520111717,
Km0589_1704 => 0.1,
Km0434_0811 => 4.29,
ep1569_2111 => 1.5e-5,
ep1107_2111 => 0.821,
Keq_0231 => 2.0,
Km1322_1936 => 0.1,
Km0764_1055 => 0.079,
Km0582_1729 => 0.1,
Keq_0913 => 2.0,
Km1101_0389 => 0.1,
Vmax_0080 => 0.176076528262974,
Keq_0214 => 2.0,
Km0493_0267 => 0.1,
Vmax_0553 => 18.0455211578358,
Km1559_0307 => 0.649,
ep1039_2111 => 0.254,
Km0445_0958 => 0.1,
Keq_0018 => 1.1744966442953,
Km0423_0142 => 0.44,
Km0259_0918 => 0.00298,
Km1207_1027 => 0.1,
Km1449_0391 => 0.1,
Keq_0202 => 2.0,
Vmax_0900 => 0.00775537035492324,
Keq_0005 => 0.120770877944325,
Keq_0144 => 0.2,
Km0750_0553 => 0.1,
Vmax_0153 => 0.747781580573936,
Vmax_0811 => 4.79020157374622,
Km0434_0970 => 4.29,
Vmax_0565 => 0.146301830341168,
Vmax_1054 => 0.113820592772863,
Keq_1936 => 0.0689655172413793,
Vmax_2030 => 0.00173110945422394,
Km0991_0818 => 0.298,
Km1322_0792 => 0.1,
Km1408_1049 => 0.1,
ep0662_2111 => 0.000125,
ep0700_2111 => 0.000114,
Km1322_0917 => 0.1,
ep1346_2111 => 0.00288,
Vmax_0257 => 0.0162071756607715,
Keq_0012 => 11.61143494113,
Km0403_0563 => 0.1,
Keq_0020 => 1.30718954248366,
Keq_0235 => 0.01156,
Km1107_0362 => 0.1,
Km0959_0678 => 0.1,
Vmax_0566 => 0.306791389183096,
Keq_1087 => 1.1744966442953,
Keq_0203 => 3.14092,
Keq_0240 => 20.0,
Km1212_0389 => 0.1,
Keq_0806 => 0.2,
Km0434_0855 => 4.29,
Km0018_0739 => 0.1,
Keq_0103 => 2.0,
Km0180_0543 => 0.175,
Km0207_0538 => 0.1,
Km0423_0407 => 0.44,
Km0739_0529 => 0.1,
Keq_0269 => 20.0,
Km0394_0800 => 1.29,
Vmax_1027 => 1.10787158160434,
Km0999_0915 => 0.1,
Km1322_0726 => 0.1,
Km1234_0312 => 0.1,
Km1212_0433 => 0.1,
Keq_0820 => 2.0,
Km1212_1038 => 0.1,
Km1207_0398 => 0.1,
Km1207_0267 => 0.1,
Vmax_0241 => 0.371983107669579,
Keq_0510 => 0.120770877944325,
Km0037_1011 => 0.1,
Km0394_0250 => 1.29,
ic0595_2111 => 0.1,
Keq_1041 => 0.354,
Km0785_0153 => 0.975,
Vmax_0483 => 0.212961085058479,
Km1212_1012 => 0.1,
Keq_0670 => 0.01906,
Km1182_0118 => 0.1,
Km1271_0958 => 0.1,
Km0018_0904 => 0.1,
Km0529_0024 => 0.1,
Vmax_0061 => 0.673209232198198,
Km1322_1244 => 0.1,
Vmax_0152 => 0.249260526858823,
Km0739_0153 => 0.1,
ep0122_2111 => 5.6e-5,
Km0394_0154 => 1.29,
Keq_0663 => 1.1744966442953,
ic0584_2111 => 0.1,
Km0529_0432 => 0.1,
Km0409_0195 => 0.02,
Km1207_0391 => 0.1,
Km1302_0435 => 0.1,
Km0362_1106 => 55.8,
Keq_0495 => 2.91970802919708,
Km0306_0732 => 0.1,
ep0615_2111 => 0.00243,
ic0782_2111 => 0.1,
Km1427_1049 => 0.1,
Km0709_0001 => 0.1,
Keq_0115 => 0.601398601398601,
ep1524_2111 => 0.000781,
Km1198_0012 => 1.5,
Km1151_0688 => 0.1,
Km0586_0970 => 0.175,
Km0595_0386 => 0.1,
Km0529_0336 => 0.1,
Km0589_0326 => 0.1,
Km0529_0961 => 0.1,
Km1416_0726 => 0.1,
Vmax_0065 => 0.642241607518879,
Vmax_0968 => 0.00242355323591352,
Keq_0438 => 20.0,
Km0419_0476 => 0.1,
Vmax_0974 => 0.00518371108779107,
Km0434_0908 => 4.29,
ic1048_2111 => 0.1,
Vmax_0915 => 0.460905968732233,
Km0456_0938 => 0.1,
Keq_0800 => 5.86363636363636,
Km0419_0470 => 0.1,
Km1039_0502 => 0.2,
Keq_0811 => 1.38406983087834,
Vmax_0165 => 63.8399999997977,
Vmax_0269 => 0.00227924602712677,
Keq_0151 => 0.2,
Vmax_0594 => 0.00145042929027275,
Km1212_0466 => 0.1,
Km0008_0669 => 0.1,
Km0991_0476 => 0.298,
Keq_0534 => 0.0739298917642867,
Km0529_0558 => 0.1,
Km0373_0398 => 0.1,
Vmax_0302 => 1.20023588826227,
ic1346_2111 => 0.1,
Km1537_0439 => 0.1,
Km0454_0027 => 0.1,
Km0739_0978 => 0.1,
Vmax_0990 => 3.13617940729943,
Km0764_0486 => 0.079,
Km0211_0039 => 0.1,
Km1195_0694 => 0.1,
Km0258_0891 => 0.1,
Km1212_0080 => 0.1,
Km0380_0336 => 0.1,
Vmax_0499 => 0.293303798284148,
Vmax_0919 => 0.000518010460977072,
ep0589_2111 => 0.00243,
Km0025_0001 => 0.1,
Km0434_0399 => 4.29,
Km1207_0989 => 0.1,
Km0999_0514 => 0.1,
Km0973_0211 => 0.1,
Km0991_0514 => 0.298,
Km0710_0438 => 0.1,
Vmax_0674 => 0.607234272729043,
Km1151_1936 => 0.1,
Km1429_0996 => 0.1,
Km0557_1050 => 0.0589,
Km0037_1010 => 0.1,
Km0062_0696 => 0.1,
Km0981_0312 => 0.1,
Km1207_0471 => 0.1,
Keq_0915 => 0.596,
Vmax_0118 => 0.36622582231449,
Keq_0553 => 0.2,
Keq_0989 => 6.71140939597316,
Km1203_0961 => 0.0867,
Km1579_0237 => 0.1,
Km1331_0257 => 0.1,
Km0260_0892 => 0.117,
Km0980_0309 => 0.1,
Km1212_1027 => 0.1,
Km1065_0386 => 0.1,
Km0362_0813 => 55.8,
Km0745_0355 => 0.1,
Vmax_0736 => 0.110675597773129,
Km0394_0904 => 1.29,
Km1059_0698 => 0.1,
Km0837_0483 => 0.1,
ep0981_2111 => 0.0429,
Km0529_0434 => 0.1,
Keq_0216 => 1.1744966442953,
Km0300_0855 => 0.1,
Keq_0722 => 0.205128205128205,
Km0722_0446 => 0.1,
Km1207_0939 => 0.1,
Km0471_0257 => 0.1,
Km1207_0236 => 0.1,
Km1413_0901 => 0.1,
Km0367_0103 => 0.1,
Km0645_0361 => 0.1,
Keq_0241 => 2000.0,
Km0619_1052 => 0.1,
Keq_0364 => 0.2,
ic0918_2111 => 0.1,
ic0526_2111 => 0.1,
Km0529_0495 => 0.1,
Km1187_0913 => 0.1,
Km1447_1011 => 0.1,
Km0008_0353 => 0.1,
Vmax_0236 => 0.0182089633124969,
Km0082_0008 => 0.1,
Km1012_0727 => 0.1,
Km0529_0103 => 0.1,
Km0633_0525 => 0.1,
Km0349_0020 => 0.1,
Km0394_0997 => 1.29,
ic1520_2111 => 0.00385,
Km1207_0393 => 0.1,
Vmax_0195 => 0.171932384134158,
Km0298_1026 => 0.1,
Km1212_0391 => 0.1,
Km0434_0800 => 4.29,
Keq_0208 => 0.205128205128205,
ic1569_2111 => 0.1,
Keq_0219 => 0.2,
Keq_0445 => 0.1156,
Km1207_0481 => 0.1,
Km0141_0525 => 0.1,
Km0526_0792 => 0.1,
Km0633_0462 => 0.1,
Km0419_0014 => 0.1,
Km0557_0467 => 0.0589,
Km1620_1038 => 0.1,
Km1322_0214 => 0.1,
Km1579_0234 => 0.1,
Km0515_0278 => 0.1,
Km1020_0762 => 0.1,
Keq_0674 => 0.0212390000382054,
ep0423_2111 => 0.051,
Vmax_0235 => 0.0286140852053522,
Km1487_0727 => 0.1,
Km1203_0696 => 0.0867,
Km0555_0886 => 1.15,
Km1620_0978 => 0.1,
Keq_0242 => 20.0,
Km1577_0239 => 0.1,
Vmax_0543 => 0.643588025979868,
Keq_0239 => 20.0,
Vmax_0568 => 6.69113276785405,
Keq_0065 => 1.30718954248366,
Km0075_0892 => 0.000737,
Km0028_0736 => 0.1,
Km1322_0489 => 0.1,
Vmax_0821 => 0.236623427842921,
Keq_0362 => 0.2,
Km1233_0813 => 0.1,
Vmax_0234 => 0.0286140852053522,
Km0434_1072 => 4.29,
Km1270_0820 => 0.1,
Km1212_0957 => 0.1,
Km1535_0770 => 0.1,
Km0633_0225 => 0.1,
Vmax_1166 => 11.4019052878641,
Km0481_0919 => 0.1,
Vmax_0570 => 0.21225710054726,
Vmax_0667 => 0.015810799681912,
Km1003_0914 => 0.195,
Km0725_0207 => 0.1,
Km1194_0349 => 0.1,
Km1449_0393 => 0.1,
Km0529_0391 => 0.1,
Km0980_0310 => 0.1,
Km0056_0663 => 0.1,
ic1107_2111 => 0.1,
Km1616_0978 => 0.1,
Km1322_0226 => 0.1,
Vmax_0207 => 0.261589873082728,
Km0526_0880 => 0.1,
Km0300_0911 => 0.1,
Km0629_1054 => 0.29,
Km0434_0887 => 4.29,
Keq_0962 => 22.9095607235142,
Vmax_1084 => 4.6393488489814,
Vmax_0027 => 0.275823439706347,
Km0981_0310 => 0.1,
Vmax_0451 => 0.432211867800959,
Keq_0439 => 2.0,
Km0710_0439 => 0.1,
Km1416_0858 => 0.1,
Vmax_1762 => 9.12,
Km1212_0244 => 0.1,
Vmax_0962 => 39.6190623351597,
ep1520_2111 => 0.0234,
Km1212_0041 => 0.1,
Km0312_0563 => 0.1,
Km0551_1050 => 0.1,
Km0394_0446 => 1.29,
Km1029_0726 => 0.1,
ic1029_2111 => 0.1,
Km1342_0901 => 0.1,
Keq_0990 => 0.58,
Km1342_0900 => 0.1,
Km0302_0855 => 0.1,
Keq_1052 => 20.0,
Keq_0237 => 2.0,
Km1538_1072 => 0.282,
V0_2111 => 0.192345494913542,
Keq_0874 => 2.0,
Km0231_0993 => 0.1,
Km1207_0433 => 0.1,
Km1275_0240 => 0.1,
Vmax_1049 => 4.3906511702192,
Keq_0563 => 0.596,
Km0082_0495 => 0.1,
Km1192_0818 => 0.1,
Km1207_0434 => 0.1,
Km0037_0698 => 0.1,
ep1545_2111 => 0.067,
Km1545_0821 => 0.1,
Km0836_0545 => 0.1,
Keq_0015 => 2.0,
Km0680_1762 => 55.5,
Km1176_0434 => 0.1,
Km0633_0722 => 0.1,
Km0145_0759 => 0.1,
Vmax_0202 => 0.429507944856334,
Km0475_0259 => 0.1,
Km0750_0697 => 0.1,
Km0295_0219 => 0.1,
Vmax_0233 => 0.027661975004893,
Vmax_0336 => 0.033719704022149,
Keq_1072 => 1.69594405594406,
Km1322_0568 => 0.1,
Km0086_1055 => 0.1,
Km0991_0018 => 0.298,
Km0973_0908 => 0.1,
Km1399_0674 => 0.527,
Km1445_0041 => 0.1,
Km0434_0108 => 4.29,
Km1343_0858 => 0.1,
Vmax_0545 => 1.01135261225661,
Keq_1012 => 0.2,
Km0750_0481 => 0.1,
Km0539_0806 => 0.1,
ep0649_2111 => 0.00359,
Km1212_0759 => 0.1,
Km1324_1244 => 1.0,
Km0764_1050 => 0.079,
Km1322_0153 => 0.1,
Km0493_0269 => 0.1,
Vmax_0528 => 0.00448357348622436,
Km1212_0096 => 0.1,
Km1275_1010 => 0.1,
Keq_1011 => 20.0,
ep0666_2111 => 0.0056,
Km1275_0233 => 0.1,
Keq_0483 => 200.0,
Vmax_0883 => 0.393115722504765,
Vmax_0466 => 13.7906063214165,
Km1011_0538 => 0.1,
Km1212_0688 => 0.1,
Vmax_1087 => 0.692059090696979,
Km1322_0020 => 0.1,
Km0394_0476 => 1.29,
Keq_0880 => 1.0,
Km0456_0389 => 0.1,
Km0765_1172 => 0.15,
Km0434_0916 => 4.29,
Km1212_0234 => 0.1,
ep1351_2111 => 0.000697,
Km0602_0397 => 0.1,
Km1212_0939 => 0.1,
Km0499_0269 => 0.1,
Km1286_0389 => 0.1,
Vmax_0510 => 0.998273118605222,
Km0180_1087 => 0.175,
Km0991_0989 => 0.298,
Km0261_0065 => 0.1,
Km1207_0173 => 0.1,
Km1538_0811 => 0.282,
Km1207_1038 => 0.1,
Km1322_0032 => 0.1,
Km1212_0267 => 0.1,
Km0581_1049 => 0.1,
Keq_0142 => 2.64615384615385,
Keq_0467 => 0.610362694300518,
Keq_0470 => 589.223924864063,
Km0456_0445 => 0.1,
Km0373_0300 => 0.1,
Vmax_0005 => 2.1927386420229,
Km0380_0495 => 0.1,
Keq_0713 => 0.1156,
Km1198_0696 => 1.5,
Km1039_0880 => 0.2,
Km1212_0669 => 0.1,
Keq_0957 => 2.0,
Km1207_0234 => 0.1,
Km1322_0486 => 0.1,
Km0362_0311 => 55.8,
Km0340_0091 => 0.1,
Keq_0565 => 0.0349654320987654,
Km0373_0024 => 0.1,
Km0419_0310 => 0.1,
Km0725_0151 => 0.1,
Km1365_0912 => 0.1,
ic0615_2111 => 0.1,
Vmax_0559 => 0.110675597773384,
Km0039_0669 => 0.1,
Km0584_1729 => 0.1,
Vmax_0310 => 0.595501652252241,
Km0656_0973 => 0.1,
Km0981_0311 => 0.1,
Vmax_0888 => 1.98829236385754,
Km0120_0912 => 0.1,
Km0190_0462 => 0.1,
Keq_0173 => 626.966292134832,
Vmax_0471 => 10.0719265766268,
Km1275_0242 => 0.1,
Km0211_0996 => 0.1,
Km0180_0663 => 0.175,
Km1010_0536 => 0.1,
Km0475_0340 => 0.1,
Vmax_0462 => 0.0368918659244612,
Km0629_0450 => 0.29,
Vmax_1072 => 0.150852724751332,
Vmax_0173 => 0.25619510091215,
Km0991_0118 => 0.298,
Km1578_0240 => 0.1,
Vmax_0976 => 0.00327179686871681,
Vmax_0481 => 0.260285770627029,
Km0455_0816 => 0.1,
Vmax_0880 => 0.0106367058687315,
Km0499_0594 => 0.1,
Km1386_0202 => 0.1,
Km1212_0386 => 0.1,
Vmax_0225 => 0.201962769659661,
Km1207_0240 => 0.1,
Vmax_0244 => 0.0172664703874194,
Km0394_0974 => 1.29,
Vmax_0015 => 0.00242355323591352,
ic0700_2111 => 0.1,
Vmax_0978 => 0.00654359373696648,
Vmax_0534 => 52.0799999999907,
Km1198_0165 => 1.5,
Vmax_0904 => 0.11067559777331,
Km0645_0362 => 0.1,
Km1413_0986 => 0.1,
Keq_0278 => 2.0,
Vmax_0770 => 0.442635638565746,
Vmax_1664 => 2.70177166554938,
Km0557_0723 => 0.0589,
Km1207_0242 => 0.1,
Keq_0337 => 0.2,
Km0180_1063 => 0.175,
Km0835_0027 => 0.1,
Km1207_0466 => 0.1,
Km1322_0476 => 0.1,
Vmax_1704 => 0.00327179686871567,
Vmax_0558 => 0.363648392683975,
Km0015_0208 => 0.1,
Vmax_0908 => 0.628508139179901,
Keq_0858 => 2.0,
Km0657_0243 => 0.1,
Km0918_0594 => 0.1,
Km1233_0549 => 0.1,
Km0218_0558 => 0.1,
Km1207_0732 => 0.1,
Km0456_0391 => 0.1,
Km0456_0029 => 0.1,
Vmax_0917 => 1.7211244030889,
Km1207_0996 => 0.1,
Vmax_0278 => 0.242932360076092,
Vmax_0214 => 0.331272798980089,
Km1275_0269 => 0.1,
Km1151_0697 => 0.1,
Km1413_0900 => 0.1,
Km0456_0939 => 0.1,
Keq_0336 => 2.0,
Keq_0451 => 2.0,
Vmax_0997 => 0.642241607516654,
Km1467_1026 => 0.1,
Keq_0988 => 0.02023,
Vmax_1014 => 0.00156184541889446,
Km0785_0800 => 0.975,
Km0313_0014 => 0.1,
Km0306_1045 => 0.1,
Km1212_0233 => 0.1,
Vmax_0397 => 0.68095142687838,
Km0456_0739 => 0.1,
Km0943_0355 => 0.1,
Km1322_0806 => 0.1,
Keq_0821 => 0.2,
Km0529_0393 => 0.1,
Km1322_0816 => 0.1,
Km1212_1011 => 0.1,
Keq_0226 => 66.5116279069767,
Vmax_0435 => 0.0048692983419904,
Vmax_0818 => 0.366225822315993,
Km0700_0986 => 0.1,
Vmax_0389 => 0.00486929832974676,
Keq_0550 => 20.0,
Keq_0566 => 0.2,
Km0180_0661 => 0.175,
Km1038_0989 => 0.1,
Km0644_0361 => 0.1,
Km0122_0241 => 0.1,
Km0649_1045 => 0.1,
Km0373_0111 => 0.1,
Keq_0813 => 1116.0,
ic1405_2111 => 0.1,
Keq_0658 => 0.02023,
Keq_0195 => 0.125151168854223,
Vmax_0434 => 0.014607895004426,
Km1203_0731 => 0.0867,
Km1198_0713 => 1.5,
Km1467_1266 => 0.1,
Km1360_0020 => 0.153,
Vmax_0079 => 0.963712480075322,
Km0394_0215 => 1.29,
Vmax_0525 => 0.00311599701760621,
Vmax_1936 => 28.0100750865548,
Km0180_0018 => 0.175,
Km1212_0237 => 0.1,
Km1538_0510 => 0.282,
ic0423_2111 => 0.44,
Km0434_0739 => 4.29,
Km0849_0565 => 0.162,
Km0613_0330 => 0.1,
Km1161_0387 => 0.1,
Vmax_0103 => 0.110675597773384,
Vmax_0489 => 0.310999999999689,
Km0953_0018 => 0.1,
Km1212_0219 => 0.1,
Km1487_0344 => 0.1,
Keq_0699 => 1.1744966442953,
Km1271_0713 => 0.1,
Keq_0968 => 2.0,
Keq_0344 => 2.0,
Vmax_0111 => 0.141738391988789,
Km0456_0993 => 0.1,
ep1045_2111 => 0.197,
Km0324_0065 => 0.1,
Km0837_0550 => 0.1,
Km1399_0203 => 0.527,
Km0434_0911 => 4.29,
Km0165_0060 => 0.1,
Km0062_0688 => 0.1,
Vmax_0739 => 0.300405193956128,
ic0672_2111 => 0.1,
Keq_0549 => 2.0,
Km0965_0207 => 0.1,
Km1203_0235 => 0.0867,
Keq_0234 => 0.2,
Km0434_0892 => 4.29,
Km1616_0970 => 0.1,
Km0142_0014 => 0.1,
Vmax_1050 => 3.74840956270213,
Km1198_0891 => 1.5,
Km0362_0111 => 55.8,
Km0296_0238 => 0.1,
Vmax_0470 => 10.0719265766039,
Km1207_0244 => 0.1,
Km0445_0250 => 0.1,
Km0394_1729 => 1.29,
Vmax_0237 => 0.0182089633124969,
Km0295_0215 => 0.1,
Keq_0558 => 0.2,
Vmax_0916 => 1.25604731178129,
Km0526_0874 => 0.1,
Vmax_0913 => 0.184074833509858,
Km0633_1084 => 0.1,
Vmax_0312 => 0.0577613521248606,
Km1616_0974 => 0.1,
Vmax_0722 => 2.21081911854117,
Vmax_0004 => 29.8936617861741,
Km1620_0970 => 0.1,
Km0260_0891 => 0.117,
ep1059_2111 => 3.2e-5,
Keq_0548 => 0.601398601398601,
Km0304_0731 => 0.1,
Km0075_0486 => 0.000737,
Km0394_1026 => 1.29,
ep1006_2111 => 0.075,
Km1153_0874 => 0.1,
Vmax_0038 => 0.00346221890844787,
Km0973_0208 => 0.1,
Keq_0499 => 2.0,
Km1616_0976 => 0.1,
Keq_0435 => 0.2,
Km1269_0820 => 0.1,
Km0325_0914 => 0.1,
Km0188_0893 => 0.0169,
Vmax_0982 => 2.42001363514253,
Km0664_0233 => 0.1,
Keq_1026 => 0.155038759689922,
Km1059_0317 => 0.1,
Vmax_0450 => 25.0072374427267,
Km1364_0911 => 0.1,
Km0188_0366 => 0.0169,
Km1101_0386 => 0.1,
Keq_0959 => 0.0675521821631879,
Km1569_0986 => 0.1,
Keq_0340 => 20.0,
Km0232_0352 => 0.1,
Keq_0091 => 2.0,
Km0633_0568 => 0.1,
Km1016_0663 => 0.1,
Km0467_0806 => 0.1,
Vmax_0387 => 0.00486929832974676,
Km0390_0032 => 0.1,
Km0218_0559 => 0.1,
Keq_0851 => 1.1744966442953,
Km0467_0976 => 0.1,
Km0434_0142 => 4.29,
ic1467_2111 => 0.1,
Km0999_0476 => 0.1,
Km0028_0558 => 0.1,
Keq_0080 => 2.0,
Km0142_0015 => 0.1,
Km1487_0446 => 0.1,
Km0782_0514 => 0.1,
Km0306_0080 => 0.1,
Km0991_0918 => 0.298,
Km1559_0973 => 0.649,
Keq_1664 => 2.0,
Vmax_0892 => 43.3131197144248,
Km0066_0451 => 0.1,
Keq_1050 => 0.93062,
ic0666_2111 => 0.1,
Keq_0397 => 0.2,
Km0301_0499 => 0.1,
Km0841_0312 => 0.1,
Keq_0279 => 0.2,
Km0943_0667 => 0.1,
Km0434_0534 => 4.29,
Km0178_0310 => 0.1,
Km0299_0151 => 0.1,
Km0654_0364 => 0.1,
ic0662_2111 => 0.1,
Km1195_0762 => 0.1,
Vmax_0993 => 0.00227924602831534,
Km1073_0432 => 0.1,
Km1207_1011 => 0.1,
Keq_0339 => 2.0,
Km0039_0016 => 0.1,
Keq_0236 => 2.0,
Km0991_0851 => 0.298,
Keq_0489 => 0.437956204379562,
Km0557_0886 => 0.0589,
Km0456_0397 => 0.1,
Vmax_0726 => 0.0651116428655587,
Keq_0525 => 0.00205128205128205,
Km1101_0434 => 0.1,
Km0118_0012 => 0.1,
Km1408_0916 => 0.1,
ep0526_2111 => 0.05,
Km0709_0438 => 0.1,
Km0456_0961 => 0.1,
Km1176_0433 => 0.1,
Keq_0757 => 0.2,
Km0394_0911 => 1.29,
Km0529_0407 => 0.1,
Km1021_0699 => 0.1,
Km1416_0900 => 0.1,
Km0419_0326 => 0.1,
Vmax_0989 => 1.01135261225708,
Keq_0736 => 2.0,
Km0409_1051 => 0.02,
Vmax_1012 => 0.0606080654473292,
Km0633_0399 => 0.1,
Km1212_0259 => 0.1,
Km1045_1041 => 0.177,
Km0076_0566 => 0.1,
Vmax_0550 => 0.118311713921374,
Keq_0039 => 2.0,
Km1565_0514 => 0.049,
Km0260_0893 => 0.117,
Keq_1045 => 2.0,
Km0063_0696 => 0.1,
Keq_0727 => 2.0,
Km0666_0244 => 0.1,
Keq_0537 => 0.2,
Km1212_0547 => 0.1,
Km0613_0978 => 0.1,
Km1051_1063 => 0.1,
Vmax_0669 => 0.463167951752402,
Vmax_1115 => 3.6635781139731,
Vmax_0361 => 2.21081911853888,
Km1014_0547 => 0.1,
Km0423_0916 => 0.44,
Km1322_0279 => 0.1,
Km0943_0739 => 0.1,
Km0835_0543 => 0.1,
Km0841_1027 => 0.1,
Km1212_0238 => 0.1,
Vmax_0547 => 1.12829867316427,
Km0710_0001 => 0.1,
Vmax_0240 => 0.0286140852053522,
Km0586_0529 => 0.175,
Km0122_0231 => 0.1,
Km0456_0386 => 0.1,
Vmax_0542 => 0.275823439706347,
Keq_0545 => 0.01156,
Km1207_0317 => 0.1,
Km1207_0678 => 0.1,
Km0722_0317 => 0.1,
Km0322_0080 => 0.1,
Km1337_0877 => 0.1,
Km1337_0880 => 0.1,
Km0010_0061 => 0.1,
Km0456_0877 => 0.1,
Km0016_0352 => 0.1,
Km0550_0563 => 0.1,
Km0516_0302 => 0.1,
Vmax_0317 => 0.417028883814425,
Km0002_0005 => 0.1,
Km1212_0471 => 0.1,
Vmax_0813 => 0.192403198559989,
Km1039_0993 => 0.2,
Km0574_0902 => 0.1,
Km0434_0548 => 4.29,
Km0063_0004 => 0.1,
Km0394_0142 => 1.29,
Km0324_0279 => 0.1,
Vmax_2079 => 0.01556,
Vmax_0144 => 0.0295962013024971,
Km0456_0434 => 0.1,
Keq_0016 => 0.379506641366224,
Km0725_0451 => 0.1,
Km0722_0762 => 0.1,
Km0754_0483 => 0.1,
Km0086_0566 => 0.1,
ic1003_2111 => 0.195,
Km1198_0491 => 1.5,
Km0602_0432 => 0.1,
Km0297_0241 => 0.1,
Km0325_0499 => 0.1,
Vmax_0151 => 0.209502713060106,
Km0434_0225 => 4.29,
Km0419_0307 => 0.1,
Km1233_0311 => 0.1,
Km0955_0674 => 0.00953,
Keq_0904 => 0.601398601398601,
Km0434_0914 => 4.29,
Km1212_0236 => 0.1,
Km0204_0939 => 0.1,
Vmax_0060 => 0.288518242370656,
ic1032_2111 => 0.1,
Keq_0349 => 2.0,
Vmax_0723 => 0.947493907945238,
Vmax_0891 => 2.4095741643166,
Km1198_0565 => 1.5,
Vmax_0858 => 0.00775537035492324,
Km1275_0438 => 0.1,
Keq_0165 => 10788.8495781657,
Keq_0211 => 0.0611282051282051,
Km0978_0219 => 0.1,
Km1322_0065 => 0.1,
Km0359_0959 => 0.178,
Keq_0816 => 2.0,
Km1360_0065 => 0.153,
Km0633_0364 => 0.1,
Km0754_0481 => 0.1,
Vmax_0670 => 0.25293465060724,
Km0434_0528 => 4.29,
Vmax_0889 => 21.6709527907595,
Km0595_1014 => 0.1,
Vmax_1106 => 0.1586,
ic1039_2111 => 0.2,
Keq_1038 => 2.0,
ic0773_2111 => 0.1,
Km1360_0366 => 0.153,
Keq_0568 => 0.2,
Km0955_0670 => 0.00953,
Km1322_0914 => 0.1,
Km1524_1052 => 0.1,
Keq_0267 => 20.0,
ic0002_2111 => 0.1,
Km1275_0922 => 0.1,
Km0782_0529 => 0.1,
Km0629_1936 => 0.29,
Km1269_0339 => 0.1,
Vmax_0364 => 0.00924220103043985,
Km1302_0434 => 0.1,
Km0551_0020 => 0.1,
Km0033_0553 => 0.1,
Keq_0883 => 0.2,
Km1020_0670 => 0.1,
Keq_0038 => 0.2,
Km0765_0489 => 0.15,
Km0979_0208 => 0.1,
Km0201_0883 => 0.1,
Keq_1084 => 1.06602750670547,
Km0434_0962 => 4.29,
Km0739_0361 => 0.1,
Km1153_0757 => 0.1,
Km1065_0387 => 0.1,
Vmax_0020 => 0.642241607518879,
Keq_0309 => 10.0,
Keq_0678 => 2.0,
Keq_0996 => 2.0,
Km0025_0553 => 0.1,
Km0680_0165 => 55.5,
Km0700_0243 => 0.1,
Km1207_0386 => 0.1,
Km0176_0018 => 0.1,
Km1006_0536 => 0.1,
Vmax_0698 => 0.00790539984095598,
Km0394_1072 => 1.29,
Km0403_0912 => 0.1,
Vmax_0311 => 0.405406599631232,
Vmax_0663 => 0.463167951750508,
Keq_0029 => 0.2,
Km0565_1166 => 74.0,
Vmax_0432 => 0.014607894971568,
Keq_0353 => 2.0,
Km0515_0279 => 0.1,
Keq_0023 => 2.0,
Km0625_0344 => 0.1,
Km1014_0549 => 0.1,
Km0180_0851 => 0.175,
Vmax_0016 => 0.463167951752676,
ep0089_2111 => 0.00153,
Vmax_0407 => 0.00155403138574162,
Km1038_0988 => 0.1,
Km0314_2030 => 0.1,
ic1056_2111 => 0.1,
Vmax_0914 => 0.628508139179849,
Km0539_0307 => 0.1,
ic0973_2111 => 0.1,
Km1322_0079 => 0.1,
Vmax_0259 => 0.00113962301419335,
Km0654_0326 => 0.1,
Vmax_0393 => 1.909386560214,
Keq_0152 => 0.88,
Km0434_0154 => 4.29,
Km0456_0435 => 0.1,
Km0841_0813 => 0.1,
Km0390_0883 => 0.1,
Vmax_0938 => 0.219273864201699,
Km0550_0564 => 0.1,
Keq_0770 => 34.6020761245675,
Km1198_0658 => 1.5,
Vmax_1063 => 0.259858763628183,
Vmax_0032 => 0.178688964774894,
Km0373_0108 => 0.1,
Km0456_0433 => 0.1,
Keq_0366 => 18.1065088757396,
Km1445_0922 => 0.1,
Km0180_0470 => 0.175,
Keq_0399 => 19.5,
Km0529_0433 => 0.1,
Km0423_0148 => 0.44,
ic1035_2111 => 0.1,
Km1322_0908 => 0.1,
Km1543_0005 => 0.467,
Km1343_0901 => 0.1,
Vmax_0330 => 0.0065435937363289,
Km0327_0915 => 0.1,
Km0739_0800 => 0.1,
Km0434_1729 => 4.29,
Km0180_0118 => 0.175,
Km0991_0663 => 0.298,
Km0180_0538 => 0.175,
Km1271_0216 => 0.1,
Km0567_0888 => 0.135,
Km0563_1166 => 1.57,
Km0456_0234 => 0.1,
Km1203_0445 => 0.0867,
Km0567_1084 => 0.135,
Km0456_0661 => 0.1,
Km1399_0961 => 0.527,
Vmax_0108 => 0.900380321562291,
Vmax_0961 => 12.4820895804536,
Keq_0233 => 20.0,
ep0595_2111 => 0.000535599999999999,
Keq_0939 => 0.2,
Km0743_0361 => 0.1,
Km1198_1010 => 1.5,
Km1275_0317 => 0.1,
Km0306_0502 => 0.1,
Km0262_0231 => 0.1,
Km1386_0820 => 0.1,
Vmax_0549 => 0.597809798191459,
Km0633_0915 => 0.1,
Km1207_0041 => 0.1,
Keq_0726 => 0.00466200466200466,
Vmax_0694 => 0.252934650607241,
Km1399_0959 => 0.527,
Km0232_0024 => 0.1,
Km0980_0311 => 0.1,
Km1322_0958 => 0.1,
Keq_0762 => 0.2,
ep0991_2111 => 0.268,
Km0739_0528 => 0.1,
Keq_0973 => 0.308166409861325,
Keq_0391 => 0.2,
Km0785_0525 => 0.975,
Km0434_0148 => 4.29,
Km0394_0534 => 1.29,
Vmax_0097 => 1.36526832289863,
Keq_0244 => 2.0,
Km1322_1041 => 0.1,
Km0146_0096 => 0.1,
Keq_0225 => 0.0466200466200466,
Keq_0543 => 1.14285714285714,
Km0162_0023 => 0.1,
Km1207_0889 => 0.1,
Km1377_0939 => 0.1,
Km0162_0024 => 0.1,
Vmax_0759 => 0.575497720782215,
Km0423_0211 => 0.44,
Km1207_0269 => 0.1,
Km1322_2030 => 0.1,
Km0328_0967 => 0.1,
Km1277_1979 => 1.0,
Keq_0559 => 2.0,
Km1101_0108 => 0.1,
ic1337_2111 => 0.1,
Km0291_0699 => 0.1,
Km0456_0821 => 0.1,
Km0456_0398 => 0.1,
Km0633_0208 => 0.1,
Km0362_0312 => 55.8,
Km0633_0726 => 0.1,
Km0419_1115 => 0.1,
Km0262_0317 => 0.1,
Km0077_0909 => 0.1,
Vmax_0992 => 0.0577613521248606,
Km1427_0887 => 0.1,
ep1467_2111 => 0.02,
Km1408_0982 => 0.1,
Vmax_1052 => 0.0255877211882401,
Km0434_0514 => 4.29,
Keq_0398 => 0.002,
Km1212_0173 => 0.1,
Km1275_0267 => 0.1,
Keq_0978 => 2.0,
Km0423_0514 => 0.44,
Keq_0914 => 0.30840953917877,
Km0581_1050 => 0.1,
Km0529_0397 => 0.1,
Km0644_0362 => 0.1,
Km0297_0235 => 0.1,
Keq_0529 => 1.14285714285714,
Km0709_0004 => 0.1,
ic1351_2111 => 0.1,
ep1032_2111 => 0.114,
Km0456_0889 => 0.1,
Keq_0961 => 0.0219354838709677,
ep1025_2111 => 0.239,
Km1616_0973 => 0.1,
Vmax_0001 => 54.1365634735074,
Keq_0993 => 0.1,
Km1322_0219 => 0.1,
Km0979_0816 => 0.1,
Km1198_0486 => 1.5,
Vmax_0476 => 6.19846821543004,
Vmax_0445 => 0.573900553815358,
Keq_0919 => 20.0,
Km0394_0548 => 1.29,
Vmax_0446 => 0.416060616593366,
Km0126_0757 => 0.1,
Keq_0886 => 11.7420779559999,
ic0122_2111 => 0.1,
Km0633_0202 => 0.1,
Km1366_0919 => 0.1,
Km1198_0536 => 1.5,
Km1207_0669 => 0.1,
Keq_0111 => 111.6,
Km0210_0039 => 0.1,
Keq_0538 => 1.1744966442953,
Km1377_0938 => 0.1,
Km1039_0309 => 0.2,
Keq_0001 => 10.54,
Keq_0917 => 13.4228187919463,
Keq_0326 => 20.0,
Km1212_0397 => 0.1,
Km1322_0337 => 0.1,
Vmax_0958 => 11.1138381033712,
Km1056_1087 => 0.1,
Km0529_0300 => 0.1,
Km1198_0731 => 1.5,
Km1234_0992 => 0.1,
Km0434_0307 => 4.29,
Km1543_0510 => 0.467,
Km0764_1049 => 0.079,
Vmax_0148 => 2.63500433460268,
Km1545_1072 => 0.1,
Km1207_0389 => 0.1,
Km1048_0694 => 0.1,
Vmax_0696 => 13.9503755002146,
Vmax_0959 => 45.7829965006365,
Keq_0280 => 2.0,
Km0656_0364 => 0.1,
Km0568_0888 => 0.193,
Km1620_0883 => 0.1,
Km1429_0997 => 0.1,
Km1212_0661 => 0.1,
Km0009_0061 => 0.1,
Km1302_0993 => 0.1,
ic1016_2111 => 0.1,
Km0394_1704 => 1.29,
Km0973_0215 => 0.1,
Km0764_0450 => 0.079,
Km0767_0495 => 0.0685,
Keq_0097 => 0.0720126454205359,
Km0298_0154 => 0.1,
Km0380_0008 => 0.1,
Keq_1051 => 0.0385,
ic0589_2111 => 0.1,
Km1101_0387 => 0.1,
Km0529_0559 => 0.1,
Vmax_0399 => 0.212662829331961,
Km0362_0173 => 55.8,
Km1084_0340 => 0.1,
Km1275_1011 => 0.1,
Km0666_1014 => 0.1,
Km1238_1041 => 0.1,
Keq_0723 => 3.3955857385399,
Km1576_0239 => 0.1,
Keq_0908 => 0.601398601398601,
Km1405_0968 => 0.1,
Vmax_1172 => 0.0622,
Vmax_0502 => 1.16847580014159,
Km1577_0240 => 0.1,
Km1322_0250 => 0.1,
Km0394_0739 => 1.29,
Km1399_0958 => 0.527,
Vmax_1697 => 12.22,
Km0664_0242 => 0.1,
Keq_0958 => 0.114117381669564,
Km0403_0151 => 0.1,
Km0629_0990 => 0.29,
Keq_0355 => 2.0,
Km1266_0816 => 0.1,
Keq_0696 => 0.1156,
Km1029_0727 => 0.1,
Km0019_0736 => 0.1,
Km1039_0992 => 0.2,
Km1212_0239 => 0.1,
Vmax_0724 => 0.421170851701909,
Km0991_0674 => 0.298,
Km0522_0302 => 0.1,
Keq_0938 => 0.2,
Km0394_0962 => 1.29,
Km0568_0467 => 0.193,
Km0577_0984 => 0.1,
Keq_0386 => 0.2,
Vmax_0115 => 0.366225822315712,
Km1377_0278 => 0.1,
Keq_0243 => 2.0,
Km0940_0280 => 0.1,
Km1101_0391 => 0.1,
Keq_0302 => 2.0,
Keq_0528 => 0.601398601398601,
Km1198_0988 => 1.5,
Km1399_0004 => 0.527,
Km0296_0236 => 0.1,
Km1203_0988 => 0.0867,
Km1426_0990 => 0.1,
Km0539_0736 => 0.1,
Km1538_0195 => 0.282,
Vmax_0349 => 0.141974056705753,
Km0434_0226 => 4.29,
Km0204_1063 => 0.1,
Km0657_0242 => 0.1,
Vmax_0337 => 0.000466197393257317,
Km1520_1051 => 0.00385,
Km0999_0563 => 0.1,
Km0529_0992 => 0.1,
Km0973_0216 => 0.1,
Vmax_0355 => 0.0368918659244612,
Km1524_0336 => 0.1,
Keq_0330 => 6.65116279069767,
Km0019_0904 => 0.1,
Km0165_0023 => 0.1,
Km1191_0115 => 0.1,
Km1194_0214 => 0.1,
Km1203_0770 => 0.0867,
Km1203_0713 => 0.0867,
Keq_0154 => 0.601398601398601,
Km1191_0759 => 0.1,
Km0328_0968 => 0.1,
Km1039_0917 => 0.2,
Km0313_2030 => 0.1,
Km1535_0439 => 0.1,
Km0180_0471 => 0.175,
Km0582_0529 => 0.1,
Km0120_0446 => 0.1,
Keq_0389 => 0.2,
Keq_0982 => 2.0,
Vmax_0238 => 0.0286140852053522,
Km1275_0241 => 0.1,
Km1620_0976 => 0.1,
Km0709_0439 => 0.1,
Km1192_0115 => 0.1,
Keq_0250 => 0.0538903613868649,
Vmax_0226 => 139.443915613713,
Keq_0594 => 2.0,
Keq_1027 => 2.0,
Km0077_0007 => 0.1,
Km0434_0079 => 4.29,
Km1620_0973 => 0.1,
Vmax_0912 => 0.495266567943608,
Km0991_0079 => 0.298,
Km0445_0108 => 0.1,
Vmax_0211 => 1.52183755575802,
Km1198_0470 => 1.5,
Keq_0542 => 2.0,
Km1203_0536 => 0.0867,
Km0837_0339 => 0.1,
Keq_2030 => 0.2,
Km1212_0231 => 0.1,
Vmax_0727 => 0.176076528262974,
Km0306_0731 => 0.1,
Vmax_1266 => 0.072386021252549,
Km0595_0399 => 0.1,
Km0456_0545 => 0.1,
Km0633_0820 => 0.1,
Km0940_0661 => 0.1,
Vmax_0219 => 1.77304077211527,
Km1255_0398 => 0.1,
Vmax_0792 => 0.0845961934136318,
Km0722_0525 => 0.1,
Keq_0661 => 0.35,
Vmax_0820 => 0.331272798980089,
Km1537_0770 => 0.1,
Km0456_0566 => 0.1,
Vmax_0758 => 0.00238734419654136,
Km1084_0919 => 0.1,
Km1616_0883 => 0.1,
Km0423_0152 => 0.44,
Km0373_0543 => 0.1,
Vmax_0537 => 0.144259121185328,
Km0258_0918 => 0.1,
Km0394_0855 => 1.29,
Vmax_0816 => 0.366225822315819,
Keq_0564 => 2.0,
Km0291_0029 => 0.1,
Keq_0462 => 2.0,
Vmax_0855 => 0.460905968731928,
Keq_1055 => 0.79,
Km0587_1704 => 0.1,
Vmax_0344 => 0.00966728457436612,
Km1322_0537 => 0.1,
Km1576_0238 => 0.1,
Keq_0446 => 6.65116279069767,
Vmax_0918 => 2.40957416431614,
Km0434_0330 => 4.29,
ic0089_2111 => 0.1,
Km1322_0855 => 0.1,
Vmax_0433 => 0.014607895004426,
Vmax_1979 => 4.93716383975333,
Km1212_0393 => 0.1,
Km1275_0239 => 0.1,
Km1207_0015 => 0.1,
Vmax_0039 => 0.275246403221606,
Km0836_0542 => 0.1,
Km1198_0961 => 1.5,
Km1212_0344 => 0.1,
Km0261_0997 => 0.1,
Km1207_0957 => 0.1,
ic0955_2111 => 0.00953,
Vmax_0973 => 0.0129390814426294,
Km0394_0330 => 1.29,
Km1322_0446 => 0.1,
Km1203_0470 => 0.0867,
Km0314_0968 => 0.1,
Km1203_1010 => 0.0867,
Vmax_0340 => 0.000518010460996976,
Keq_0433 => 0.2,
Vmax_0902 => 0.947493907945266,
Vmax_0326 => 0.00233699776303548,
Km1416_0986 => 0.1,
Vmax_0536 => 0.432777363555984,
Km0619_0594 => 0.1,
Km1413_0858 => 0.1,
Km0158_0038 => 0.1,
Km1366_0922 => 0.1,
Keq_0992 => 1.0,
Km1445_0340 => 0.1,
Km1198_0061 => 1.5,
ic0657_2111 => 0.1,
Km0745_0462 => 0.1,
Keq_1014 => 20.0,
Keq_0476 => 0.201811611207584,
Km1322_0739 => 0.1,
Km1399_0016 => 0.527,
Keq_0407 => 19.5,
ep0002_2111 => 1.14,
Km0373_0961 => 0.1,
Km0394_0307 => 1.29,
Km1035_0957 => 0.1,
Vmax_1045 => 0.00966728457436612,
Keq_0667 => 2.0,
Km0467_0792 => 0.1,
Vmax_0661 => 2.20043246181011,
Km0568_0195 => 0.193,
Vmax_0352 => 0.585114995527691,
Km1101_0397 => 0.1,
Vmax_0279 => 0.458744005369343,
Vmax_0514 => 0.48070601397936,
Km1212_0558 => 0.1,
Vmax_0957 => 0.347375963814271,
Km1212_0387 => 0.1,
Km1011_0537 => 0.1,
Keq_0547 => 2.0,
Km0120_0499 => 0.1,
Keq_0008 => 2.0,
Km0301_0079 => 0.1,
Vmax_0215 => 1.12829867316352,
Km0467_0736 => 0.1,
Km1578_0234 => 0.1,
Km0423_0032 => 0.44,
Km0563_0534 => 1.57,
Keq_0238 => 20.0,
Km1559_1084 => 0.649,
Vmax_0529 => 0.00448357348656127,
Km0991_0471 => 0.298,
Vmax_0967 => 0.00484710647182702,
ep0918_2111 => 0.000538625,
Km0574_0723 => 0.1,
Km0785_0722 => 0.975,
Km0516_0280 => 0.1,
Keq_0300 => 2.0,
Km1207_0661 => 0.1,
Km1182_0818 => 0.1,
Km0427_0202 => 0.1,
Km1203_0565 => 0.0867,
Km0573_0722 => 0.1,
Km1212_0678 => 0.1,
Vmax_1244 => 0.151990528497363,
Keq_0118 => 1.1744966442953,
Vmax_0893 => 17.5300909500658,
Km0654_1045 => 0.1,
Km0849_0153 => 0.162,
ep0999_2111 => 0.268,
Km1207_0080 => 0.1,
Km0373_0103 => 0.1,
Km1322_0108 => 0.1,
Keq_0387 => 0.2,
Keq_0986 => 2.0,
Km0209_0236 => 0.1,
Km1101_0398 => 0.1,
Keq_0032 => 0.88,
Keq_1054 => 7.34177215189873,
Keq_0393 => 0.002,
Km1212_0989 => 0.1,
Km0750_0483 => 0.1,
Km1048_1055 => 0.1,
Km0602_0399 => 0.1,
Keq_0922 => 20.0,
Km0120_0724 => 0.1,
Km1203_0891 => 0.0867,
Km1207_0922 => 0.1]

trueConstantsValues = [
extracellular => 1.0,
cell => 1.0]
